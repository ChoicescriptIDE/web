{"version":3,"file":"AzureFunctionsHook.js","sourceRoot":"","sources":["../../AutoCollection/AzureFunctionsHook.ts"],"names":[],"mappings":"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","sourcesContent":["import { Disposable, FunctionCallback, PreInvocationContext } from \"@azure/functions-core\";\r\nimport { Context, HttpRequest } from \"../Library/Functions\";\r\nimport Logging = require(\"../Library/Logging\");\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\nimport { CorrelationContext, CorrelationContextManager } from \"./CorrelationContextManager\";\r\n\r\n/** Node.js Azure Functions handle incoming HTTP requests before Application Insights SDK is available,\r\n * this code generate incoming request telemetry and generate correlation context to be used\r\n * by outgoing requests and other telemetry, we rely on hooks provided by Azure Functions\r\n*/\r\nexport class AzureFunctionsHook {\r\n    private _client: TelemetryClient;\r\n    private _functionsCoreModule: typeof import(\"@azure/functions-core\");\r\n    private _autoGenerateIncomingRequests: boolean;\r\n    private _preInvocationHook: Disposable;\r\n\r\n    constructor(client: TelemetryClient) {\r\n        this._client = client;\r\n        this._autoGenerateIncomingRequests = false;\r\n        // TODO: Enable when all Azure Functions scenarios are covered\r\n        // try {\r\n        //     this._functionsCoreModule = require(\"@azure/functions-core\");\r\n        // }\r\n        // catch (error) {\r\n        //     Logging.info(\"AzureFunctionsHook failed to load, not running in Azure Functions\");\r\n        //     return;\r\n        // }\r\n        // this._addPreInvocationHook();\r\n    }\r\n\r\n    public enable(isEnabled: boolean) {\r\n        this._autoGenerateIncomingRequests = isEnabled;\r\n    }\r\n\r\n    public dispose() {\r\n        this.enable(false);\r\n        this._removePreInvocationHook();\r\n        this._functionsCoreModule = undefined;\r\n    }\r\n\r\n    private _addPreInvocationHook() {\r\n        if (!this._preInvocationHook) {\r\n            this._preInvocationHook = this._functionsCoreModule.registerHook(\"preInvocation\", async (preInvocationContext: PreInvocationContext) => {\r\n                const originalCallback = preInvocationContext.functionCallback;\r\n                preInvocationContext.functionCallback = async (ctx: Context, request: HttpRequest) => {\r\n                    this._propagateContext(ctx, request, originalCallback);\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    private async _propagateContext(ctx: Context, request: HttpRequest, originalCallback: FunctionCallback) {\r\n        // Update context to use Azure Functions one\r\n        let extractedContext: CorrelationContext = null;\r\n        try {\r\n            // Start an AI Correlation Context using the provided Function context\r\n            extractedContext = CorrelationContextManager.startOperation(ctx, request);\r\n            extractedContext.customProperties.setProperty(\"InvocationId\", ctx.invocationId);\r\n            if (ctx.traceContext.attributes) {\r\n                extractedContext.customProperties.setProperty(\"ProcessId\", ctx.traceContext.attributes[\"ProcessId\"]);\r\n                extractedContext.customProperties.setProperty(\"LogLevel\", ctx.traceContext.attributes[\"LogLevel\"]);\r\n                extractedContext.customProperties.setProperty(\"Category\", ctx.traceContext.attributes[\"Category\"]);\r\n                extractedContext.customProperties.setProperty(\"HostInstanceId\", ctx.traceContext.attributes[\"HostInstanceId\"]);\r\n                extractedContext.customProperties.setProperty(\"AzFuncLiveLogsSessionId\", ctx.traceContext.attributes[\"#AzFuncLiveLogsSessionId\"]);\r\n            }\r\n        }\r\n        catch (err) {\r\n            Logging.warn(\"Failed to propagate context in Azure Functions\", err);\r\n            originalCallback(ctx, request);\r\n            return;\r\n        }\r\n        if (!extractedContext) {\r\n            // Correlation Context could be disabled causing this to be null\r\n            Logging.warn(\"Failed to create context in Azure Functions\");\r\n            originalCallback(ctx, request);\r\n            return;\r\n        }\r\n\r\n        CorrelationContextManager.wrapCallback(async () => {\r\n            const startTime = Date.now(); // Start trackRequest timer\r\n            originalCallback(ctx, request);\r\n            try {\r\n                if (this._autoGenerateIncomingRequests) {\r\n                    let statusCode = 200; //Default\r\n                    if (ctx.res) {\r\n                        if (ctx.res.statusCode) {\r\n                            statusCode = ctx.res.statusCode;\r\n                        }\r\n                        else if (ctx.res.status) {\r\n                            statusCode = ctx.res.status;\r\n                        }\r\n                    }\r\n                    this._client.trackRequest({\r\n                        name: request.method + \" \" + request.url,\r\n                        resultCode: statusCode,\r\n                        success: statusCode == 200,\r\n                        url: request.url,\r\n                        time: new Date(startTime),\r\n                        duration: Date.now() - startTime,\r\n                        id: extractedContext.operation?.parentId\r\n                    });\r\n                    this._client.flush();\r\n                }\r\n            }\r\n            catch (err) {\r\n                Logging.warn(\"Error creating automatic incoming request in Azure Functions\", err);\r\n            }\r\n        }, extractedContext)();\r\n    }\r\n\r\n    private _removePreInvocationHook() {\r\n        if (this._preInvocationHook) {\r\n            this._preInvocationHook.dispose();\r\n            this._preInvocationHook = undefined;\r\n        }\r\n    }\r\n}\r\n"]}
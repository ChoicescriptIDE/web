{"version":3,"file":"index.js.map","sources":["index.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\r\nimport { AppInsightsCore, isNullOrUndefined, proxyFunctions, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_DIAGNOSTIC_LOG_INTER0, _DYN_INITIALIZE } from \"./__DynamicConstants\";\r\n/**\r\n * @export\r\n * @class ApplicationInsights\r\n */\r\nvar ApplicationInsights = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ApplicationInsights.\r\n     * @param {IConfiguration & IConfig} config\r\n     * @memberof ApplicationInsights\r\n     */\r\n    function ApplicationInsights(config) {\r\n        var core = new AppInsightsCore();\r\n        // initialize the queue and config in case they are undefined\r\n        if (isNullOrUndefined(config) ||\r\n            isNullOrUndefined(config.instrumentationKey)) {\r\n            throwError(\"Invalid input configuration\");\r\n        }\r\n        dynamicProto(ApplicationInsights, this, function (_self) {\r\n            _self.config = config;\r\n            _initialize();\r\n            _self[_DYN_INITIALIZE /* @min:%2einitialize */] = _initialize;\r\n            _self.getSKUDefaults = function () {\r\n                _self.config[_DYN_DIAGNOSTIC_LOG_INTER0 /* @min:%2ediagnosticLogInterval */] =\r\n                    _self.config[_DYN_DIAGNOSTIC_LOG_INTER0 /* @min:%2ediagnosticLogInterval */] && _self.config[_DYN_DIAGNOSTIC_LOG_INTER0 /* @min:%2ediagnosticLogInterval */] > 0 ? _self.config[_DYN_DIAGNOSTIC_LOG_INTER0 /* @min:%2ediagnosticLogInterval */] : 10000;\r\n            };\r\n            _self.getSKUDefaults();\r\n            proxyFunctions(_self, core, [\r\n                \"track\",\r\n                \"flush\",\r\n                \"pollInternalLogs\",\r\n                \"stopPollingInternalLogs\",\r\n                \"unload\",\r\n                \"getPlugin\",\r\n                \"addPlugin\",\r\n                \"evtNamespace\",\r\n                \"addUnloadCb\"\r\n            ]);\r\n            function _initialize() {\r\n                var extensions = [];\r\n                var appInsightsChannel = new Sender();\r\n                extensions.push(appInsightsChannel);\r\n                // initialize core\r\n                core[_DYN_INITIALIZE /* @min:%2einitialize */](_self.config, extensions);\r\n                // initialize extensions\r\n                appInsightsChannel[_DYN_INITIALIZE /* @min:%2einitialize */](_self.config, core, extensions);\r\n                core.pollInternalLogs();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Initialize this instance of ApplicationInsights\r\n     *\r\n     * @memberof ApplicationInsights\r\n     */\r\n    ApplicationInsights.prototype.initialize = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Send a manually constructed custom event\r\n     *\r\n     * @param {ITelemetryItem} item\r\n     * @memberof ApplicationInsights\r\n     */\r\n    ApplicationInsights.prototype.track = function (item) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Immediately send all batched telemetry\r\n     * @param {boolean} [async=true]\r\n     * @memberof ApplicationInsights\r\n     */\r\n    ApplicationInsights.prototype.flush = function (async) {\r\n        if (async === void 0) { async = true; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ApplicationInsights.prototype.pollInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ApplicationInsights.prototype.stopPollingInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ApplicationInsights.prototype.getSKUDefaults = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Unload and Tear down the SDK and any initialized plugins, after calling this the SDK will be considered\r\n     * to be un-initialized and non-operational, re-initializing the SDK should only be attempted if the previous\r\n     * unload call return `true` stating that all plugins reported that they also unloaded, the recommended\r\n     * approach is to create a new instance and initialize that instance.\r\n     * This is due to possible unexpected side effects caused by plugins not supporting unload / teardown, unable\r\n     * to successfully remove any global references or they may just be completing the unload process asynchronously.\r\n     */\r\n    ApplicationInsights.prototype.unload = function (isAsync, unloadComplete) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Find and return the (first) plugin with the specified identifier if present\r\n     * @param pluginIdentifier\r\n     */\r\n    ApplicationInsights.prototype.getPlugin = function (pluginIdentifier) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add a new plugin to the installation\r\n     * @param plugin - The new plugin to add\r\n     * @param replaceExisting - should any existing plugin be replaced\r\n     * @param doAsync - Should the add be performed asynchronously\r\n     */\r\n    ApplicationInsights.prototype.addPlugin = function (plugin, replaceExisting, doAsync, addCb) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Returns the unique event namespace that should be used\r\n     */\r\n    ApplicationInsights.prototype.evtNamespace = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an unload handler that will be called when the SDK is being unloaded\r\n     * @param handler - the handler\r\n     */\r\n    ApplicationInsights.prototype.addUnloadCb = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return ApplicationInsights;\r\n}());\r\nexport { ApplicationInsights };\r\nexport { AppInsightsCore, CoreUtils, arrForEach, _InternalMessageId, isNullOrUndefined, throwError, proxyFunctions } from \"@microsoft/applicationinsights-core-js\";\r\nexport { SeverityLevel } from \"@microsoft/applicationinsights-common\";\r\nexport { Sender } from \"@microsoft/applicationinsights-channel-js\";\r\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":";;;;AAA4D;AAC1B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;8DA6EM,CAAC;;;;;;+BACwB;AAC/B;AACA;AACA;AACA;AACA;AACA"}
"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const vscode_uri_1 = require("vscode-uri");
const sync_api_common_1 = require("@vscode/sync-api-common");
const vscode = __importStar(require("./vscode"));
class TimerImpl {
    constructor(connection) {
        this.connection = connection;
    }
    sleep(ms) {
        this.connection.sendRequest('timer/sleep', { ms });
    }
}
class ProcessImpl {
    constructor(connection) {
        this.connection = connection;
    }
    procExit(rval) {
        this.connection.sendRequest('process/proc_exit', { rval: rval });
    }
}
class TerminalImpl {
    constructor(connection, encoder) {
        this.connection = connection;
        this.encoder = encoder;
    }
    write(value, _encoding) {
        const binary = (typeof value === 'string')
            ? this.encoder.encode(value) : value;
        this.connection.sendRequest('terminal/write', { binary });
    }
    read() {
        const result = this.connection.sendRequest('terminal/read', new sync_api_common_1.VariableResult('binary'));
        if (sync_api_common_1.RequestResult.hasData(result)) {
            return result.data;
        }
        throw new sync_api_common_1.RPCError(result.errno, `Should never happen`);
    }
}
class FileSystemImpl {
    constructor(connection) {
        this.connection = connection;
    }
    stat(uri) {
        const requestResult = this.connection.sendRequest('fileSystem/stat', { uri: uri.toJSON() }, sync_api_common_1.DTOs.Stat.typedResult);
        if (sync_api_common_1.RequestResult.hasData(requestResult)) {
            const stat = sync_api_common_1.DTOs.Stat.create(requestResult.data);
            const permission = stat.permission;
            const result = {
                type: stat.type,
                ctime: stat.ctime,
                mtime: stat.mtime,
                size: stat.size
            };
            if (permission !== 0) {
                result.permissions = permission;
            }
            return result;
        }
        throw this.asFileSystemError(requestResult.errno, uri);
    }
    readFile(uri) {
        const requestResult = this.connection.sendRequest('fileSystem/readFile', { uri: uri.toJSON() }, new sync_api_common_1.VariableResult('binary'));
        if (sync_api_common_1.RequestResult.hasData(requestResult)) {
            return requestResult.data;
        }
        throw this.asFileSystemError(requestResult.errno, uri);
    }
    writeFile(uri, content) {
        const requestResult = this.connection.sendRequest('fileSystem/writeFile', { uri: uri.toJSON(), binary: content });
        if (requestResult.errno !== sync_api_common_1.RPCErrno.Success) {
            throw this.asFileSystemError(requestResult.errno, uri);
        }
    }
    readDirectory(uri) {
        const requestResult = this.connection.sendRequest('fileSystem/readDirectory', { uri: uri.toJSON() }, new sync_api_common_1.VariableResult('json'));
        if (sync_api_common_1.RequestResult.hasData(requestResult)) {
            return requestResult.data;
        }
        throw this.asFileSystemError(requestResult.errno, uri);
    }
    createDirectory(uri) {
        const requestResult = this.connection.sendRequest('fileSystem/createDirectory', { uri: uri.toJSON() });
        if (requestResult.errno !== sync_api_common_1.RPCErrno.Success) {
            throw this.asFileSystemError(requestResult.errno, uri);
        }
    }
    delete(uri, options) {
        const requestResult = this.connection.sendRequest('fileSystem/delete', { uri: uri.toJSON(), options });
        if (requestResult.errno !== sync_api_common_1.RPCErrno.Success) {
            throw this.asFileSystemError(requestResult.errno, uri);
        }
    }
    rename(source, target, options) {
        const requestResult = this.connection.sendRequest('fileSystem/rename', { source: source.toJSON(), target: target.toJSON(), options });
        if (requestResult.errno !== sync_api_common_1.RPCErrno.Success) {
            throw this.asFileSystemError(requestResult.errno, `${source.toString()} -> ${target.toString()}`);
        }
    }
    asFileSystemError(errno, uri) {
        switch (errno) {
            case sync_api_common_1.DTOs.FileSystemError.FileNotFound:
                return vscode.FileSystemError.FileNotFound(uri);
            case sync_api_common_1.DTOs.FileSystemError.FileExists:
                return vscode.FileSystemError.FileExists(uri);
            case sync_api_common_1.DTOs.FileSystemError.FileNotADirectory:
                return vscode.FileSystemError.FileNotADirectory(uri);
            case sync_api_common_1.DTOs.FileSystemError.FileIsADirectory:
                return vscode.FileSystemError.FileIsADirectory(uri);
            case sync_api_common_1.DTOs.FileSystemError.NoPermissions:
                return vscode.FileSystemError.NoPermissions(uri);
            case sync_api_common_1.DTOs.FileSystemError.Unavailable:
                return vscode.FileSystemError.Unavailable(uri);
        }
        return vscode.FileSystemError.Unavailable(uri);
    }
}
class WorkspaceImpl {
    constructor(connection) {
        this.connection = connection;
        this.fileSystem = new FileSystemImpl(this.connection);
    }
    get workspaceFolders() {
        const requestResult = this.connection.sendRequest('workspace/workspaceFolders', new sync_api_common_1.VariableResult('json'));
        if (sync_api_common_1.RequestResult.hasData(requestResult)) {
            return requestResult.data.map(folder => { return { uri: vscode_uri_1.URI.from(folder.uri), name: folder.name, index: folder.index }; });
        }
        throw new sync_api_common_1.RPCError(sync_api_common_1.RPCErrno.UnknownError);
    }
}
class WindowImpl {
    constructor(connection) {
        this.connection = connection;
    }
    get activeTextDocument() {
        const requestResult = this.connection.sendRequest('window/activeTextDocument', new sync_api_common_1.VariableResult('json'));
        if (sync_api_common_1.RequestResult.hasData(requestResult)) {
            if (requestResult.data === null) {
                return undefined;
            }
            return { uri: vscode_uri_1.URI.from(requestResult.data.uri) };
        }
        throw new sync_api_common_1.RPCError(sync_api_common_1.RPCErrno.UnknownError);
    }
}
class ApiClient {
    constructor(connection) {
        this.connection = connection;
        this.encoder = (0, sync_api_common_1.RAL)().TextEncoder.create();
        this.timer = new TimerImpl(this.connection);
        this.process = new ProcessImpl(this.connection);
        this.vscode = {
            terminal: new TerminalImpl(this.connection, this.encoder),
            window: new WindowImpl(this.connection),
            workspace: new WorkspaceImpl(this.connection)
        };
    }
}
exports.ApiClient = ApiClient;
//# sourceMappingURL=apiClient.js.map
"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystemError = exports.FilePermission = exports.FileType = void 0;
/**
 * Enumeration of file types. The types `File` and `Directory` can also be
 * a symbolic links, in that case use `FileType.File | FileType.SymbolicLink` and
 * `FileType.Directory | FileType.SymbolicLink`.
 */
var FileType;
(function (FileType) {
    /**
     * The file type is unknown.
     */
    FileType[FileType["Unknown"] = 0] = "Unknown";
    /**
     * A regular file.
     */
    FileType[FileType["File"] = 1] = "File";
    /**
     * A directory.
     */
    FileType[FileType["Directory"] = 2] = "Directory";
    /**
     * A symbolic link to a file.
     */
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType = exports.FileType || (exports.FileType = {}));
var FilePermission;
(function (FilePermission) {
    /**
     * The file is readonly.
     */
    FilePermission[FilePermission["Readonly"] = 1] = "Readonly";
})(FilePermission = exports.FilePermission || (exports.FilePermission = {}));
class FileSystemError extends Error {
    /**
      * Creates a new filesystem error.
      *
      * @param messageOrUri Message or uri.
      */
    constructor(code, messageOrUri) {
        super(typeof messageOrUri === 'string' ? messageOrUri : messageOrUri !== undefined ? messageOrUri.toString() : 'Unknown error');
        this.code = code;
    }
    /**
      * Create an error to signal that a file or folder wasn't found.
      * @param messageOrUri Message or uri.
      */
    static FileNotFound(messageOrUri) {
        return new FileSystemError('FileNotFound', messageOrUri);
    }
    /**
     * Create an error to signal that a file or folder already exists, e.g. when
     * creating but not overwriting a file.
     * @param messageOrUri Message or uri.
     */
    static FileExists(messageOrUri) {
        return new FileSystemError('FileExists', messageOrUri);
    }
    /**
     * Create an error to signal that a file is not a folder.
     * @param messageOrUri Message or uri.
     */
    static FileNotADirectory(messageOrUri) {
        return new FileSystemError('FileNotADirectory', messageOrUri);
    }
    /**
     * Create an error to signal that a file is a folder.
     * @param messageOrUri Message or uri.
     */
    static FileIsADirectory(messageOrUri) {
        return new FileSystemError('FileIsADirectory', messageOrUri);
    }
    /**
     * Create an error to signal that an operation lacks required permissions.
     * @param messageOrUri Message or uri.
     */
    static NoPermissions(messageOrUri) {
        return new FileSystemError('NoPermissions', messageOrUri);
    }
    /**
     * Create an error to signal that the file system is unavailable or too busy to
     * complete a request.
     * @param messageOrUri Message or uri.
     */
    static Unavailable(messageOrUri) {
        return new FileSystemError('Unavailable', messageOrUri);
    }
}
exports.FileSystemError = FileSystemError;
//# sourceMappingURL=vscode.js.map
{"version":3,"sources":["fake","file:///Users/carey/Documents/Work/Github/vscode/src/vs/base/common/ternarySearchTree.ts","file:///Users/carey/Documents/Work/Github/vscode/src/vs/platform/instantiation/common/instantiation.ts","file:///Users/carey/Documents/Work/Github/vscode/src/vs/platform/profiling/common/profiling.ts","file:///Users/carey/Documents/Work/Github/vscode/src/vs/platform/profiling/common/profilingModel.ts","file:///Users/carey/Documents/Work/Github/vscode/src/vs/platform/profiling/electron-sandbox/profileAnalysisWorker.ts"],"names":[],"mappings":"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","file":"profileAnalysisWorker.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { shuffle } from 'vs/base/common/arrays';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { compare, compareIgnoreCase, compareSubstring, compareSubstringIgnoreCase } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\n\nexport interface IKeyIterator<K> {\n\treset(key: K): this;\n\tnext(): this;\n\n\thasNext(): boolean;\n\tcmp(a: string): number;\n\tvalue(): string;\n}\n\nexport class StringIterator implements IKeyIterator<string> {\n\n\tprivate _value: string = '';\n\tprivate _pos: number = 0;\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._pos = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tthis._pos += 1;\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._pos < this._value.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tconst aCode = a.charCodeAt(0);\n\t\tconst thisCode = this._value.charCodeAt(this._pos);\n\t\treturn aCode - thisCode;\n\t}\n\n\tvalue(): string {\n\t\treturn this._value[this._pos];\n\t}\n}\n\nexport class ConfigKeysIterator implements IKeyIterator<string> {\n\n\tprivate _value!: string;\n\tprivate _from!: number;\n\tprivate _to!: number;\n\n\tconstructor(\n\t\tprivate readonly _caseSensitive: boolean = true\n\t) { }\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._value.length;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._value.length; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Period) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\t\treturn this._caseSensitive\n\t\t\t? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n\t\t\t: compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nexport class PathIterator implements IKeyIterator<string> {\n\n\tprivate _value!: string;\n\tprivate _valueLen!: number;\n\tprivate _from!: number;\n\tprivate _to!: number;\n\n\tconstructor(\n\t\tprivate readonly _splitOnBackslash: boolean = true,\n\t\tprivate readonly _caseSensitive: boolean = true\n\t) { }\n\n\treset(key: string): this {\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\tthis._value = key;\n\t\tthis._valueLen = key.length;\n\t\tfor (let pos = key.length - 1; pos >= 0; pos--, this._valueLen--) {\n\t\t\tconst ch = this._value.charCodeAt(pos);\n\t\t\tif (!(ch === CharCode.Slash || this._splitOnBackslash && ch === CharCode.Backslash)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._valueLen;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._valueLen; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Slash || this._splitOnBackslash && ch === CharCode.Backslash) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\t\treturn this._caseSensitive\n\t\t\t? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n\t\t\t: compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nconst enum UriIteratorState {\n\tScheme = 1, Authority = 2, Path = 3, Query = 4, Fragment = 5\n}\n\nexport class UriIterator implements IKeyIterator<URI> {\n\n\tprivate _pathIterator!: PathIterator;\n\tprivate _value!: URI;\n\tprivate _states: UriIteratorState[] = [];\n\tprivate _stateIdx: number = 0;\n\n\tconstructor(\n\t\tprivate readonly _ignorePathCasing: (uri: URI) => boolean,\n\t\tprivate readonly _ignoreQueryAndFragment: (uri: URI) => boolean) { }\n\n\treset(key: URI): this {\n\t\tthis._value = key;\n\t\tthis._states = [];\n\t\tif (this._value.scheme) {\n\t\t\tthis._states.push(UriIteratorState.Scheme);\n\t\t}\n\t\tif (this._value.authority) {\n\t\t\tthis._states.push(UriIteratorState.Authority);\n\t\t}\n\t\tif (this._value.path) {\n\t\t\tthis._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\n\t\t\tthis._pathIterator.reset(key.path);\n\t\t\tif (this._pathIterator.value()) {\n\t\t\t\tthis._states.push(UriIteratorState.Path);\n\t\t\t}\n\t\t}\n\t\tif (!this._ignoreQueryAndFragment(key)) {\n\t\t\tif (this._value.query) {\n\t\t\t\tthis._states.push(UriIteratorState.Query);\n\t\t\t}\n\t\t\tif (this._value.fragment) {\n\t\t\t\tthis._states.push(UriIteratorState.Fragment);\n\t\t\t}\n\t\t}\n\t\tthis._stateIdx = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext()) {\n\t\t\tthis._pathIterator.next();\n\t\t} else {\n\t\t\tthis._stateIdx += 1;\n\t\t}\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext())\n\t\t\t|| this._stateIdx < this._states.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n\t\t\treturn compareIgnoreCase(a, this._value.scheme);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n\t\t\treturn compareIgnoreCase(a, this._value.authority);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n\t\t\treturn this._pathIterator.cmp(a);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n\t\t\treturn compare(a, this._value.query);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n\t\t\treturn compare(a, this._value.fragment);\n\t\t}\n\t\tthrow new Error();\n\t}\n\n\tvalue(): string {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n\t\t\treturn this._value.scheme;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n\t\t\treturn this._value.authority;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n\t\t\treturn this._pathIterator.value();\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n\t\t\treturn this._value.query;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n\t\t\treturn this._value.fragment;\n\t\t}\n\t\tthrow new Error();\n\t}\n}\nclass TernarySearchTreeNode<K, V> {\n\theight: number = 1;\n\tsegment!: string;\n\tvalue: V | undefined;\n\tkey: K | undefined;\n\tleft: TernarySearchTreeNode<K, V> | undefined;\n\tmid: TernarySearchTreeNode<K, V> | undefined;\n\tright: TernarySearchTreeNode<K, V> | undefined;\n\n\tisEmpty(): boolean {\n\t\treturn !this.left && !this.mid && !this.right && !this.value;\n\t}\n\n\trotateLeft() {\n\t\tconst tmp = this.right!;\n\t\tthis.right = tmp.left;\n\t\ttmp.left = this;\n\t\tthis.updateHeight();\n\t\ttmp.updateHeight();\n\t\treturn tmp;\n\t}\n\n\trotateRight() {\n\t\tconst tmp = this.left!;\n\t\tthis.left = tmp.right;\n\t\ttmp.right = this;\n\t\tthis.updateHeight();\n\t\ttmp.updateHeight();\n\t\treturn tmp;\n\t}\n\n\tupdateHeight() {\n\t\tthis.height = 1 + Math.max(this.heightLeft, this.heightRight);\n\t}\n\n\tbalanceFactor() {\n\t\treturn this.heightRight - this.heightLeft;\n\t}\n\n\tget heightLeft() {\n\t\treturn this.left?.height ?? 0;\n\t}\n\n\tget heightRight() {\n\t\treturn this.right?.height ?? 0;\n\t}\n}\n\nconst enum Dir {\n\tLeft = -1,\n\tMid = 0,\n\tRight = 1\n}\n\nexport class TernarySearchTree<K, V> {\n\n\tstatic forUris<E>(ignorePathCasing: (key: URI) => boolean = () => false, ignoreQueryAndFragment: (key: URI) => boolean = () => false): TernarySearchTree<URI, E> {\n\t\treturn new TernarySearchTree<URI, E>(new UriIterator(ignorePathCasing, ignoreQueryAndFragment));\n\t}\n\n\tstatic forPaths<E>(ignorePathCasing = false): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new PathIterator(undefined, !ignorePathCasing));\n\t}\n\n\tstatic forStrings<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new StringIterator());\n\t}\n\n\tstatic forConfigKeys<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new ConfigKeysIterator());\n\t}\n\n\tprivate _iter: IKeyIterator<K>;\n\tprivate _root: TernarySearchTreeNode<K, V> | undefined;\n\n\tconstructor(segments: IKeyIterator<K>) {\n\t\tthis._iter = segments;\n\t}\n\n\tclear(): void {\n\t\tthis._root = undefined;\n\t}\n\n\t/**\n\t * Fill the tree with the same value of the given keys\n\t */\n\tfill(element: V, keys: readonly K[]): void;\n\t/**\n\t * Fill the tree with given [key,value]-tuples\n\t */\n\tfill(values: readonly [K, V][]): void;\n\tfill(values: readonly [K, V][] | V, keys?: readonly K[]): void {\n\t\tif (keys) {\n\t\t\tconst arr = keys.slice(0);\n\t\t\tshuffle(arr);\n\t\t\tfor (const k of arr) {\n\t\t\t\tthis.set(k, (<V>values));\n\t\t\t}\n\t\t} else {\n\t\t\tconst arr = (<[K, V][]>values).slice(0);\n\t\t\tshuffle(arr);\n\t\t\tfor (const entry of arr) {\n\t\t\t\tthis.set(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tset(key: K, element: V): V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node: TernarySearchTreeNode<K, V>;\n\n\t\tif (!this._root) {\n\t\t\tthis._root = new TernarySearchTreeNode<K, V>();\n\t\t\tthis._root.segment = iter.value();\n\t\t}\n\t\tconst stack: [Dir, TernarySearchTreeNode<K, V>][] = [];\n\n\t\t// find insert_node\n\t\tnode = this._root;\n\t\twhile (true) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tif (!node.left) {\n\t\t\t\t\tnode.left = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.left.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Left, node]);\n\t\t\t\tnode = node.left;\n\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tif (!node.right) {\n\t\t\t\t\tnode.right = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.right.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Right, node]);\n\t\t\t\tnode = node.right;\n\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\tnode.mid = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.mid.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Mid, node]);\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// set value\n\t\tconst oldElement = node.value;\n\t\tnode.value = element;\n\t\tnode.key = key;\n\n\t\t// balance\n\t\tfor (let i = stack.length - 1; i >= 0; i--) {\n\t\t\tconst node = stack[i][1];\n\n\t\t\tnode.updateHeight();\n\t\t\tconst bf = node.balanceFactor();\n\n\t\t\tif (bf < -1 || bf > 1) {\n\t\t\t\t// needs rotate\n\t\t\t\tconst d1 = stack[i][0];\n\t\t\t\tconst d2 = stack[i + 1][0];\n\n\t\t\t\tif (d1 === Dir.Right && d2 === Dir.Right) {\n\t\t\t\t\t//right, right -> rotate left\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\n\t\t\t\t} else if (d1 === Dir.Left && d2 === Dir.Left) {\n\t\t\t\t\t// left, left -> rotate right\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\n\t\t\t\t} else if (d1 === Dir.Right && d2 === Dir.Left) {\n\t\t\t\t\t// right, left -> double rotate right, left\n\t\t\t\t\tnode.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\n\t\t\t\t} else if (d1 === Dir.Left && d2 === Dir.Right) {\n\t\t\t\t\t// left, right -> double rotate left, right\n\t\t\t\t\tnode.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\n\t\t\t\t// patch path to parent\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tswitch (stack[i - 1][0]) {\n\t\t\t\t\t\tcase Dir.Left:\n\t\t\t\t\t\t\tstack[i - 1][1].left = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Dir.Right:\n\t\t\t\t\t\t\tstack[i - 1][1].right = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Dir.Mid:\n\t\t\t\t\t\t\tstack[i - 1][1].mid = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._root = stack[0][1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn oldElement;\n\t}\n\n\tget(key: K): V | undefined {\n\t\treturn this._getNode(key)?.value;\n\t}\n\n\tprivate _getNode(key: K) {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\thas(key: K): boolean {\n\t\tconst node = this._getNode(key);\n\t\treturn !(node?.value === undefined && node?.mid === undefined);\n\t}\n\n\tdelete(key: K): void {\n\t\treturn this._delete(key, false);\n\t}\n\n\tdeleteSuperstr(key: K): void {\n\t\treturn this._delete(key, true);\n\t}\n\n\tprivate _delete(key: K, superStr: boolean): void {\n\t\tconst iter = this._iter.reset(key);\n\t\tconst stack: [Dir, TernarySearchTreeNode<K, V>][] = [];\n\t\tlet node = this._root;\n\n\t\t// find node\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tstack.push([Dir.Left, node]);\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tstack.push([Dir.Right, node]);\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tstack.push([Dir.Mid, node]);\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!node) {\n\t\t\t// node not found\n\t\t\treturn;\n\t\t}\n\n\t\tif (superStr) {\n\t\t\t// removing children, reset height\n\t\t\tnode.left = undefined;\n\t\t\tnode.mid = undefined;\n\t\t\tnode.right = undefined;\n\t\t\tnode.height = 1;\n\t\t} else {\n\t\t\t// removing element\n\t\t\tnode.key = undefined;\n\t\t\tnode.value = undefined;\n\t\t}\n\n\t\t// BST node removal\n\t\tif (!node.mid && !node.value) {\n\t\t\tif (node.left && node.right) {\n\t\t\t\t// full node\n\t\t\t\t// replace deleted-node with the min-node of the right branch.\n\t\t\t\t// If there is no true min-node leave things as they are\n\t\t\t\tconst min = this._min(node.right);\n\t\t\t\tif (min.key) {\n\t\t\t\t\tconst { key, value, segment } = min;\n\t\t\t\t\tthis._delete(min.key!, false);\n\t\t\t\t\tnode.key = key;\n\t\t\t\t\tnode.value = value;\n\t\t\t\t\tnode.segment = segment;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// empty or half empty\n\t\t\t\tconst newChild = node.left ?? node.right;\n\t\t\t\tif (stack.length > 0) {\n\t\t\t\t\tconst [dir, parent] = stack[stack.length - 1];\n\t\t\t\t\tswitch (dir) {\n\t\t\t\t\t\tcase Dir.Left: parent.left = newChild; break;\n\t\t\t\t\t\tcase Dir.Mid: parent.mid = newChild; break;\n\t\t\t\t\t\tcase Dir.Right: parent.right = newChild; break;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._root = newChild;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// AVL balance\n\t\tfor (let i = stack.length - 1; i >= 0; i--) {\n\t\t\tconst node = stack[i][1];\n\n\t\t\tnode.updateHeight();\n\t\t\tconst bf = node.balanceFactor();\n\t\t\tif (bf > 1) {\n\t\t\t\t// right heavy\n\t\t\t\tif (node.right!.balanceFactor() >= 0) {\n\t\t\t\t\t// right, right -> rotate left\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\t\t\t\t} else {\n\t\t\t\t\t// right, left -> double rotate\n\t\t\t\t\tnode.right = node.right!.rotateRight();\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\t\t\t\t}\n\n\t\t\t} else if (bf < -1) {\n\t\t\t\t// left heavy\n\t\t\t\tif (node.left!.balanceFactor() <= 0) {\n\t\t\t\t\t// left, left -> rotate right\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\t\t\t\t} else {\n\t\t\t\t\t// left, right -> double rotate\n\t\t\t\t\tnode.left = node.left!.rotateLeft();\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// patch path to parent\n\t\t\tif (i > 0) {\n\t\t\t\tswitch (stack[i - 1][0]) {\n\t\t\t\t\tcase Dir.Left:\n\t\t\t\t\t\tstack[i - 1][1].left = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Dir.Right:\n\t\t\t\t\t\tstack[i - 1][1].right = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Dir.Mid:\n\t\t\t\t\t\tstack[i - 1][1].mid = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._root = stack[0][1];\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _min(node: TernarySearchTreeNode<K, V>): TernarySearchTreeNode<K, V> {\n\t\twhile (node.left) {\n\t\t\tnode = node.left;\n\t\t}\n\t\treturn node;\n\t}\n\n\tfindSubstr(key: K): V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\tlet candidate: V | undefined = undefined;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tcandidate = node.value || candidate;\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node && node.value || candidate;\n\t}\n\n\tfindSuperstr(key: K): IterableIterator<[K, V]> | undefined {\n\t\treturn this._findSuperstrOrElement(key, false);\n\t}\n\n\tprivate _findSuperstrOrElement(key: K, allowValue: true): IterableIterator<[K, V]> | V | undefined;\n\tprivate _findSuperstrOrElement(key: K, allowValue: false): IterableIterator<[K, V]> | undefined;\n\tprivate _findSuperstrOrElement(key: K, allowValue: boolean): IterableIterator<[K, V]> | V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\t// collect\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\tif (allowValue) {\n\t\t\t\t\t\treturn node.value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn this._entries(node.mid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\thasElementOrSubtree(key: K): boolean {\n\t\treturn this._findSuperstrOrElement(key, true) !== undefined;\n\t}\n\n\tforEach(callback: (value: V, index: K) => any): void {\n\t\tfor (const [key, value] of this) {\n\t\t\tcallback(value, key);\n\t\t}\n\t}\n\n\t*[Symbol.iterator](): IterableIterator<[K, V]> {\n\t\tyield* this._entries(this._root);\n\t}\n\n\tprivate _entries(node: TernarySearchTreeNode<K, V> | undefined): IterableIterator<[K, V]> {\n\t\tconst result: [K, V][] = [];\n\t\tthis._dfsEntries(node, result);\n\t\treturn result[Symbol.iterator]();\n\t}\n\n\tprivate _dfsEntries(node: TernarySearchTreeNode<K, V> | undefined, bucket: [K, V][]) {\n\t\t// DFS\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\t\tif (node.left) {\n\t\t\tthis._dfsEntries(node.left, bucket);\n\t\t}\n\t\tif (node.value) {\n\t\t\tbucket.push([node.key!, node.value]);\n\t\t}\n\t\tif (node.mid) {\n\t\t\tthis._dfsEntries(node.mid, bucket);\n\t\t}\n\t\tif (node.right) {\n\t\t\tthis._dfsEntries(node.right, bucket);\n\t\t}\n\t}\n\n\t// for debug/testing\n\t_isBalanced(): boolean {\n\t\tconst nodeIsBalanced = (node: TernarySearchTreeNode<any, any> | undefined): boolean => {\n\t\t\tif (!node) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst bf = node.balanceFactor();\n\t\t\tif (bf < -1 || bf > 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn nodeIsBalanced(node.left) && nodeIsBalanced(node.right);\n\t\t};\n\t\treturn nodeIsBalanced(this._root);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as descriptors from './descriptors';\nimport { ServiceCollection } from './serviceCollection';\n\n// ------ internal util\n\nexport namespace _util {\n\n\texport const serviceIds = new Map<string, ServiceIdentifier<any>>();\n\n\texport const DI_TARGET = '$di$target';\n\texport const DI_DEPENDENCIES = '$di$dependencies';\n\n\texport function getServiceDependencies(ctor: any): { id: ServiceIdentifier<any>; index: number }[] {\n\t\treturn ctor[DI_DEPENDENCIES] || [];\n\t}\n}\n\n// --- interfaces ------\n\nexport type BrandedService = { _serviceBrand: undefined };\n\nexport interface IConstructorSignature<T, Args extends any[] = []> {\n\tnew <Services extends BrandedService[]>(...args: [...Args, ...Services]): T;\n}\n\nexport interface ServicesAccessor {\n\tget<T>(id: ServiceIdentifier<T>): T;\n}\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('instantiationService');\n\n/**\n * Given a list of arguments as a tuple, attempt to extract the leading, non-service arguments\n * to their own tuple.\n */\nexport type GetLeadingNonServiceArgs<TArgs extends any[]> =\n\tTArgs extends [] ? []\n\t: TArgs extends [...infer TFirst, BrandedService] ? GetLeadingNonServiceArgs<TFirst>\n\t: TArgs;\n\nexport interface IInstantiationService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Synchronously creates an instance that is denoted by the descriptor\n\t */\n\tcreateInstance<T>(descriptor: descriptors.SyncDescriptor0<T>): T;\n\tcreateInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(ctor: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n\n\t/**\n\t * Calls a function with a service accessor.\n\t */\n\tinvokeFunction<R, TS extends any[] = []>(fn: (accessor: ServicesAccessor, ...args: TS) => R, ...args: TS): R;\n\n\t/**\n\t * Creates a child of this service which inherits all current services\n\t * and adds/overwrites the given services.\n\t */\n\tcreateChild(services: ServiceCollection): IInstantiationService;\n}\n\n\n/**\n * Identifies a service of type `T`.\n */\nexport interface ServiceIdentifier<T> {\n\t(...args: any[]): void;\n\ttype: T;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n\tif ((target as any)[_util.DI_TARGET] === target) {\n\t\t(target as any)[_util.DI_DEPENDENCIES].push({ id, index });\n\t} else {\n\t\t(target as any)[_util.DI_DEPENDENCIES] = [{ id, index }];\n\t\t(target as any)[_util.DI_TARGET] = target;\n\t}\n}\n\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator<T>(serviceId: string): ServiceIdentifier<T> {\n\n\tif (_util.serviceIds.has(serviceId)) {\n\t\treturn _util.serviceIds.get(serviceId)!;\n\t}\n\n\tconst id = <any>function (target: Function, key: string, index: number): any {\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@IServiceName-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(id, target, index);\n\t};\n\n\tid.toString = () => serviceId;\n\n\t_util.serviceIds.set(serviceId, id);\n\treturn id;\n}\n\nexport function refineServiceDecorator<T1, T extends T1>(serviceIdentifier: ServiceIdentifier<T1>): ServiceIdentifier<T> {\n\treturn <ServiceIdentifier<T>>serviceIdentifier;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { basename, isAbsolute, join } from 'vs/base/common/path';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IV8Profile {\n\tnodes: IV8ProfileNode[];\n\tsamples?: number[];\n\ttimeDeltas?: number[];\n\tstartTime: number;\n\tendTime: number;\n}\n\nexport interface IV8ProfileNode {\n\tid: number;\n\thitCount?: number;\n\tchildren?: number[];\n\tcallFrame: IV8CallFrame;\n\tdeoptReason?: string;\n\tpositionTicks?: { line: number; ticks: number }[];\n}\n\nexport interface IV8CallFrame {\n\turl: string;\n\tscriptId: string;\n\tfunctionName: string;\n\tlineNumber: number;\n\tcolumnNumber: number;\n}\n\nexport const IV8InspectProfilingService = createDecorator<IV8InspectProfilingService>('IV8InspectProfilingService');\n\nexport interface IV8InspectProfilingService {\n\n\t_serviceBrand: undefined;\n\n\tstartProfiling(options: { port: number }): Promise<string>;\n\n\tstopProfiling(sessionId: string): Promise<IV8Profile>;\n}\n\n\nexport namespace Utils {\n\n\texport function isValidProfile(profile: IV8Profile): profile is Required<IV8Profile> {\n\t\treturn Boolean(profile.samples && profile.timeDeltas);\n\t}\n\n\texport function rewriteAbsolutePaths(profile: IV8Profile, replace: string = 'noAbsolutePaths') {\n\t\tfor (const node of profile.nodes) {\n\t\t\tif (node.callFrame && node.callFrame.url) {\n\t\t\t\tif (isAbsolute(node.callFrame.url) || /^\\w[\\w\\d+.-]*:\\/\\/\\/?/.test(node.callFrame.url)) {\n\t\t\t\t\tnode.callFrame.url = join(replace, basename(node.callFrame.url));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn profile;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IV8Profile, IV8ProfileNode } from 'vs/platform/profiling/common/profiling';\n\n// #region\n// https://github.com/microsoft/vscode-js-profile-visualizer/blob/6e7401128ee860be113a916f80fcfe20ac99418e/packages/vscode-js-profile-core/src/cpu/model.ts#L4\n\nexport interface IProfileModel {\n\tnodes: ReadonlyArray<IComputedNode>;\n\tlocations: ReadonlyArray<ILocation>;\n\tsamples: ReadonlyArray<number>;\n\ttimeDeltas: ReadonlyArray<number>;\n\trootPath?: string;\n\tduration: number;\n}\n\nexport interface IComputedNode {\n\tid: number;\n\tselfTime: number;\n\taggregateTime: number;\n\tchildren: number[];\n\tparent?: number;\n\tlocationId: number;\n}\n\nexport interface ISourceLocation {\n\tlineNumber: number;\n\tcolumnNumber: number;\n\t//   source: Dap.Source;\n\trelativePath?: string;\n}\n\nexport interface CdpCallFrame {\n\tfunctionName: string;\n\tscriptId: string;\n\turl: string;\n\tlineNumber: number;\n\tcolumnNumber: number;\n}\n\nexport interface CdpPositionTickInfo {\n\tline: number;\n\tticks: number;\n}\n\nexport interface INode {\n\tid: number;\n\t//   category: Category;\n\tcallFrame: CdpCallFrame;\n\tsrc?: ISourceLocation;\n}\n\nexport interface ILocation extends INode {\n\tselfTime: number;\n\taggregateTime: number;\n\tticks: number;\n}\n\nexport interface IAnnotationLocation {\n\tcallFrame: CdpCallFrame;\n\tlocations: ISourceLocation[];\n}\n\nexport interface IProfileNode extends IV8ProfileNode {\n\tlocationId?: number;\n\tpositionTicks?: (CdpPositionTickInfo & {\n\t\tstartLocationId?: number;\n\t\tendLocationId?: number;\n\t})[];\n}\n\nexport interface ICpuProfileRaw extends IV8Profile {\n\t//   $vscode?: IJsDebugAnnotations;\n\tnodes: IProfileNode[];\n}\n\n\n/**\n * Recursive function that computes and caches the aggregate time for the\n * children of the computed now.\n */\nconst computeAggregateTime = (index: number, nodes: IComputedNode[]): number => {\n\tconst row = nodes[index];\n\tif (row.aggregateTime) {\n\t\treturn row.aggregateTime;\n\t}\n\n\tlet total = row.selfTime;\n\tfor (const child of row.children) {\n\t\ttotal += computeAggregateTime(child, nodes);\n\t}\n\n\treturn (row.aggregateTime = total);\n};\n\nconst ensureSourceLocations = (profile: ICpuProfileRaw): ReadonlyArray<IAnnotationLocation> => {\n\n\tlet locationIdCounter = 0;\n\tconst locationsByRef = new Map<string, { id: number; callFrame: CdpCallFrame; location: ISourceLocation }>();\n\n\tconst getLocationIdFor = (callFrame: CdpCallFrame) => {\n\t\tconst ref = [\n\t\t\tcallFrame.functionName,\n\t\t\tcallFrame.url,\n\t\t\tcallFrame.scriptId,\n\t\t\tcallFrame.lineNumber,\n\t\t\tcallFrame.columnNumber,\n\t\t].join(':');\n\n\t\tconst existing = locationsByRef.get(ref);\n\t\tif (existing) {\n\t\t\treturn existing.id;\n\t\t}\n\t\tconst id = locationIdCounter++;\n\t\tlocationsByRef.set(ref, {\n\t\t\tid,\n\t\t\tcallFrame,\n\t\t\tlocation: {\n\t\t\t\tlineNumber: callFrame.lineNumber + 1,\n\t\t\t\tcolumnNumber: callFrame.columnNumber + 1,\n\t\t\t\t// source: {\n\t\t\t\t// \tname: maybeFileUrlToPath(callFrame.url),\n\t\t\t\t// \tpath: maybeFileUrlToPath(callFrame.url),\n\t\t\t\t// \tsourceReference: 0,\n\t\t\t\t// },\n\t\t\t},\n\t\t});\n\n\t\treturn id;\n\t};\n\n\tfor (const node of profile.nodes) {\n\t\tnode.locationId = getLocationIdFor(node.callFrame);\n\t\tnode.positionTicks = node.positionTicks?.map(tick => ({\n\t\t\t...tick,\n\t\t\t// weirdly, line numbers here are 1-based, not 0-based. The position tick\n\t\t\t// only gives line-level granularity, so 'mark' the entire range of source\n\t\t\t// code the tick refers to\n\t\t\tstartLocationId: getLocationIdFor({\n\t\t\t\t...node.callFrame,\n\t\t\t\tlineNumber: tick.line - 1,\n\t\t\t\tcolumnNumber: 0,\n\t\t\t}),\n\t\t\tendLocationId: getLocationIdFor({\n\t\t\t\t...node.callFrame,\n\t\t\t\tlineNumber: tick.line,\n\t\t\t\tcolumnNumber: 0,\n\t\t\t}),\n\t\t}));\n\t}\n\n\treturn [...locationsByRef.values()]\n\t\t.sort((a, b) => a.id - b.id)\n\t\t.map(l => ({ locations: [l.location], callFrame: l.callFrame }));\n};\n\n/**\n * Computes the model for the given profile.\n */\nexport const buildModel = (profile: ICpuProfileRaw): IProfileModel => {\n\tif (!profile.timeDeltas || !profile.samples) {\n\t\treturn {\n\t\t\tnodes: [],\n\t\t\tlocations: [],\n\t\t\tsamples: profile.samples || [],\n\t\t\ttimeDeltas: profile.timeDeltas || [],\n\t\t\t// rootPath: profile.$vscode?.rootPath,\n\t\t\tduration: profile.endTime - profile.startTime,\n\t\t};\n\t}\n\n\tconst { samples, timeDeltas } = profile;\n\tconst sourceLocations = ensureSourceLocations(profile);\n\tconst locations: ILocation[] = sourceLocations.map((l, id) => {\n\t\tconst src = l.locations[0]; //getBestLocation(profile, l.locations);\n\n\t\treturn {\n\t\t\tid,\n\t\t\tselfTime: 0,\n\t\t\taggregateTime: 0,\n\t\t\tticks: 0,\n\t\t\t// category: categorize(l.callFrame, src),\n\t\t\tcallFrame: l.callFrame,\n\t\t\tsrc,\n\t\t};\n\t});\n\n\tconst idMap = new Map<number /* id in profile */, number /* incrementing ID */>();\n\tconst mapId = (nodeId: number) => {\n\t\tlet id = idMap.get(nodeId);\n\t\tif (id === undefined) {\n\t\t\tid = idMap.size;\n\t\t\tidMap.set(nodeId, id);\n\t\t}\n\n\t\treturn id;\n\t};\n\n\t// 1. Created a sorted list of nodes. It seems that the profile always has\n\t// incrementing IDs, although they are just not initially sorted.\n\tconst nodes = new Array<IComputedNode>(profile.nodes.length);\n\tfor (let i = 0; i < profile.nodes.length; i++) {\n\t\tconst node = profile.nodes[i];\n\n\t\t// make them 0-based:\n\t\tconst id = mapId(node.id);\n\t\tnodes[id] = {\n\t\t\tid,\n\t\t\tselfTime: 0,\n\t\t\taggregateTime: 0,\n\t\t\tlocationId: node.locationId as number,\n\t\t\tchildren: node.children?.map(mapId) || [],\n\t\t};\n\n\t\tfor (const child of node.positionTicks || []) {\n\t\t\tif (child.startLocationId) {\n\t\t\t\tlocations[child.startLocationId].ticks += child.ticks;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const node of nodes) {\n\t\tfor (const child of node.children) {\n\t\t\tnodes[child].parent = node.id;\n\t\t}\n\t}\n\n\t// 2. The profile samples are the 'bottom-most' node, the currently running\n\t// code. Sum of these in the self time.\n\tconst duration = profile.endTime - profile.startTime;\n\tlet lastNodeTime = duration - timeDeltas[0];\n\tfor (let i = 0; i < timeDeltas.length - 1; i++) {\n\t\tconst d = timeDeltas[i + 1];\n\t\tnodes[mapId(samples[i])].selfTime += d;\n\t\tlastNodeTime -= d;\n\t}\n\n\t// Add in an extra time delta for the last sample. `timeDeltas[0]` is the\n\t// time before the first sample, and the time of the last sample is only\n\t// derived (approximately) by the missing time in the sum of deltas. Save\n\t// some work by calculating it here.\n\tif (nodes.length) {\n\t\tnodes[mapId(samples[timeDeltas.length - 1])].selfTime += lastNodeTime;\n\t\ttimeDeltas.push(lastNodeTime);\n\t}\n\n\t// 3. Add the aggregate times for all node children and locations\n\tfor (let i = 0; i < nodes.length; i++) {\n\t\tconst node = nodes[i];\n\t\tconst location = locations[node.locationId];\n\t\tlocation.aggregateTime += computeAggregateTime(i, nodes);\n\t\tlocation.selfTime += node.selfTime;\n\t}\n\n\treturn {\n\t\tnodes,\n\t\tlocations,\n\t\tsamples: samples.map(mapId),\n\t\ttimeDeltas,\n\t\t// rootPath: profile.$vscode?.rootPath,\n\t\tduration,\n\t};\n};\n\nexport class BottomUpNode {\n\tpublic static root() {\n\t\treturn new BottomUpNode({\n\t\t\tid: -1,\n\t\t\tselfTime: 0,\n\t\t\taggregateTime: 0,\n\t\t\tticks: 0,\n\t\t\tcallFrame: {\n\t\t\t\tfunctionName: '(root)',\n\t\t\t\tlineNumber: -1,\n\t\t\t\tcolumnNumber: -1,\n\t\t\t\tscriptId: '0',\n\t\t\t\turl: '',\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic children: { [id: number]: BottomUpNode } = {};\n\tpublic aggregateTime = 0;\n\tpublic selfTime = 0;\n\tpublic ticks = 0;\n\tpublic childrenSize = 0;\n\n\tpublic get id() {\n\t\treturn this.location.id;\n\t}\n\n\tpublic get callFrame() {\n\t\treturn this.location.callFrame;\n\t}\n\n\tpublic get src() {\n\t\treturn this.location.src;\n\t}\n\n\tconstructor(public readonly location: ILocation, public readonly parent?: BottomUpNode) { }\n\n\tpublic addNode(node: IComputedNode) {\n\t\tthis.selfTime += node.selfTime;\n\t\tthis.aggregateTime += node.aggregateTime;\n\t}\n\n}\n\nexport const processNode = (aggregate: BottomUpNode, node: IComputedNode, model: IProfileModel, initialNode = node) => {\n\tlet child = aggregate.children[node.locationId];\n\tif (!child) {\n\t\tchild = new BottomUpNode(model.locations[node.locationId], aggregate);\n\t\taggregate.childrenSize++;\n\t\taggregate.children[node.locationId] = child;\n\t}\n\n\tchild.addNode(initialNode);\n\n\tif (node.parent) {\n\t\tprocessNode(child, model.nodes[node.parent], model, initialNode);\n\t}\n};\n\n//#endregion\n\n\nexport interface BottomUpSample {\n\tselfTime: number;\n\ttotalTime: number;\n\tlocation: string;\n\tabsLocation: string;\n\turl: string;\n\tcaller: { percentage: number; absLocation: string; location: string }[];\n\tpercentage: number;\n\tisSpecial: boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { basename } from 'vs/base/common/path';\nimport { TernarySearchTree } from 'vs/base/common/ternarySearchTree';\nimport { URI } from 'vs/base/common/uri';\nimport { IRequestHandler } from 'vs/base/common/worker/simpleWorker';\nimport { IV8Profile, Utils } from 'vs/platform/profiling/common/profiling';\nimport { IProfileModel, BottomUpSample, buildModel, BottomUpNode, processNode, CdpCallFrame } from 'vs/platform/profiling/common/profilingModel';\nimport { BottomUpAnalysis, IProfileAnalysisWorker, ProfilingOutput } from 'vs/platform/profiling/electron-sandbox/profileAnalysisWorkerService';\n\nexport function create(): IRequestHandler {\n\treturn new ProfileAnalysisWorker();\n}\n\nclass ProfileAnalysisWorker implements IRequestHandler, IProfileAnalysisWorker {\n\n\t_requestHandlerBrand: any;\n\n\tanalyseBottomUp(profile: IV8Profile): BottomUpAnalysis {\n\t\tif (!Utils.isValidProfile(profile)) {\n\t\t\treturn { kind: ProfilingOutput.Irrelevant, samples: [] };\n\t\t}\n\n\t\tconst model = buildModel(profile);\n\t\tconst samples = bottomUp(model, 5)\n\t\t\t.filter(s => !s.isSpecial);\n\n\t\tif (samples.length === 0 || samples[0].percentage < 10) {\n\t\t\t// ignore this profile because 90% of the time is spent inside \"special\" frames\n\t\t\t// like idle, GC, or program\n\t\t\treturn { kind: ProfilingOutput.Irrelevant, samples: [] };\n\t\t}\n\n\t\treturn { kind: ProfilingOutput.Interesting, samples };\n\t}\n\n\tanalyseByUrlCategory(profile: IV8Profile, categories: [url: URI, category: string][]): [category: string, aggregated: number][] {\n\n\t\t// build search tree\n\t\tconst searchTree = TernarySearchTree.forUris<string>();\n\t\tsearchTree.fill(categories);\n\n\t\t// cost by categories\n\t\tconst model = buildModel(profile);\n\t\tconst aggegrateByCategory = new Map<string, number>();\n\n\t\tfor (const node of model.nodes) {\n\t\t\tconst loc = model.locations[node.locationId];\n\t\t\tlet category: string | undefined;\n\t\t\ttry {\n\t\t\t\tcategory = searchTree.findSubstr(URI.parse(loc.callFrame.url));\n\t\t\t} catch {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\tif (!category) {\n\t\t\t\tcategory = printCallFrameShort(loc.callFrame);\n\t\t\t}\n\t\t\tconst value = aggegrateByCategory.get(category) ?? 0;\n\t\t\tconst newValue = value + node.selfTime;\n\t\t\taggegrateByCategory.set(category, newValue);\n\t\t}\n\n\t\tconst result: [string, number][] = [];\n\t\tfor (const [key, value] of aggegrateByCategory) {\n\t\t\tresult.push([key, value]);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction isSpecial(call: CdpCallFrame): boolean {\n\treturn call.functionName.startsWith('(') && call.functionName.endsWith(')');\n}\n\nfunction printCallFrameShort(frame: CdpCallFrame): string {\n\tlet result = frame.functionName || '(anonymous)';\n\tif (frame.url) {\n\t\tresult += '#';\n\t\tresult += basename(frame.url);\n\t\tif (frame.lineNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.lineNumber + 1;\n\t\t}\n\t\tif (frame.columnNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.columnNumber + 1;\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction printCallFrameStackLike(frame: CdpCallFrame): string {\n\tlet result = frame.functionName || '(anonymous)';\n\tif (frame.url) {\n\t\tresult += ' (';\n\t\tresult += frame.url;\n\t\tif (frame.lineNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.lineNumber + 1;\n\t\t}\n\t\tif (frame.columnNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.columnNumber + 1;\n\t\t}\n\t\tresult += ')';\n\t}\n\treturn result;\n}\n\nfunction getHeaviestLocationIds(model: IProfileModel, topN: number) {\n\tconst stackSelfTime: { [locationId: number]: number } = {};\n\tfor (const node of model.nodes) {\n\t\tstackSelfTime[node.locationId] = (stackSelfTime[node.locationId] || 0) + node.selfTime;\n\t}\n\n\tconst locationIds = Object.entries(stackSelfTime)\n\t\t.sort(([, a], [, b]) => b - a)\n\t\t.slice(0, topN)\n\t\t.map(([locationId]) => Number(locationId));\n\n\treturn new Set(locationIds);\n}\n\nfunction bottomUp(model: IProfileModel, topN: number) {\n\tconst root = BottomUpNode.root();\n\tconst locationIds = getHeaviestLocationIds(model, topN);\n\n\tfor (const node of model.nodes) {\n\t\tif (locationIds.has(node.locationId)) {\n\t\t\tprocessNode(root, node, model);\n\t\t\troot.addNode(node);\n\t\t}\n\t}\n\n\tconst result = Object.values(root.children)\n\t\t.sort((a, b) => b.selfTime - a.selfTime)\n\t\t.slice(0, topN);\n\n\tconst samples: BottomUpSample[] = [];\n\n\tfor (const node of result) {\n\n\t\tconst sample: BottomUpSample = {\n\t\t\tselfTime: Math.round(node.selfTime / 1000),\n\t\t\ttotalTime: Math.round(node.aggregateTime / 1000),\n\t\t\tlocation: printCallFrameShort(node.callFrame),\n\t\t\tabsLocation: printCallFrameStackLike(node.callFrame),\n\t\t\turl: node.callFrame.url,\n\t\t\tcaller: [],\n\t\t\tpercentage: Math.round(node.selfTime / (model.duration / 100)),\n\t\t\tisSpecial: isSpecial(node.callFrame)\n\t\t};\n\n\t\t// follow the heaviest caller paths\n\t\tconst stack = [node];\n\t\twhile (stack.length) {\n\t\t\tconst node = stack.pop()!;\n\t\t\tlet top: BottomUpNode | undefined;\n\t\t\tfor (const candidate of Object.values(node.children)) {\n\t\t\t\tif (!top || top.selfTime < candidate.selfTime) {\n\t\t\t\t\ttop = candidate;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (top) {\n\t\t\t\tconst percentage = Math.round(top.selfTime / (node.selfTime / 100));\n\t\t\t\tsample.caller.push({\n\t\t\t\t\tpercentage,\n\t\t\t\t\tlocation: printCallFrameShort(top.callFrame),\n\t\t\t\t\tabsLocation: printCallFrameStackLike(top.callFrame),\n\t\t\t\t});\n\t\t\t\tstack.push(top);\n\t\t\t}\n\t\t}\n\n\t\tsamples.push(sample);\n\t}\n\n\treturn samples;\n}\n"]}
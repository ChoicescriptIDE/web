{"version":3,"sources":["fake","file:///Users/carey/Documents/Work/Github/vscode/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts"],"names":[],"mappings":"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","file":"languageDetectionSimpleWorker.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { IRequestHandler } from 'vs/base/common/worker/simpleWorker';\nimport { EditorSimpleWorker } from 'vs/editor/common/services/editorSimpleWorker';\nimport { IEditorWorkerHost } from 'vs/editor/common/services/editorWorkerHost';\n\ntype RegexpModel = { detect: (inp: string, langBiases: Record<string, number>, supportedLangs?: string[]) => string | undefined };\n\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host: IEditorWorkerHost): IRequestHandler {\n\treturn new LanguageDetectionSimpleWorker(host, null);\n}\n\n/**\n * @internal\n */\nexport class LanguageDetectionSimpleWorker extends EditorSimpleWorker {\n\tprivate static readonly expectedRelativeConfidence = 0.2;\n\tprivate static readonly positiveConfidenceCorrectionBucket1 = 0.05;\n\tprivate static readonly positiveConfidenceCorrectionBucket2 = 0.025;\n\tprivate static readonly negativeConfidenceCorrection = 0.5;\n\n\tprivate _regexpModel: RegexpModel | undefined;\n\tprivate _regexpLoadFailed: boolean = false;\n\n\tprivate _modelOperations: ModelOperations | undefined;\n\tprivate _loadFailed: boolean = false;\n\n\tprivate modelIdToCoreId = new Map<string, string>();\n\n\tpublic async detectLanguage(uri: string, langBiases: Record<string, number> | undefined, preferHistory: boolean, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst languages: string[] = [];\n\t\tconst confidences: number[] = [];\n\t\tconst stopWatch = new StopWatch();\n\t\tconst documentTextSample = this.getTextForDetection(uri);\n\t\tif (!documentTextSample) { return; }\n\n\t\tconst neuralResolver = async () => {\n\t\t\tfor await (const language of this.detectLanguagesImpl(documentTextSample)) {\n\t\t\t\tif (!this.modelIdToCoreId.has(language.languageId)) {\n\t\t\t\t\tthis.modelIdToCoreId.set(language.languageId, await this._host.fhr('getLanguageId', [language.languageId]));\n\t\t\t\t}\n\t\t\t\tconst coreId = this.modelIdToCoreId.get(language.languageId);\n\t\t\t\tif (coreId && (!supportedLangs?.length || supportedLangs.includes(coreId))) {\n\t\t\t\t\tlanguages.push(coreId);\n\t\t\t\t\tconfidences.push(language.confidence);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstopWatch.stop();\n\n\t\t\tif (languages.length) {\n\t\t\t\tthis._host.fhr('sendTelemetryEvent', [languages, confidences, stopWatch.elapsed()]);\n\t\t\t\treturn languages[0];\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst historicalResolver = async () => this.runRegexpModel(documentTextSample, langBiases ?? {}, supportedLangs);\n\n\t\tif (preferHistory) {\n\t\t\tconst history = await historicalResolver();\n\t\t\tif (history) { return history; }\n\t\t\tconst neural = await neuralResolver();\n\t\t\tif (neural) { return neural; }\n\t\t} else {\n\t\t\tconst neural = await neuralResolver();\n\t\t\tif (neural) { return neural; }\n\t\t\tconst history = await historicalResolver();\n\t\t\tif (history) { return history; }\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getTextForDetection(uri: string): string | undefined {\n\t\tconst editorModel = this._getModel(uri);\n\t\tif (!editorModel) { return; }\n\n\t\tconst end = editorModel.positionAt(10000);\n\t\tconst content = editorModel.getValueInRange({\n\t\t\tstartColumn: 1,\n\t\t\tstartLineNumber: 1,\n\t\t\tendColumn: end.column,\n\t\t\tendLineNumber: end.lineNumber\n\t\t});\n\t\treturn content;\n\t}\n\n\tprivate async getRegexpModel(): Promise<RegexpModel | undefined> {\n\t\tif (this._regexpLoadFailed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._regexpModel) {\n\t\t\treturn this._regexpModel;\n\t\t}\n\t\tconst uri: string = await this._host.fhr('getRegexpModelUri', []);\n\t\ttry {\n\t\t\tthis._regexpModel = await import(uri) as RegexpModel;\n\t\t\treturn this._regexpModel;\n\t\t} catch (e) {\n\t\t\tthis._regexpLoadFailed = true;\n\t\t\t// console.warn('error loading language detection model', e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate async runRegexpModel(content: string, langBiases: Record<string, number>, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst regexpModel = await this.getRegexpModel();\n\t\tif (!regexpModel) { return; }\n\n\t\tif (supportedLangs?.length) {\n\t\t\t// When using supportedLangs, normally computed biases are too extreme. Just use a \"bitmask\" of sorts.\n\t\t\tfor (const lang of Object.keys(langBiases)) {\n\t\t\t\tif (supportedLangs.includes(lang)) {\n\t\t\t\t\tlangBiases[lang] = 1;\n\t\t\t\t} else {\n\t\t\t\t\tlangBiases[lang] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst detected = regexpModel.detect(content, langBiases, supportedLangs);\n\t\treturn detected;\n\t}\n\n\tprivate async getModelOperations(): Promise<ModelOperations> {\n\t\tif (this._modelOperations) {\n\t\t\treturn this._modelOperations;\n\t\t}\n\n\t\tconst uri: string = await this._host.fhr('getIndexJsUri', []);\n\t\tconst { ModelOperations } = await import(uri) as typeof import('@vscode/vscode-languagedetection');\n\t\tthis._modelOperations = new ModelOperations({\n\t\t\tmodelJsonLoaderFunc: async () => {\n\t\t\t\tconst response = await fetch(await this._host.fhr('getModelJsonUri', []));\n\t\t\t\ttry {\n\t\t\t\t\tconst modelJSON = await response.json();\n\t\t\t\t\treturn modelJSON;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst message = `Failed to parse model JSON.`;\n\t\t\t\t\tthrow new Error(message);\n\t\t\t\t}\n\t\t\t},\n\t\t\tweightsLoaderFunc: async () => {\n\t\t\t\tconst response = await fetch(await this._host.fhr('getWeightsUri', []));\n\t\t\t\tconst buffer = await response.arrayBuffer();\n\t\t\t\treturn buffer;\n\t\t\t}\n\t\t});\n\n\t\treturn this._modelOperations!;\n\t}\n\n\t// This adjusts the language confidence scores to be more accurate based on:\n\t// * VS Code's language usage\n\t// * Languages with 'problematic' syntaxes that have caused incorrect language detection\n\tprivate adjustLanguageConfidence(modelResult: ModelResult): ModelResult {\n\t\tswitch (modelResult.languageId) {\n\t\t\t// For the following languages, we increase the confidence because\n\t\t\t// these are commonly used languages in VS Code and supported\n\t\t\t// by the model.\n\t\t\tcase 'js':\n\t\t\tcase 'html':\n\t\t\tcase 'json':\n\t\t\tcase 'ts':\n\t\t\tcase 'css':\n\t\t\tcase 'py':\n\t\t\tcase 'xml':\n\t\t\tcase 'php':\n\t\t\t\tmodelResult.confidence += LanguageDetectionSimpleWorker.positiveConfidenceCorrectionBucket1;\n\t\t\t\tbreak;\n\t\t\t// case 'yaml': // YAML has been know to cause incorrect language detection because the language is pretty simple. We don't want to increase the confidence for this.\n\t\t\tcase 'cpp':\n\t\t\tcase 'sh':\n\t\t\tcase 'java':\n\t\t\tcase 'cs':\n\t\t\tcase 'c':\n\t\t\t\tmodelResult.confidence += LanguageDetectionSimpleWorker.positiveConfidenceCorrectionBucket2;\n\t\t\t\tbreak;\n\n\t\t\t// For the following languages, we need to be extra confident that the language is correct because\n\t\t\t// we've had issues like #131912 that caused incorrect guesses. To enforce this, we subtract the\n\t\t\t// negativeConfidenceCorrection from the confidence.\n\n\t\t\t// languages that are provided by default in VS Code\n\t\t\tcase 'bat':\n\t\t\tcase 'ini':\n\t\t\tcase 'makefile':\n\t\t\tcase 'sql':\n\t\t\t// languages that aren't provided by default in VS Code\n\t\t\tcase 'csv':\n\t\t\tcase 'toml':\n\t\t\t\t// Other considerations for negativeConfidenceCorrection that\n\t\t\t\t// aren't built in but suported by the model include:\n\t\t\t\t// * Assembly, TeX - These languages didn't have clear language modes in the community\n\t\t\t\t// * Markdown, Dockerfile - These languages are simple but they embed other languages\n\t\t\t\tmodelResult.confidence -= LanguageDetectionSimpleWorker.negativeConfidenceCorrection;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\n\t\t}\n\t\treturn modelResult;\n\t}\n\n\tprivate async * detectLanguagesImpl(content: string): AsyncGenerator<ModelResult, void, unknown> {\n\t\tif (this._loadFailed) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet modelOperations: ModelOperations | undefined;\n\t\ttry {\n\t\t\tmodelOperations = await this.getModelOperations();\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthis._loadFailed = true;\n\t\t\treturn;\n\t\t}\n\n\t\tlet modelResults: ModelResult[] | undefined;\n\n\t\ttry {\n\t\t\tmodelResults = await modelOperations.runModel(content);\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\n\t\tif (!modelResults\n\t\t\t|| modelResults.length === 0\n\t\t\t|| modelResults[0].confidence < LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstModelResult = this.adjustLanguageConfidence(modelResults[0]);\n\t\tif (firstModelResult.confidence < LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst possibleLanguages: ModelResult[] = [firstModelResult];\n\n\t\tfor (let current of modelResults) {\n\t\t\tif (current === firstModelResult) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurrent = this.adjustLanguageConfidence(current);\n\t\t\tconst currentHighest = possibleLanguages[possibleLanguages.length - 1];\n\n\t\t\tif (currentHighest.confidence - current.confidence >= LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\twhile (possibleLanguages.length) {\n\t\t\t\t\tyield possibleLanguages.shift()!;\n\t\t\t\t}\n\t\t\t\tif (current.confidence > LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\t\tpossibleLanguages.push(current);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif (current.confidence > LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\t\tpossibleLanguages.push(current);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
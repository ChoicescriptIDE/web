{"version":3,"file":"xterm-addon-webgl.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAoB,WAAID,IAExBD,EAAiB,WAAIC,GACtB,CATD,CASGK,MAAM,I,gHCJT,eAEA,SAGA,SACA,SACA,SAoEMC,EAAmB,GACnBC,EAAiBD,EAAmBE,aAAaC,kBAIvD,IACIC,EADAC,EAAK,EAELC,EAAmB,EACnBC,EAAiB,EAErB,MAAaC,UAAsB,EAAAC,WAoBjC,WAAAC,CACmBC,EACAC,EACTC,GAERC,QAJiB,KAAAH,UAAAA,EACA,KAAAC,IAAAA,EACT,KAAAC,YAAAA,EAbF,KAAAE,cAAwB,EACf,KAAAC,UAAuB,CACtCC,MAAO,EACPC,WAAY,IAAIhB,aAAa,GAC7BiB,kBAAmB,CACjB,IAAIjB,aAAa,GACjB,IAAIA,aAAa,KAWnB,MAAMkB,EAAKC,KAAKT,SAEmBU,IAA/B,EAAAC,aAAaC,gBAEf,EAAAD,aAAaC,cAAgBC,KAAKC,IAAI,IAAI,IAAAC,cAAaP,EAAGQ,aAAaR,EAAGS,2BAE1E,EAAAN,aAAaO,gBAAiB,IAAAH,cAAaP,EAAGQ,aAAaR,EAAGW,oBAGhEV,KAAKW,UAAW,IAAAL,eAAa,IAAAM,eAAcb,EA1FpB,wpBAsB3B,SAAoCc,GAClC,IAAIC,EAAsB,GAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAA+BE,IACjDD,GAAuB,0BAA0BC,qCAAqCA,qBAExF,MAAO,wHAMqBF,+HAOxBC,MAEN,CAgDuEE,CAA2B,EAAAd,aAAaC,iBAC3GH,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAGoB,cAAcnB,KAAKW,aAGvDX,KAAKoB,qBAAsB,IAAAd,cAAaP,EAAGsB,mBAAmBrB,KAAKW,SAAU,iBAC7EX,KAAKsB,qBAAsB,IAAAhB,cAAaP,EAAGsB,mBAAmBrB,KAAKW,SAAU,iBAC7EX,KAAKuB,kBAAmB,IAAAjB,cAAaP,EAAGsB,mBAAmBrB,KAAKW,SAAU,cAG1EX,KAAKwB,mBAAqBzB,EAAG0B,oBAC7B1B,EAAG2B,gBAAgB1B,KAAKwB,oBAGxB,MAAMG,EAAmB,IAAI9C,aAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC1D+C,EAAyB7B,EAAG8B,eAClC7B,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAG+B,aAAaF,MACjD7B,EAAGgC,WAAWhC,EAAGiC,aAAcJ,GAC/B7B,EAAGkC,WAAWlC,EAAGiC,aAAcL,EAAkB5B,EAAGmC,aACpDnC,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAAiC,EAAGpC,KAAKT,IAAI8C,OAAO,EAAO,EAAG,GAKrF,MAAMC,EAAyB,IAAIC,WAAW,CAAC,EAAG,EAAG,EAAG,IAClDC,EAAuBzC,EAAG8B,eAChC7B,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAG+B,aAAaU,MACjDzC,EAAGgC,WAAWhC,EAAG0C,qBAAsBD,GACvCzC,EAAGkC,WAAWlC,EAAG0C,qBAAsBH,EAAwBvC,EAAGmC,aAGlElC,KAAK0C,mBAAoB,IAAApC,cAAaP,EAAG8B,gBACzC7B,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAG+B,aAAa9B,KAAK0C,sBACtD3C,EAAGgC,WAAWhC,EAAGiC,aAAchC,KAAK0C,mBACpC3C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAA8B,EAAGrC,EAAGsC,OAAO,EAAOzD,EAAgB,GACzFmB,EAAG4C,oBAAoB,EAA8B,GACrD5C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAA4B,EAAGrC,EAAGsC,OAAO,EAAOzD,EAAgB,EAAIC,aAAaC,mBACxGiB,EAAG4C,oBAAoB,EAA4B,GACnD5C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAA+B,EAAGrC,EAAGsC,OAAO,EAAOzD,EAAgB,EAAIC,aAAaC,mBAC3GiB,EAAG4C,oBAAoB,EAA+B,GACtD5C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAAgC,EAAGrC,EAAGsC,OAAO,EAAOzD,EAAgB,EAAIC,aAAaC,mBAC5GiB,EAAG4C,oBAAoB,EAAgC,GACvD5C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAA+B,EAAGrC,EAAGsC,OAAO,EAAOzD,EAAgB,EAAIC,aAAaC,mBAC3GiB,EAAG4C,oBAAoB,EAA+B,GACtD5C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAAqC,EAAGrC,EAAGsC,OAAO,EAAOzD,EAAgB,EAAIC,aAAaC,mBACjHiB,EAAG4C,oBAAoB,EAAqC,GAG5D5C,EAAG6C,WAAW5C,KAAKW,UACnB,MAAMkC,EAAe,IAAIC,WAAW,EAAA5C,aAAaC,eACjD,IAAK,IAAIY,EAAI,EAAGA,EAAI,EAAAb,aAAaC,cAAeY,IAC9C8B,EAAa9B,GAAKA,EAEpBhB,EAAGgD,WAAW/C,KAAKuB,iBAAkBsB,GACrC9C,EAAGiD,iBAAiBhD,KAAKoB,qBAAqB,EAAO,EAAA6B,mBAIrDjD,KAAKkD,eAAiB,GACtB,IAAK,IAAInC,EAAI,EAAGA,EAAI,EAAAb,aAAaC,cAAeY,IAAK,CACnD,MAAMoC,EAAY,IAAI,EAAAC,WAAU,IAAA9C,cAAaP,EAAGsD,kBAChDrD,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAGuD,cAAcH,EAAUI,YAC5DxD,EAAGyD,cAAczD,EAAG0D,SAAW1C,GAC/BhB,EAAG2D,YAAY3D,EAAG4D,WAAYR,EAAUI,SACxCxD,EAAG6D,cAAc7D,EAAG4D,WAAY5D,EAAG8D,eAAgB9D,EAAG+D,eACtD/D,EAAG6D,cAAc7D,EAAG4D,WAAY5D,EAAGgE,eAAgBhE,EAAG+D,eACtD/D,EAAGiE,WAAWjE,EAAG4D,WAAY,EAAG5D,EAAGkE,KAAM,EAAG,EAAG,EAAGlE,EAAGkE,KAAMlE,EAAGmE,cAAe,IAAI3B,WAAW,CAAC,IAAK,EAAG,EAAG,OACxGvC,KAAKkD,eAAenC,GAAKoC,C,CAI3BpD,EAAGoE,OAAOpE,EAAGqE,OACbrE,EAAGsE,UAAUtE,EAAGuE,UAAWvE,EAAGwE,qBAG9BvE,KAAKwE,cACP,CAEO,UAAAC,GACL,OAAOzE,KAAK0E,QAAS1E,KAAK0E,OAAOD,YACnC,CAEO,UAAAE,CAAWC,EAAWC,EAAWC,EAAcC,EAAYC,EAAYC,EAAaC,EAAeC,GAKxGnF,KAAKoF,YAAYpF,KAAKL,UAAUE,WAAY+E,EAAGC,EAAGC,EAAMC,EAAIC,EAAIC,EAAKC,EAAOC,EAC9E,CAEQ,WAAAC,CAAYC,EAAqBT,EAAWC,EAAWC,EAA0BC,EAAYC,EAAYC,EAAaC,EAAeC,GAC3InG,GAAM6F,EAAI7E,KAAKV,UAAUgG,KAAOV,GAAKjG,EAIjCmG,IAAS,EAAAS,qBAA2BtF,IAAT6E,EAK1B9E,KAAK0E,SAMR3F,EADEmG,GAASA,EAAMM,OAAS,EACjBxF,KAAK0E,OAAOe,+BAA+BP,EAAOH,EAAIC,EAAIC,GAAK,GAE/DjF,KAAK0E,OAAOgB,mBAAmBZ,EAAMC,EAAIC,EAAIC,GAAK,GAG7DhG,EAAmBmB,KAAKuF,OAAO3F,KAAKR,YAAYoG,OAAOC,KAAKC,MAAQ9F,KAAKR,YAAYoG,OAAOG,KAAKD,OAAS,GACtGf,IAAOI,GAAUpG,EAAOiH,OAAOpB,EAAI3F,GACrCC,EAAiBH,EAAOiH,OAAOpB,EAAI3F,EAEnCoG,EAAMrG,KAAYD,EAAOiH,OAAOpB,EAAI1F,GAAkBc,KAAKR,YAAYoG,OAAOG,KAAKE,KACnFZ,EAAMrG,EAAK,IAAMD,EAAOiH,OAAOnB,EAAI7E,KAAKR,YAAYoG,OAAOG,KAAKG,IAEhEb,EAAMrG,EAAK,IAAMD,EAAOoH,KAAKvB,EAAI1F,GAAkBc,KAAKR,YAAYoG,OAAOQ,OAAON,MAClFT,EAAMrG,EAAK,GAAKD,EAAOoH,KAAKtB,EAAI7E,KAAKR,YAAYoG,OAAOQ,OAAOC,OAE/DhB,EAAMrG,EAAK,GAAKD,EAAOuH,YAEvBjB,EAAMrG,EAAK,GAAKD,EAAOwH,yBAAyB3B,EAAI1F,EAAiBc,KAAK0E,OAAO8B,MAAMzH,EAAOuH,aAAaF,OAAON,MAClHT,EAAMrG,EAAK,GAAKD,EAAOwH,yBAAyB1B,EAEhDQ,EAAMrG,EAAK,GAAKD,EAAO0H,cAAc7B,EAAI1F,EAAiBc,KAAK0E,OAAO8B,MAAMzH,EAAOuH,aAAaF,OAAON,MACvGT,EAAMrG,EAAK,GAAKD,EAAO0H,cAAc5B,IAGrCQ,EAAMrG,IAAWD,EAAOiH,OAAOpB,EAAI5E,KAAKR,YAAYoG,OAAOG,KAAKE,KAChEZ,EAAMrG,EAAK,IAAMD,EAAOiH,OAAOnB,EAAI7E,KAAKR,YAAYoG,OAAOG,KAAKG,IAEhEb,EAAMrG,EAAK,GAAKD,EAAOoH,KAAKvB,EAAI5E,KAAKR,YAAYoG,OAAOQ,OAAON,MAC/DT,EAAMrG,EAAK,GAAKD,EAAOoH,KAAKtB,EAAI7E,KAAKR,YAAYoG,OAAOQ,OAAOC,OAE/DhB,EAAMrG,EAAK,GAAKD,EAAOuH,YAEvBjB,EAAMrG,EAAK,GAAKD,EAAOwH,yBAAyB3B,EAChDS,EAAMrG,EAAK,GAAKD,EAAOwH,yBAAyB1B,EAEhDQ,EAAMrG,EAAK,GAAKD,EAAO0H,cAAc7B,EACrCS,EAAMrG,EAAK,GAAKD,EAAO0H,cAAc5B,IA9CrCQ,EAAMqB,KAAK,EAAG1H,EAAIA,EAAKL,EAAmB,EAlJlB,EAmM5B,CAEO,KAAAgI,GACL,MAAMC,EAAW5G,KAAKV,UAChBuH,EAAWD,EAAStB,KAAOsB,EAASE,KAAOnI,EAG7CqB,KAAKL,UAAUC,QAAUiH,EAC3B7G,KAAKL,UAAUE,WAAa,IAAIhB,aAAagI,GAE7C7G,KAAKL,UAAUE,WAAW6G,KAAK,GAEjC,IAAI3F,EAAI,EACR,KAAOA,EAAIf,KAAKL,UAAUG,kBAAkB0F,OAAQzE,IAC9Cf,KAAKL,UAAUC,QAAUiH,EAC3B7G,KAAKL,UAAUG,kBAAkBiB,GAAK,IAAIlC,aAAagI,GAEvD7G,KAAKL,UAAUG,kBAAkBiB,GAAG2F,KAAK,GAG7C1G,KAAKL,UAAUC,MAAQiH,EACvB9F,EAAI,EACJ,IAAK,IAAI8D,EAAI,EAAGA,EAAI+B,EAASE,KAAMjC,IACjC,IAAK,IAAID,EAAI,EAAGA,EAAIgC,EAAStB,KAAMV,IACjC5E,KAAKL,UAAUE,WAAWkB,EAAI,GAAK6D,EAAIgC,EAAStB,KAChDtF,KAAKL,UAAUE,WAAWkB,EAAI,IAAM8D,EAAI+B,EAASE,KACjD/F,GAAKpC,CAGX,CAEO,YAAA6F,GACL,MAAMzE,EAAKC,KAAKT,IAChBQ,EAAG6C,WAAW5C,KAAKW,UACnBZ,EAAGgH,SAAS,EAAG,EAAGhH,EAAGqG,OAAON,MAAO/F,EAAGqG,OAAOC,QAC7CtG,EAAGiH,UAAUhH,KAAKsB,oBAAqBvB,EAAGqG,OAAON,MAAO/F,EAAGqG,OAAOC,QAClErG,KAAK2G,OACP,CAEO,MAAAM,CAAOC,GACZ,IAAKlH,KAAK0E,OACR,OAGF,MAAM3E,EAAKC,KAAKT,IAEhBQ,EAAG6C,WAAW5C,KAAKW,UACnBZ,EAAG2B,gBAAgB1B,KAAKwB,oBAGxBxB,KAAKN,eAAiBM,KAAKN,cAAgB,GAAK,EAChD,MAAMyH,EAAenH,KAAKL,UAAUG,kBAAkBE,KAAKN,eAS3D,IAAI0H,EAAe,EACnB,IAAK,IAAIvC,EAAI,EAAGA,EAAIqC,EAAYG,YAAY7B,OAAQX,IAAK,CACvD,MAAMyC,EAAKzC,EAAI7E,KAAKV,UAAUgG,KAAO3G,EAC/B4I,EAAMvH,KAAKL,UAAUE,WAAW2H,SAASF,EAAIA,EAAKJ,EAAYG,YAAYxC,GAAKlG,GACrFwI,EAAaM,IAAIF,EAAKH,GACtBA,GAAgBG,EAAI/B,M,CAItBzF,EAAGgC,WAAWhC,EAAGiC,aAAchC,KAAK0C,mBACpC3C,EAAGkC,WAAWlC,EAAGiC,aAAcmF,EAAaK,SAAS,EAAGJ,GAAerH,EAAG2H,aAG1E,IAAK,IAAI3G,EAAI,EAAGA,EAAIf,KAAK0E,OAAO8B,MAAMhB,OAAQzE,IACxCf,KAAK0E,OAAO8B,MAAMzF,GAAG4G,UAAY3H,KAAKkD,eAAenC,GAAG4G,SAC1D3H,KAAK4H,sBAAsB7H,EAAIC,KAAK0E,OAAQ3D,GAKhDhB,EAAG8H,sBAAsB9H,EAAG+H,eAAgB,EAAG/H,EAAGmE,cAAe,EAAGkD,EAAezI,EACrF,CAEO,QAAAoJ,CAASC,GACdhI,KAAK0E,OAASsD,EACd,IAAK,MAAM7E,KAAanD,KAAKkD,eAC3BC,EAAUwE,SAAW,CAEzB,CAEQ,qBAAAC,CAAsB7H,EAA6BiI,EAAsBjH,GAC/EhB,EAAGyD,cAAczD,EAAG0D,SAAW1C,GAC/BhB,EAAG2D,YAAY3D,EAAG4D,WAAY3D,KAAKkD,eAAenC,GAAGwC,SACrDxD,EAAG6D,cAAc7D,EAAG4D,WAAY5D,EAAG8D,eAAgB9D,EAAG+D,eACtD/D,EAAG6D,cAAc7D,EAAG4D,WAAY5D,EAAGgE,eAAgBhE,EAAG+D,eACtD/D,EAAGiE,WAAWjE,EAAG4D,WAAY,EAAG5D,EAAGkE,KAAMlE,EAAGkE,KAAMlE,EAAGmE,cAAe8D,EAAMxB,MAAMzF,GAAGqF,QACnFrG,EAAGkI,eAAelI,EAAG4D,YACrB3D,KAAKkD,eAAenC,GAAG4G,QAAUK,EAAMxB,MAAMzF,GAAG4G,OAClD,CAEO,aAAAO,CAAcC,GACnBnI,KAAKR,YAAc2I,CACrB,EAjSF,iB,4FCrFA,eAOA,SACA,SAEA,SAsCMC,EADwB,EACsBvJ,aAAaC,kBAIjE,MAAMuJ,EAIJ,WAAAhJ,GACEW,KAAKH,WAAa,IAAIhB,aAPgB,KAQtCmB,KAAKJ,MAAQ,CACf,EAIF,IAAI0I,EAAQ,EACRC,GAAa,EACbC,EAAM,EACNC,EAAM,EACNC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EAET,MAAaC,UAA0B,EAAA1J,WAYrC,WAAAC,CACUC,EACAC,EACAC,EACSuJ,GAEjBtJ,QALQ,KAAAH,UAAAA,EACA,KAAAC,IAAAA,EACA,KAAAC,YAAAA,EACS,KAAAuJ,cAAAA,EAPX,KAAApJ,UAAsB,IAAI0I,EAC1B,KAAAW,gBAA4B,IAAIX,EAUtC,MAAMtI,EAAKC,KAAKT,IAEhBS,KAAKW,UAAW,IAAAL,eAAa,IAAAM,eAAcb,EA1EpB,uYAgBE,gIA2DzBC,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAGoB,cAAcnB,KAAKW,aAGvDX,KAAKoB,qBAAsB,IAAAd,cAAaP,EAAGsB,mBAAmBrB,KAAKW,SAAU,iBAG7EX,KAAKwB,mBAAqBzB,EAAG0B,oBAC7B1B,EAAG2B,gBAAgB1B,KAAKwB,oBAGxB,MAAMG,EAAmB,IAAI9C,aAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC1D+C,EAAyB7B,EAAG8B,eAClC7B,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAG+B,aAAaF,MACjD7B,EAAGgC,WAAWhC,EAAGiC,aAAcJ,GAC/B7B,EAAGkC,WAAWlC,EAAGiC,aAAcL,EAAkB5B,EAAGmC,aACpDnC,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAAiC,EAAGpC,KAAKT,IAAI8C,OAAO,EAAO,EAAG,GAKrF,MAAMC,EAAyB,IAAIC,WAAW,CAAC,EAAG,EAAG,EAAG,IAClDC,EAAuBzC,EAAG8B,eAChC7B,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAG+B,aAAaU,MACjDzC,EAAGgC,WAAWhC,EAAG0C,qBAAsBD,GACvCzC,EAAGkC,WAAWlC,EAAG0C,qBAAsBH,EAAwBvC,EAAGmC,aAGlElC,KAAK0C,mBAAoB,IAAApC,cAAaP,EAAG8B,gBACzC7B,KAAKiB,UAAS,IAAAC,eAAa,IAAMnB,EAAG+B,aAAa9B,KAAK0C,sBACtD3C,EAAGgC,WAAWhC,EAAGiC,aAAchC,KAAK0C,mBACpC3C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAAgC,EAAGrC,EAAGsC,OAAO,EAAO+F,EAAqB,GAChGrI,EAAG4C,oBAAoB,EAAgC,GACvD5C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAA4B,EAAGrC,EAAGsC,OAAO,EAAO+F,EAAqB,EAAIvJ,aAAaC,mBAC7GiB,EAAG4C,oBAAoB,EAA4B,GACnD5C,EAAGoC,wBAAwB,GAC3BpC,EAAGqC,oBAAoB,EAA6B,EAAGrC,EAAGsC,OAAO,EAAO+F,EAAqB,EAAIvJ,aAAaC,mBAC9GiB,EAAG4C,oBAAoB,EAA6B,GAEpD3C,KAAKiJ,oBAAoBF,EAAcG,QACvClJ,KAAKiB,SAASjB,KAAK+I,cAAcI,gBAAeC,IAC9CpJ,KAAKiJ,oBAAoBG,GACzBpJ,KAAKqJ,0BAA0B,IAEnC,CAEO,iBAAAC,GACLtJ,KAAKuJ,gBAAgBvJ,KAAKL,UAC5B,CAEO,YAAA6J,GACLxJ,KAAKuJ,gBAAgBvJ,KAAKgJ,gBAC5B,CAEQ,eAAAO,CAAgBE,GACtB,MAAM1J,EAAKC,KAAKT,IAEhBQ,EAAG6C,WAAW5C,KAAKW,UAEnBZ,EAAG2B,gBAAgB1B,KAAKwB,oBAExBzB,EAAGiD,iBAAiBhD,KAAKoB,qBAAqB,EAAO,EAAA6B,mBAGrDlD,EAAGgC,WAAWhC,EAAGiC,aAAchC,KAAK0C,mBACpC3C,EAAGkC,WAAWlC,EAAGiC,aAAcyH,EAAS5J,WAAYE,EAAG2J,cACvD3J,EAAG8H,sBAAsB7H,KAAKT,IAAIuI,eAAgB,EAAG/H,EAAGmE,cAAe,EAAGuF,EAAS7J,MACrF,CAEO,YAAA4E,GACLxE,KAAKqJ,0BACP,CAEO,aAAAnB,CAAcC,GACnBnI,KAAKR,YAAc2I,CACrB,CAEQ,mBAAAc,CAAoBC,GAC1BlJ,KAAK2J,SAAW3J,KAAK4J,qBAAqBV,EAAOW,YACjD7J,KAAK8J,aAAe9J,KAAK4J,qBAAqBV,EAAOa,OACvD,CAEQ,wBAAAV,GAENrJ,KAAKgK,mBACHhK,KAAKL,UAAUE,WACf,EACA,EACA,EACAG,KAAKV,UAAUgG,KAAOtF,KAAKR,YAAYoG,OAAOC,KAAKC,MACnD9F,KAAKV,UAAUwH,KAAO9G,KAAKR,YAAYoG,OAAOC,KAAKQ,OACnDrG,KAAK2J,SAET,CAEO,iBAAAM,CAAkBC,GACvB,MAAMtD,EAAW5G,KAAKV,UAChBmK,EAAWzJ,KAAKL,UAGtB,IACIkF,EACAD,EACAuF,EACAC,EACAC,EACAC,EACAC,EACAxF,EACAC,EACAwF,EACAxE,EAXAyE,EAAiB,EAarB,IAAK5F,EAAI,EAAGA,EAAI+B,EAASE,KAAMjC,IAAK,CAKlC,IAJAsF,GAAiB,EACjBC,EAAY,EACZC,EAAY,EACZC,GAAiB,EACZ1F,EAAI,EAAGA,EAAIgC,EAAStB,KAAMV,IAC7B2F,GAAe1F,EAAI+B,EAAStB,KAAQV,GAAK,EAAA8F,+BACzC3F,EAAKmF,EAAMS,MAAMJ,EAAa,EAAAK,wBAC9B5F,EAAKkF,EAAMS,MAAMJ,EAAa,EAAAM,wBAC9BL,KAAkB,SAALxF,IACTD,IAAOqF,GAAcpF,IAAOqF,IAAcC,GAAkBE,OAE5C,IAAdJ,GAAoBE,GAAgC,IAAdD,KACxCrE,EAhLkB,EAgLTyE,IACTzK,KAAK8K,iBAAiBrB,EAAUzD,EAAQqE,EAAWD,EAAWD,EAAevF,EAAGC,IAElFsF,EAAgBvF,EAChBwF,EAAYrF,EACZsF,EAAYrF,EACZsF,EAAiBE,IAIH,IAAdJ,GAAoBE,GAAgC,IAAdD,KACxCrE,EA3LsB,EA2LbyE,IACTzK,KAAK8K,iBAAiBrB,EAAUzD,EAAQqE,EAAWD,EAAWD,EAAevD,EAAStB,KAAMT,G,CAGhG4E,EAAS7J,MAAQ6K,CACnB,CAEO,YAAAM,CAAab,GAClB,MAAMT,EAAWzJ,KAAKgJ,gBAChBe,EAASG,EAAMH,OACrB,IAAKA,GAA2B,UAAjBA,EAAOiB,MAEpB,YADAvB,EAAS7J,MAAQ,GAInB,IAAIoG,EACAyE,EAAiB,EAEA,QAAjBV,EAAOiB,OAAoC,YAAjBjB,EAAOiB,QAEnChF,EA/MwB,EA+MfyE,IACTzK,KAAKgK,mBACHP,EAAS5J,WACTmG,EACA+D,EAAOnF,EAAI5E,KAAKR,YAAYoG,OAAOC,KAAKC,MACxCiE,EAAOlF,EAAI7E,KAAKR,YAAYoG,OAAOC,KAAKQ,OACvB,QAAjB0D,EAAOiB,MAAkBjB,EAAOkB,IAAMlB,EAAOmB,YAAcnB,EAAOkB,IAClEjL,KAAKR,YAAYoG,OAAOC,KAAKQ,OAC7BrG,KAAK8J,eAGY,cAAjBC,EAAOiB,OAA0C,YAAjBjB,EAAOiB,QAEzChF,EA5NwB,EA4NfyE,IACTzK,KAAKgK,mBACHP,EAAS5J,WACTmG,EACA+D,EAAOnF,EAAI5E,KAAKR,YAAYoG,OAAOC,KAAKC,OACvCiE,EAAOlF,EAAI,GAAK7E,KAAKR,YAAYoG,OAAOC,KAAKQ,OAAS0D,EAAOkB,IAC9DlB,EAAOjE,MAAQ9F,KAAKR,YAAYoG,OAAOC,KAAKC,MAC5CiE,EAAOkB,IACPjL,KAAK8J,eAGY,YAAjBC,EAAOiB,QAEThF,EAzOwB,EAyOfyE,IACTzK,KAAKgK,mBACHP,EAAS5J,WACTmG,EACA+D,EAAOnF,EAAI5E,KAAKR,YAAYoG,OAAOC,KAAKC,MACxCiE,EAAOlF,EAAI7E,KAAKR,YAAYoG,OAAOC,KAAKQ,OACxC0D,EAAOjE,MAAQ9F,KAAKR,YAAYoG,OAAOC,KAAKC,MAC5CiE,EAAOkB,IACPjL,KAAK8J,cAGP9D,EApPwB,EAoPfyE,IACTzK,KAAKgK,mBACHP,EAAS5J,WACTmG,GACC+D,EAAOnF,EAAImF,EAAOjE,OAAS9F,KAAKR,YAAYoG,OAAOC,KAAKC,MAAQiE,EAAOkB,IACxElB,EAAOlF,EAAI7E,KAAKR,YAAYoG,OAAOC,KAAKQ,OACxC0D,EAAOkB,IACPjL,KAAKR,YAAYoG,OAAOC,KAAKQ,OAC7BrG,KAAK8J,eAITL,EAAS7J,MAAQ6K,CACnB,CAEQ,gBAAAK,CAAiBrB,EAAoBzD,EAAgBhB,EAAYD,EAAYoG,EAAgBC,EAAcvG,GAEjH,GADA0D,GAAa,EACJ,SAALvD,EACF,OAAa,SAALA,GACN,KAAK,SACL,KAAK,SACHsD,EAAQtI,KAAK+I,cAAcG,OAAOmC,KAAU,IAALrG,GAA6BsG,KACpE,MACF,KAAK,SACHhD,GAAc,SAALtD,IAA6B,EACtC,MAEF,QACEsD,EAAQtI,KAAK+I,cAAcG,OAAOqC,WAAWD,UAGjD,OAAa,SAALvG,GACN,KAAK,SACL,KAAK,SACHuD,EAAQtI,KAAK+I,cAAcG,OAAOmC,KAAU,IAALtG,GAA6BuG,KACpE,MACF,KAAK,SACHhD,GAAc,SAALvD,IAA6B,EACtC,MAEF,QACEuD,EAAQtI,KAAK+I,cAAcG,OAAOW,WAAWyB,KAC7C/C,GAAa,EAIfkB,EAAS5J,WAAW2F,OAASQ,EAAS,IACxCyD,EAAS5J,YAAa,IAAA2L,oBAAmB/B,EAAS5J,WAAYG,KAAKV,UAAUwH,KAAO9G,KAAKV,UAAUgG,KAnS3E,IAqS1BkD,EAAM2C,EAASnL,KAAKR,YAAYoG,OAAOC,KAAKC,MAC5C2C,EAAM5D,EAAI7E,KAAKR,YAAYoG,OAAOC,KAAKQ,OACvCqC,GAAOJ,GAAS,GAAM,KAAQ,IAC9BK,GAAOL,GAAS,GAAM,KAAQ,IAC9BM,GAAON,GAAS,EAAM,KAAQ,IAC9BO,EAAK,EAEL7I,KAAKyL,cAAchC,EAAS5J,WAAYmG,EAAQwC,EAAKC,GAAM2C,EAAOD,GAAUnL,KAAKR,YAAYoG,OAAOC,KAAKC,MAAO9F,KAAKR,YAAYoG,OAAOC,KAAKQ,OAAQqC,EAAIC,EAAIC,EAAIC,EACnK,CAEQ,aAAA4C,CAAcpG,EAAqBW,EAAgB0F,EAAYC,EAAY7F,EAAeO,EAAgBuF,EAAWC,EAAWC,EAAWC,GACjJ1G,EAAMW,GAAc0F,EAAK1L,KAAKR,YAAYoG,OAAOQ,OAAON,MACxDT,EAAMW,EAAS,GAAK2F,EAAK3L,KAAKR,YAAYoG,OAAOQ,OAAOC,OACxDhB,EAAMW,EAAS,GAAKF,EAAQ9F,KAAKR,YAAYoG,OAAOQ,OAAON,MAC3DT,EAAMW,EAAS,GAAKK,EAASrG,KAAKR,YAAYoG,OAAOQ,OAAOC,OAC5DhB,EAAMW,EAAS,GAAK4F,EACpBvG,EAAMW,EAAS,GAAK6F,EACpBxG,EAAMW,EAAS,GAAK8F,EACpBzG,EAAMW,EAAS,GAAK+F,CACtB,CAEQ,kBAAA/B,CAAmB3E,EAAqBW,EAAgB0F,EAAYC,EAAY7F,EAAeO,EAAgB2F,GACrH3G,EAAMW,GAAc0F,EAAK1L,KAAKR,YAAYoG,OAAOQ,OAAON,MACxDT,EAAMW,EAAS,GAAK2F,EAAK3L,KAAKR,YAAYoG,OAAOQ,OAAOC,OACxDhB,EAAMW,EAAS,GAAKF,EAAQ9F,KAAKR,YAAYoG,OAAOQ,OAAON,MAC3DT,EAAMW,EAAS,GAAKK,EAASrG,KAAKR,YAAYoG,OAAOQ,OAAOC,OAC5DhB,EAAMW,EAAS,GAAKgG,EAAM,GAC1B3G,EAAMW,EAAS,GAAKgG,EAAM,GAC1B3G,EAAMW,EAAS,GAAKgG,EAAM,GAC1B3G,EAAMW,EAAS,GAAKgG,EAAM,EAC5B,CAEQ,oBAAApC,CAAqBoC,GAC3B,OAAO,IAAInN,aAAa,EACpBmN,EAAMV,MAAQ,GAAM,KAAQ,KAC5BU,EAAMV,MAAQ,GAAM,KAAQ,KAC5BU,EAAMV,MAAQ,EAAM,KAAQ,KACR,IAApBU,EAAU,MAAkB,KAElC,EAnTF,qB,4NCtEA,eAEa,EAAAtB,+BAAiC,EACjC,EAAAE,uBAAyB,EACzB,EAAAC,uBAAyB,EACzB,EAAAoB,wBAA0B,EAE1B,EAAAC,uBAAyB,WAEtC,oBAME,WAAA7M,GACEW,KAAK2K,MAAQ,IAAIwB,YAAY,GAC7BnM,KAAKqH,YAAc,IAAI8E,YAAY,GACnCnM,KAAKoM,WAAY,IAAAC,6BACnB,CAEO,MAAAC,CAAOhH,EAAcwB,GAC1B,MAAMyF,EAAajH,EAAOwB,EAAO,EAAA4D,+BAC7B6B,IAAevM,KAAK2K,MAAMnF,SAC5BxF,KAAK2K,MAAQ,IAAIwB,YAAYI,GAC7BvM,KAAKqH,YAAc,IAAI8E,YAAYrF,GAEvC,CAEO,KAAAH,GACL3G,KAAK2K,MAAMjE,KAAK,EAAG,GACnB1G,KAAKqH,YAAYX,KAAK,EAAG,EAC3B,E,yGClCF,eACA,SACA,SACA,QACA,SAKA,SACA,SACA,SACA,SACA,SAIA,SACA,SACA,SACA,SAEA,SAGA,MAAa8F,UAAsB,EAAApN,WAiCjC,WAAAC,CACUC,EACSmN,EACAC,EACAC,EACAC,EACAC,EACAC,EACA/D,EACjBgE,GAEAtN,QAVQ,KAAAH,UAAAA,EACS,KAAAmN,wBAAAA,EACA,KAAAC,iBAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,mBAAAA,EACA,KAAAC,gBAAAA,EACA,KAAA/D,cAAAA,EAlCX,KAAAiE,OAAsB,IAAI,EAAAC,YAC1B,KAAAC,UAAsB,IAAI,EAAAC,SAcjB,KAAAC,sBAAwBpN,KAAKiB,SAAS,IAAI,EAAAoM,cAC3C,KAAAC,qBAAuBtN,KAAKoN,sBAAsBG,MACjD,KAAAC,yBAA2BxN,KAAKiB,SAAS,IAAI,EAAAoM,cAC9C,KAAAI,wBAA0BzN,KAAKwN,yBAAyBD,MACvD,KAAAG,4BAA8B1N,KAAKiB,SAAS,IAAI,EAAAoM,cACjD,KAAAM,2BAA6B3N,KAAK0N,4BAA4BH,MAC7D,KAAAK,iBAAmB5N,KAAKiB,SAAS,IAAI,EAAAoM,cACtC,KAAAQ,gBAAkB7N,KAAK4N,iBAAiBL,MACvC,KAAAO,eAAiB9N,KAAKiB,SAAS,IAAI,EAAAoM,cACpC,KAAAU,cAAgB/N,KAAK8N,eAAeP,MAelDvN,KAAKiB,SAASjB,KAAK+I,cAAcI,gBAAe,IAAMnJ,KAAKgO,wBAE3DhO,KAAKiO,mBAAqB,IAAI,EAAAC,kBAAkBlO,KAAKV,UAAWU,KAAKgN,OAAOZ,UAAWpM,KAAK6M,mBAAoB7M,KAAK2M,oBAAqB3M,KAAK+I,eAE/I/I,KAAKmO,MAASnO,KAAKV,UAAkB6O,MAErCnO,KAAKoO,cAAgB,CACnB,IAAI,EAAAC,gBAAgBrO,KAAKmO,MAAMG,cAAgB,EAAGtO,KAAKV,UAAWU,KAAKmO,MAAMI,WAAYvO,KAAK2M,oBAAqBG,EAAiB9M,KAAK+I,gBAE3I/I,KAAKmI,YAAa,IAAAqG,0BAClBxO,KAAKyO,kBAAoBzO,KAAK2M,oBAAoB1B,IAClDjL,KAAK0O,oBACL1O,KAAK2O,qBACL3O,KAAKiB,SAAS6L,EAAgB8B,gBAAe,IAAM5O,KAAK6O,2BAExD7O,KAAK8O,QAAUC,SAASC,cAAc,UAEtC,MAAMC,EAAoB,CACxBC,WAAW,EACXC,OAAO,EACPpC,yBAGF,GADA/M,KAAKT,IAAMS,KAAK8O,QAAQM,WAAW,SAAUH,IACxCjP,KAAKT,IACR,MAAM,IAAI8P,MAAM,wBAA0BrP,KAAKT,KAGjDS,KAAKiB,UAAS,IAAAqO,0BAAyBtP,KAAK8O,QAAS,oBAAqB1F,IACxEmG,QAAQC,IAAI,mCAEZpG,EAAEqG,iBAGFzP,KAAK0P,2BAA6BC,YAAW,KAC3C3P,KAAK0P,gCAA6BzP,EAClCsP,QAAQK,KAAK,oDACb5P,KAAK8N,eAAe+B,KAAKzG,EAAE,GAC1B,IAAc,KAEnBpJ,KAAKiB,UAAS,IAAAqO,0BAAyBtP,KAAK8O,QAAS,wBAAyB1F,IAC5EmG,QAAQK,KAAK,uCACbE,aAAa9P,KAAK0P,4BAClB1P,KAAK0P,gCAA6BzP,GAGlC,IAAA8P,yBAAwB/P,KAAKV,WAC7BU,KAAKgQ,wBACLhQ,KAAKiQ,wBAAwB,KAG/BjQ,KAAKiB,UAAS,IAAAiP,8BAA6BlQ,KAAK8O,QAAS9O,KAAK2M,oBAAoBwD,QAAQ,CAACC,EAAGC,IAAMrQ,KAAKsQ,gCAAgCF,EAAGC,MAE5IrQ,KAAKmO,MAAMG,cAAeiC,YAAYvQ,KAAK8O,UAE1C9O,KAAKwQ,mBAAoBxQ,KAAKyQ,gBAAkBzQ,KAAKgQ,wBAEtDhQ,KAAK0Q,YAAc1Q,KAAK2M,oBAAoBwD,OAAOpB,SAAS4B,KAAKC,SAAS5Q,KAAKmO,MAAMG,eAErFtO,KAAKiB,UAAS,IAAAC,eAAa,K,MACzB,IAAK,MAAM2P,KAAK7Q,KAAKoO,cACnByC,EAAEC,UAEsB,QAA1B,EAAA9Q,KAAK8O,QAAQiC,qBAAa,SAAEC,YAAYhR,KAAK8O,UAC7C,IAAAiB,yBAAwB/P,KAAKV,UAAU,IAE3C,CAEA,gBAAW2R,G,MACT,OAAsB,QAAf,EAAAjR,KAAKkR,kBAAU,eAAE1K,MAAM,GAAGJ,MACnC,CAEQ,kBAAA4H,GACNhO,KAAKmR,oBAGLnR,KAAKoR,aAAY,EACnB,CAEO,4BAAAC,GAGDrR,KAAKyO,oBAAsBzO,KAAK2M,oBAAoB1B,MACtDjL,KAAKyO,kBAAoBzO,KAAK2M,oBAAoB1B,IAClDjL,KAAKwE,aAAaxE,KAAKV,UAAUgG,KAAMtF,KAAKV,UAAUwH,MAE1D,CAEO,YAAAtC,CAAac,EAAcwB,G,YAEhC9G,KAAK0O,oBAEL1O,KAAKgN,OAAOV,OAAOtM,KAAKV,UAAUgG,KAAMtF,KAAKV,UAAUwH,MAGvD,IAAK,MAAM+J,KAAK7Q,KAAKoO,cACnByC,EAAEvE,OAAOtM,KAAKV,UAAWU,KAAKmI,YAIhCnI,KAAK8O,QAAQhJ,MAAQ9F,KAAKmI,WAAWvC,OAAOQ,OAAON,MACnD9F,KAAK8O,QAAQzI,OAASrG,KAAKmI,WAAWvC,OAAOQ,OAAOC,OACpDrG,KAAK8O,QAAQ9D,MAAMlF,MAAQ,GAAG9F,KAAKmI,WAAWmJ,IAAIlL,OAAON,UACzD9F,KAAK8O,QAAQ9D,MAAM3E,OAAS,GAAGrG,KAAKmI,WAAWmJ,IAAIlL,OAAOC,WAG1DrG,KAAKmO,MAAMG,cAAetD,MAAMlF,MAAQ,GAAG9F,KAAKmI,WAAWmJ,IAAIlL,OAAON,UACtE9F,KAAKmO,MAAMG,cAAetD,MAAM3E,OAAS,GAAGrG,KAAKmI,WAAWmJ,IAAIlL,OAAOC,WAEhD,QAAvB,EAAArG,KAAKwQ,0BAAkB,SAAEtI,cAAclI,KAAKmI,YACrB,QAAvB,EAAAnI,KAAKwQ,0BAAkB,SAAEhM,eACN,QAAnB,EAAAxE,KAAKyQ,sBAAc,SAAEvI,cAAclI,KAAKmI,YACrB,QAAnB,EAAAnI,KAAKyQ,sBAAc,SAAEjM,eAErBxE,KAAKmR,oBAILnR,KAAKoR,aAAY,EACnB,CAEO,qBAAAG,GACLvR,KAAKwE,aAAaxE,KAAKV,UAAUgG,KAAMtF,KAAKV,UAAUwH,KACxD,CAEO,UAAA0K,G,MACL,IAAK,MAAMX,KAAK7Q,KAAKoO,cACnByC,EAAEW,WAAWxR,KAAKV,WAES,QAA7B,EAAAU,KAAKyR,gCAAwB,SAAEC,QAE/B1R,KAAKiQ,wBACP,CAEO,WAAA0B,G,MACL,IAAK,MAAMd,KAAK7Q,KAAKoO,cACnByC,EAAEc,YAAY3R,KAAKV,WAEQ,QAA7B,EAAAU,KAAKyR,gCAAwB,SAAEG,SAE/B5R,KAAKiQ,wBACP,CAEO,sBAAA4B,CAAuBC,EAAqCC,EAAmCC,GACpG,IAAK,MAAMnB,KAAK7Q,KAAKoO,cACnByC,EAAEgB,uBAAuB7R,KAAKV,UAAWwS,EAAOC,EAAKC,GAEvDhS,KAAKgN,OAAOZ,UAAU6F,OAAOjS,KAAKV,UAAWwS,EAAOC,EAAKC,GACzDhS,KAAKiQ,wBACP,CAEO,gBAAAiC,G,MACL,IAAK,MAAMrB,KAAK7Q,KAAKoO,cACnByC,EAAEqB,iBAAiBlS,KAAKV,WAEG,QAA7B,EAAAU,KAAKyR,gCAAwB,SAAEU,uBACjC,CAEQ,qBAAAtD,GACN7O,KAAK0O,oBACL1O,KAAKmR,oBACLnR,KAAK2O,oBACP,CAKQ,qBAAAqB,G,QAWN,OATuB,QAAvB,EAAAhQ,KAAKwQ,0BAAkB,SAAEM,UACN,QAAnB,EAAA9Q,KAAKyQ,sBAAc,SAAEK,UAErB9Q,KAAKwQ,mBAAqBxQ,KAAKiB,SAAS,IAAI,EAAA6H,kBAAkB9I,KAAKV,UAAWU,KAAKT,IAAKS,KAAKmI,WAAYnI,KAAK+I,gBAC9G/I,KAAKyQ,eAAiBzQ,KAAKiB,SAAS,IAAI,EAAA9B,cAAca,KAAKV,UAAWU,KAAKT,IAAKS,KAAKmI,aAGrFnI,KAAKuR,wBAEE,CAACvR,KAAKwQ,mBAAoBxQ,KAAKyQ,eACxC,CAKQ,iBAAAU,G,QACN,GAAInR,KAAKmI,WAAWvC,OAAOG,KAAKD,OAAS,GAAK9F,KAAKmI,WAAWvC,OAAOG,KAAKM,QAAU,EAGlF,YADArG,KAAK0Q,aAAc,GAIrB,MAAM1I,GAAQ,IAAAoK,qBACZpS,KAAKV,UACLU,KAAK8M,gBAAgBuF,WACrBrS,KAAK+I,cAAcG,OACnBlJ,KAAKmI,WAAWvC,OAAOC,KAAKC,MAC5B9F,KAAKmI,WAAWvC,OAAOC,KAAKQ,OAC5BrG,KAAKmI,WAAWvC,OAAOG,KAAKD,MAC5B9F,KAAKmI,WAAWvC,OAAOG,KAAKM,OAC5BrG,KAAK2M,oBAAoB1B,KAEvBjL,KAAKkR,aAAelJ,IACG,QAAzB,EAAAhI,KAAKsS,4BAAoB,SAAExB,UAC3B9Q,KAAKoN,sBAAsByC,KAAK7H,EAAMxB,MAAM,GAAGJ,QAC/CpG,KAAKsS,sBAAuB,IAAAC,2BAA0B,EACpD,IAAAC,cAAaxK,EAAMyF,wBAAyBzN,KAAKwN,2BACjD,IAAAgF,cAAaxK,EAAM2F,2BAA4B3N,KAAK0N,gCAGxD1N,KAAKkR,WAAalJ,EAClBhI,KAAKkR,WAAWuB,SACG,QAAnB,EAAAzS,KAAKyQ,sBAAc,SAAE1I,SAAS/H,KAAKkR,WACrC,CAOQ,WAAAE,CAAYsB,G,MAClB1S,KAAKgN,OAAOrG,QACR+L,IACiB,QAAnB,EAAA1S,KAAKyQ,sBAAc,SAAE9J,QAEzB,CAEO,iBAAAgM,G,MACU,QAAf,EAAA3S,KAAKkR,kBAAU,SAAE0B,eACjB5S,KAAKoR,aAAY,GACjBpR,KAAKiQ,wBACP,CAEO,KAAAtJ,G,MACL3G,KAAKoR,aAAY,GACjB,IAAK,MAAMP,KAAK7Q,KAAKoO,cACnByC,EAAEgC,MAAM7S,KAAKV,WAGc,QAA7B,EAAAU,KAAKyR,gCAAwB,SAAEU,wBAC/BnS,KAAK2O,oBACP,CAEO,uBAAAmE,CAAwBC,GAC7B,OAAQ,CACV,CAEO,yBAAAC,CAA0BC,GAC/B,OAAO,CACT,CAEO,UAAAC,CAAWpB,EAAeC,G,UAC/B,IAAK/R,KAAK0Q,YAAa,CACrB,KAAI1Q,KAAK2M,oBAAoBwD,OAAOpB,SAAS4B,KAAKC,SAAS5Q,KAAKmO,MAAMG,gBAAmBtO,KAAK0M,iBAAiB5G,OAAS9F,KAAK0M,iBAAiBrG,QAK5I,OAJArG,KAAK0O,oBACL1O,KAAKmR,oBACLnR,KAAK0Q,aAAc,C,CAOvB,IAAK,MAAMG,KAAK7Q,KAAKoO,cACnByC,EAAEsC,kBAAkBnT,KAAKV,UAAWwS,EAAOC,GAGxC/R,KAAKyQ,gBAAmBzQ,KAAKwQ,qBAO9BxQ,KAAKyQ,eAAehM,cACtBzE,KAAKoR,aAAY,GACjBpR,KAAKoT,aAAa,EAAGpT,KAAKV,UAAUwH,KAAO,IAG3C9G,KAAKoT,aAAatB,EAAOC,GAIJ,QAAvB,EAAA/R,KAAKwQ,0BAAkB,SAAElH,oBACN,QAAnB,EAAAtJ,KAAKyQ,sBAAc,SAAExJ,OAAOjH,KAAKgN,QAC5BhN,KAAKyR,2BAA4BzR,KAAKyR,yBAAyB4B,iBAC3C,QAAvB,EAAArT,KAAKwQ,0BAAkB,SAAEhH,eAE7B,CAEQ,kBAAAmF,G,MACF3O,KAAKV,UAAUgU,QAAQC,YACpBvT,KAAKyR,2BACRzR,KAAKyR,yBAA2BzR,KAAKiB,SAAS,IAAI,EAAAuS,yBAAwB,KACxExT,KAAKyT,sBAAsB,GAC1BzT,KAAK2M,wBAGmB,QAA7B,EAAA3M,KAAKyR,gCAAwB,SAAEX,UAC/B9Q,KAAKyR,8BAA2BxR,GAIlCD,KAAKyT,sBACP,CAEQ,YAAAL,CAAatB,EAAeC,GAClC,MAAMnL,EAAW5G,KAAKmO,MACtB,IAGIhJ,EACAN,EACA6O,EACAC,EACAC,EACAC,EACAC,EACAC,EACA7O,EACAJ,EACA/D,EACA6D,EACAoP,EAfAnO,EAAkB7F,KAAKkN,UAgB3B4E,EAAQmC,EAAMnC,EAAOlL,EAASE,KAAO,EAAG,GACxCiL,EAAMkC,EAAMlC,EAAKnL,EAASE,KAAO,EAAG,GAEpC,MAAMoN,EAAUlU,KAAKV,UAAU6U,OAAOC,OAAOC,MAAQrU,KAAKV,UAAU6U,OAAOC,OAAOF,QAE5EI,EAAUlU,KAAKC,IAAIL,KAAKV,UAAU6U,OAAOC,OAAOE,QAAS1N,EAAStB,KAAO,GAC/E,IAAIiP,GAAe,EACnB,MAAMlB,EACJrT,KAAK4M,aAAa4H,sBACjBxU,KAAK4M,aAAa6H,kBACjBzU,KAAKyR,0BAA4BzR,KAAKyR,yBAAyB4B,iBACnErT,KAAKgN,OAAOjD,YAAS9J,EACrB,IAAIyU,GAAe,EAEnB,IAAK7P,EAAIiN,EAAOjN,GAAKkN,EAAKlN,IAKxB,IAJA6O,EAAM7O,EAAI+B,EAASuN,OAAOQ,MAC1BhB,EAAO/M,EAASuN,OAAOS,MAAMC,IAAInB,GACjC1T,KAAKgN,OAAO3F,YAAYxC,GAAK,EAC7B+O,EAAe5T,KAAKyM,wBAAwBqI,oBAAoBpB,GAC3D9O,EAAI,EAAGA,EAAIgC,EAAStB,KAAMV,IAqE7B,GApEAO,EAASnF,KAAKiO,mBAAmB8G,OAAOhQ,GACxC4O,EAAKqB,SAASpQ,EAAGiB,GAEP,IAANjB,IACFO,EAASnF,KAAKiO,mBAAmB8G,OAAOhQ,IAI1C8O,GAAW,EACXC,EAAYlP,EAKRgP,EAAapO,OAAS,GAAKZ,IAAMgP,EAAa,GAAG,KACnDC,GAAW,EACXE,EAAQH,EAAaqB,QAIrBpP,EAAO,IAAIqP,EACTrP,EACA8N,EAAMwB,mBAAkB,EAAMpB,EAAM,GAAIA,EAAM,IAC9CA,EAAM,GAAKA,EAAM,IAInBD,EAAYC,EAAM,GAAK,GAGzB7O,EAAQW,EAAKuP,WACbtQ,EAAOe,EAAKwP,UACZtU,GAAM8D,EAAI+B,EAAStB,KAAQV,GAAK,EAAA8F,+BAGhC1K,KAAKiO,mBAAmBqH,QAAQzP,EAAMjB,EAAG8O,GAGrCL,GAAmBK,IAAQQ,IACzBtP,IAAM0P,IACRtU,KAAKgN,OAAOjD,OAAS,CACnBnF,EAAG0P,EACHzP,EAAG7E,KAAKV,UAAU6U,OAAOC,OAAOF,QAChCpO,MAAOD,EAAK0P,WACZvK,MAAOhL,KAAK2M,oBAAoB6I,UAC7B5O,EAAS0M,QAAQmC,aAAe,QAAW7O,EAAS0M,QAAQoC,oBAC/DxK,YAAatE,EAAS0M,QAAQpI,YAC9BD,IAAKjL,KAAKyO,mBAEZ8F,EAAcD,EAAUzO,EAAK0P,WAAa,GAExC3Q,GAAK0P,GAAW1P,GAAK2P,IACnBvU,KAAK2M,oBAAoB6I,WACmB,WAA7C5O,EAAS0M,QAAQmC,aAAe,WACO,IAAvCzV,KAAK2M,oBAAoB6I,WACe,UAAzC5O,EAAS0M,QAAQoC,uBACnB1V,KAAKiO,mBAAmB8G,OAAO/P,GAC7B,SAAqBhF,KAAK+I,cAAcG,OAAOyM,aAAarK,MAAQ,EAAI,SAC1EtL,KAAKiO,mBAAmB8G,OAAOhQ,GAC7B,SAAqB/E,KAAK+I,cAAcG,OAAOa,OAAOuB,MAAQ,EAAI,WAIpExG,IAAS,EAAAS,iBACXvF,KAAKgN,OAAO3F,YAAYxC,GAAKD,EAAI,IAI/B5E,KAAKgN,OAAOrC,MAAM5J,KAAO+D,GACzB9E,KAAKgN,OAAOrC,MAAM5J,EAAI,EAAA6J,0BAA4B5K,KAAKiO,mBAAmB8G,OAAOhQ,IACjF/E,KAAKgN,OAAOrC,MAAM5J,EAAI,EAAA8J,0BAA4B7K,KAAKiO,mBAAmB8G,OAAO/P,IACjFhF,KAAKgN,OAAOrC,MAAM5J,EAAI,EAAAkL,2BAA6BjM,KAAKiO,mBAAmB8G,OAAO9P,OAItFyP,GAAe,EAGXxP,EAAMM,OAAS,IACjBV,GAAQ,EAAAoH,wBAIVlM,KAAKgN,OAAOrC,MAAM5J,GAAK+D,EACvB9E,KAAKgN,OAAOrC,MAAM5J,EAAI,EAAA6J,wBAA0B5K,KAAKiO,mBAAmB8G,OAAOhQ,GAC/E/E,KAAKgN,OAAOrC,MAAM5J,EAAI,EAAA8J,wBAA0B7K,KAAKiO,mBAAmB8G,OAAO/P,GAC/EhF,KAAKgN,OAAOrC,MAAM5J,EAAI,EAAAkL,yBAA2BjM,KAAKiO,mBAAmB8G,OAAO9P,IAEhFjF,KAAKyQ,eAAgB9L,WAAWC,EAAGC,EAAGC,EAAM9E,KAAKiO,mBAAmB8G,OAAOhQ,GAAI/E,KAAKiO,mBAAmB8G,OAAO/P,GAAIhF,KAAKiO,mBAAmB8G,OAAO9P,IAAKC,EAAOC,GAEzJ0O,GAKF,IAHAhO,EAAO7F,KAAKkN,UAGPtI,IAAKA,EAAIkP,EAAWlP,IACvBoP,GAAMnP,EAAI+B,EAAStB,KAAQV,GAAK,EAAA8F,+BAChC1K,KAAKyQ,eAAgB9L,WAAWC,EAAGC,EAAG,EAAAU,eAAgB,EAAG,EAAG,EAAG,EAAAqQ,eAAgB,GAC/E5V,KAAKgN,OAAOrC,MAAMqJ,GAAK,EAAAzO,eACvBvF,KAAKgN,OAAOrC,MAAMqJ,EAAI,EAAApJ,wBAA0B5K,KAAKiO,mBAAmB8G,OAAOhQ,GAC/E/E,KAAKgN,OAAOrC,MAAMqJ,EAAI,EAAAnJ,wBAA0B7K,KAAKiO,mBAAmB8G,OAAO/P,GAC/EhF,KAAKgN,OAAOrC,MAAMqJ,EAAI,EAAA/H,yBAA2BjM,KAAKiO,mBAAmB8G,OAAO9P,IAKpFyP,GACF1U,KAAKwQ,mBAAoBvG,kBAAkBjK,KAAKgN,QAElDhN,KAAKwQ,mBAAoBzF,aAAa/K,KAAKgN,OAC7C,CAKQ,iBAAA0B,GAED1O,KAAK0M,iBAAiB5G,OAAU9F,KAAK0M,iBAAiBrG,SAM3DrG,KAAKmI,WAAWvC,OAAOG,KAAKD,MAAQ1F,KAAKuF,MAAM3F,KAAK0M,iBAAiB5G,MAAQ9F,KAAKyO,mBAKlFzO,KAAKmI,WAAWvC,OAAOG,KAAKM,OAASjG,KAAKyV,KAAK7V,KAAK0M,iBAAiBrG,OAASrG,KAAKyO,mBAKnFzO,KAAKmI,WAAWvC,OAAOC,KAAKQ,OAASjG,KAAKuF,MAAM3F,KAAKmI,WAAWvC,OAAOG,KAAKM,OAASrG,KAAK8M,gBAAgBuF,WAAWyD,YAIrH9V,KAAKmI,WAAWvC,OAAOG,KAAKG,IAAqD,IAA/ClG,KAAK8M,gBAAgBuF,WAAWyD,WAAmB,EAAI1V,KAAK2V,OAAO/V,KAAKmI,WAAWvC,OAAOC,KAAKQ,OAASrG,KAAKmI,WAAWvC,OAAOG,KAAKM,QAAU,GAGhLrG,KAAKmI,WAAWvC,OAAOC,KAAKC,MAAQ9F,KAAKmI,WAAWvC,OAAOG,KAAKD,MAAQ1F,KAAK2V,MAAM/V,KAAK8M,gBAAgBuF,WAAW2D,eAInHhW,KAAKmI,WAAWvC,OAAOG,KAAKE,KAAO7F,KAAKuF,MAAM3F,KAAK8M,gBAAgBuF,WAAW2D,cAAgB,GAI9FhW,KAAKmI,WAAWvC,OAAOQ,OAAOC,OAASrG,KAAKV,UAAUwH,KAAO9G,KAAKmI,WAAWvC,OAAOC,KAAKQ,OACzFrG,KAAKmI,WAAWvC,OAAOQ,OAAON,MAAQ9F,KAAKV,UAAUgG,KAAOtF,KAAKmI,WAAWvC,OAAOC,KAAKC,MAOxF9F,KAAKmI,WAAWmJ,IAAIlL,OAAOC,OAASjG,KAAK2V,MAAM/V,KAAKmI,WAAWvC,OAAOQ,OAAOC,OAASrG,KAAKyO,mBAC3FzO,KAAKmI,WAAWmJ,IAAIlL,OAAON,MAAQ1F,KAAK2V,MAAM/V,KAAKmI,WAAWvC,OAAOQ,OAAON,MAAQ9F,KAAKyO,mBAMzFzO,KAAKmI,WAAWmJ,IAAIzL,KAAKQ,OAASrG,KAAKmI,WAAWvC,OAAOC,KAAKQ,OAASrG,KAAKyO,kBAC5EzO,KAAKmI,WAAWmJ,IAAIzL,KAAKC,MAAQ9F,KAAKmI,WAAWvC,OAAOC,KAAKC,MAAQ9F,KAAKyO,kBAC5E,CAEQ,+BAAA6B,CAAgCxK,EAAeO,GACjDrG,KAAK8O,QAAQhJ,QAAUA,GAAS9F,KAAK8O,QAAQzI,SAAWA,IAK5DrG,KAAK8O,QAAQhJ,MAAQA,EACrB9F,KAAK8O,QAAQzI,OAASA,EACtBrG,KAAKiQ,yBACP,CAEQ,sBAAAA,GACNjQ,KAAK4N,iBAAiBiC,KAAK,CAAEiC,MAAO,EAAGC,IAAK/R,KAAKV,UAAUwH,KAAO,GACpE,CAEQ,oBAAA2M,GACN,MAAMS,EAAUlU,KAAKV,UAAU6U,OAAOC,OAAOF,QAC7ClU,KAAK4N,iBAAiBiC,KAAK,CAAEiC,MAAOoC,EAASnC,IAAKmC,GACpD,EA7jBF,kBAikBA,MAAagB,UAAuB,EAAAe,cASlC,WAAA5W,CAAY6W,EAAsBhR,EAAeY,GAC/CrG,QANK,KAAA0W,QAAkB,EAGlB,KAAAC,aAAuB,GAI5BpW,KAAKgF,GAAKkR,EAAUlR,GACpBhF,KAAK+E,GAAKmR,EAAUnR,GACpB/E,KAAKoW,aAAelR,EACpBlF,KAAKqW,OAASvQ,CAChB,CAEO,UAAAwQ,GAEL,OAAO,OACT,CAEO,QAAAf,GACL,OAAOvV,KAAKqW,MACd,CAEO,QAAAjB,GACL,OAAOpV,KAAKoW,YACd,CAEO,OAAAf,GAGL,OAAO,OACT,CAEO,eAAAkB,CAAgBC,GACrB,MAAM,IAAInH,MAAM,kBAClB,CAEO,aAAAoH,GACL,MAAO,CAACzW,KAAKgF,GAAIhF,KAAKoV,WAAYpV,KAAKuV,WAAYvV,KAAKqV,UAC1D,EAGF,SAASpB,EAAMuC,EAAeE,EAAarW,EAAc,GACvD,OAAOD,KAAKsW,IAAItW,KAAKC,IAAImW,EAAOE,GAAMrW,EACxC,CA/CA,kB,4JC1lBA,eA2BA,SAAgBsW,EAAa5W,EAA2B6W,EAAcC,GACpE,MAAMC,GAAS,IAAAxW,cAAaP,EAAG4W,aAAaC,IAI5C,GAHA7W,EAAGgX,aAAaD,EAAQD,GACxB9W,EAAGiX,cAAcF,GACD/W,EAAGkX,mBAAmBH,EAAQ/W,EAAGmX,gBAE/C,OAAOJ,EAGTvH,QAAQ4H,MAAMpX,EAAGqX,iBAAiBN,IAClC/W,EAAGsX,aAAaP,EAClB,CAhCa,EAAA7T,kBAAoB,IAAIpE,aAAa,CAChD,EAAG,EAAG,EAAG,EACT,GAAI,EAAG,EAAG,EACV,EAAG,EAAG,EAAG,GACR,EAAG,EAAG,EAAG,IAGZ,yBAA8BkB,EAA2BuX,EAAsBC,GAC7E,MAAMC,GAAU,IAAAlX,cAAaP,EAAGa,iBAKhC,GAJAb,EAAG0X,aAAaD,GAAS,IAAAlX,cAAaqW,EAAa5W,EAAIA,EAAG2X,cAAeJ,KACzEvX,EAAG0X,aAAaD,GAAS,IAAAlX,cAAaqW,EAAa5W,EAAIA,EAAG4X,gBAAiBJ,KAC3ExX,EAAG6X,YAAYJ,GACCzX,EAAG8X,oBAAoBL,EAASzX,EAAG+X,aAEjD,OAAON,EAGTjI,QAAQ4H,MAAMpX,EAAGgY,kBAAkBP,IACnCzX,EAAGoB,cAAcqW,EACnB,EAEA,iBAaA,8BAAmCX,EAAsBH,GACvD,MAAMsB,EAAY5X,KAAKC,IAAoB,EAAhBwW,EAAOrR,OAAYkR,GACxCuB,EAAW,IAAIpZ,aAAamZ,GAClC,IAAK,IAAIjX,EAAI,EAAGA,EAAI8V,EAAOrR,OAAQzE,IACjCkX,EAASlX,GAAK8V,EAAO9V,GAEvB,OAAOkX,CACT,EAEA,kBAIE,WAAA5Y,CAAYkE,GACVvD,KAAKuD,QAAUA,EACfvD,KAAK2H,SAAW,CAClB,E,0FCvDF,eAGA,SAIA,SACA,SAGA,MAAsBuQ,UAAwB,EAAA9Y,WAY5C,WAAAC,CACEuH,EACQuR,EACRC,EACAC,EACQC,EACW3L,EACAG,EACA/D,GAEnBtJ,QARQ,KAAA0Y,WAAAA,EAGA,KAAAG,OAAAA,EACW,KAAA3L,oBAAAA,EACA,KAAAG,gBAAAA,EACA,KAAA/D,cAAAA,EAjBb,KAAAwP,iBAA2B,EAC3B,KAAAC,kBAA4B,EAC5B,KAAAC,iBAA2B,EAC3B,KAAAC,kBAA4B,EAC5B,KAAAC,gBAA0B,EAC1B,KAAAC,eAAyB,EAe/B5Y,KAAK8O,QAAUC,SAASC,cAAc,UACtChP,KAAK8O,QAAQ+J,UAAUC,IAAI,SAASV,WACpCpY,KAAK8O,QAAQ9D,MAAMqN,OAASA,EAAOU,WACnC/Y,KAAKgZ,cACLhZ,KAAKmY,WAAW5H,YAAYvQ,KAAK8O,SACjC9O,KAAKiB,SAASjB,KAAK+I,cAAcI,gBAAeC,IAC9CpJ,KAAKmR,kBAAkBvK,EAAUwC,GACjCpJ,KAAK6S,MAAMjM,EAAS,KAEtB5G,KAAKiB,UAAS,IAAAC,eAAa,K,MACzBlB,KAAK8O,QAAQmK,SACE,QAAf,EAAAjZ,KAAKkR,kBAAU,SAAEJ,SAAS,IAE9B,CAEQ,WAAAkI,GACNhZ,KAAKkZ,MAAO,IAAA5Y,cAAaN,KAAK8O,QAAQM,WAAW,KAAM,CAAE+J,MAAOnZ,KAAKsY,UAEhEtY,KAAKsY,QACRtY,KAAKoZ,WAET,CAEO,UAAA5H,CAAW5K,GAA2B,CACtC,WAAA+K,CAAY/K,GAA2B,CACvC,gBAAAsL,CAAiBtL,GAA2B,CAC5C,iBAAAuM,CAAkBvM,EAAoByS,EAAkBC,GAAuB,CAC/E,sBAAAzH,CAAuBjL,EAAoBkL,EAAqCC,EAAmCC,GAA4B,GAAc,CAE1J,gBAAAuH,CAAiB3S,EAAoBuS,GAE7C,GAAIA,IAAUnZ,KAAKsY,OACjB,OAIF,MAAMkB,EAAYxZ,KAAK8O,QACvB9O,KAAKsY,OAASa,EAEdnZ,KAAK8O,QAAU9O,KAAK8O,QAAQ2K,YAC5BzZ,KAAKgZ,cACLhZ,KAAKmY,WAAWuB,aAAa1Z,KAAK8O,QAAS0K,GAG3CxZ,KAAKmR,kBAAkBvK,EAAU5G,KAAK+I,cAAcG,QACpDlJ,KAAKmT,kBAAkBvM,EAAU,EAAGA,EAASE,KAAO,EACtD,CAOQ,iBAAAqK,CAAkBvK,EAAoB+S,GACxC3Z,KAAKuY,kBAAoB,GAAKvY,KAAKwY,mBAAqB,IAG5DxY,KAAKkR,YAAa,IAAAkB,qBAAoBxL,EAAU5G,KAAK8M,gBAAgBuF,WAAYsH,EAAU3Z,KAAKyY,iBAAkBzY,KAAK0Y,kBAAmB1Y,KAAKuY,iBAAkBvY,KAAKwY,kBAAmBxY,KAAK2M,oBAAoB1B,KAClNjL,KAAKkR,WAAWuB,SAClB,CAEO,MAAAnG,CAAO1F,EAAoBgT,GAChC5Z,KAAKyY,iBAAmBmB,EAAIhU,OAAOC,KAAKC,MACxC9F,KAAK0Y,kBAAoBkB,EAAIhU,OAAOC,KAAKQ,OACzCrG,KAAKuY,iBAAmBqB,EAAIhU,OAAOG,KAAKD,MACxC9F,KAAKwY,kBAAoBoB,EAAIhU,OAAOG,KAAKM,OACzCrG,KAAK2Y,gBAAkBiB,EAAIhU,OAAOG,KAAKE,KACvCjG,KAAK4Y,eAAiBgB,EAAIhU,OAAOG,KAAKG,IACtClG,KAAK8O,QAAQhJ,MAAQ8T,EAAIhU,OAAOQ,OAAON,MACvC9F,KAAK8O,QAAQzI,OAASuT,EAAIhU,OAAOQ,OAAOC,OACxCrG,KAAK8O,QAAQ9D,MAAMlF,MAAQ,GAAG8T,EAAItI,IAAIlL,OAAON,UAC7C9F,KAAK8O,QAAQ9D,MAAM3E,OAAS,GAAGuT,EAAItI,IAAIlL,OAAOC,WAGzCrG,KAAKsY,QACRtY,KAAKoZ,YAGPpZ,KAAKmR,kBAAkBvK,EAAU5G,KAAK+I,cAAcG,OACtD,CAUU,sBAAA2Q,CAAuBjV,EAAWC,EAAWiB,EAAgB,GACrE9F,KAAKkZ,KAAKY,SACRlV,EAAI5E,KAAKyY,kBACR5T,EAAI,GAAK7E,KAAK0Y,kBAAoB1Y,KAAK2M,oBAAoB1B,IAAM,EAClEnF,EAAQ9F,KAAKyY,iBACbzY,KAAK2M,oBAAoB1B,IAC7B,CAKU,SAAAmO,GACJpZ,KAAKsY,OACPtY,KAAKkZ,KAAKa,UAAU,EAAG,EAAG/Z,KAAK8O,QAAQhJ,MAAO9F,KAAK8O,QAAQzI,SAE3DrG,KAAKkZ,KAAKc,UAAYha,KAAK+I,cAAcG,OAAOW,WAAWyH,IAC3DtR,KAAKkZ,KAAKY,SAAS,EAAG,EAAG9Z,KAAK8O,QAAQhJ,MAAO9F,KAAK8O,QAAQzI,QAE9D,CASU,WAAA4T,CAAYrV,EAAWC,EAAWiB,EAAeO,GACrDrG,KAAKsY,OACPtY,KAAKkZ,KAAKa,UACRnV,EAAI5E,KAAKyY,iBACT5T,EAAI7E,KAAK0Y,kBACT5S,EAAQ9F,KAAKyY,iBACbpS,EAASrG,KAAK0Y,oBAEhB1Y,KAAKkZ,KAAKc,UAAYha,KAAK+I,cAAcG,OAAOW,WAAWyH,IAC3DtR,KAAKkZ,KAAKY,SACRlV,EAAI5E,KAAKyY,iBACT5T,EAAI7E,KAAK0Y,kBACT5S,EAAQ9F,KAAKyY,iBACbpS,EAASrG,KAAK0Y,mBAEpB,CAWU,kBAAAwB,CAAmBtT,EAAoBf,EAAgBjB,EAAWC,GAC1E7E,KAAKkZ,KAAKiB,KAAOna,KAAKoa,SAASxT,GAAU,GAAO,GAChD5G,KAAKkZ,KAAKmB,aAAe,EAAAC,cACzBta,KAAKua,UAAU3V,EAAGC,EAAGgB,EAAK0P,YAC1BvV,KAAKkZ,KAAKsB,SACR3U,EAAKuP,WACLxQ,EAAI5E,KAAKyY,iBAAmBzY,KAAK2Y,gBACjC9T,EAAI7E,KAAK0Y,kBAAoB1Y,KAAK4Y,eAAiB5Y,KAAKwY,kBAC5D,CAQQ,SAAA+B,CAAU3V,EAAWC,EAAWiB,GACtC9F,KAAKkZ,KAAKuB,YACVza,KAAKkZ,KAAKwB,KACR9V,EAAI5E,KAAKyY,iBACT5T,EAAI7E,KAAK0Y,kBACT5S,EAAQ9F,KAAKyY,iBACbzY,KAAK0Y,mBACP1Y,KAAKkZ,KAAKyB,MACZ,CAOU,QAAAP,CAASxT,EAAoBgU,EAAiBC,GAItD,MAAO,GAFWA,EAAW,SAAW,MADrBD,EAAShU,EAAS0M,QAAQwH,eAAiBlU,EAAS0M,QAAQyH,cAG1CnU,EAAS0M,QAAQ0H,SAAYhb,KAAK2M,oBAAoB1B,SAASrE,EAAS0M,QAAQ2H,YACvH,EAzMF,mB,0FCZA,eACA,SAMA,SAEA,MAAa5M,UAAwB,EAAA6J,gBAGnC,WAAA7Y,CACE6b,EACA7C,EACAzR,EACA2H,EACA4M,EACAC,EACAC,GAEA5b,MAAMmH,EAAUsU,EAAW,OAAQ7C,GAAQ,EAAM8C,EAAoBC,EAAgBC,GAErFrb,KAAKiB,SAASsN,EAAW+M,qBAAoBlS,GAAKpJ,KAAKub,yBAAyBnS,MAChFpJ,KAAKiB,SAASsN,EAAWiN,qBAAoBpS,GAAKpJ,KAAKyb,yBAAyBrS,KAClF,CAEO,MAAAkD,CAAO1F,EAAoBgT,GAChCna,MAAM6M,OAAO1F,EAAUgT,GAEvB5Z,KAAK0b,YAASzb,CAChB,CAEO,KAAA4S,CAAMjM,GACX5G,KAAK2b,mBACP,CAEQ,iBAAAA,GACN,GAAI3b,KAAK0b,OAAQ,CACf1b,KAAKia,YAAYja,KAAK0b,OAAOhQ,GAAI1L,KAAK0b,OAAO/P,GAAI3L,KAAK0b,OAAOpW,KAAOtF,KAAK0b,OAAOhQ,GAAI,GACpF,MAAMkQ,EAAiB5b,KAAK0b,OAAOG,GAAK7b,KAAK0b,OAAO/P,GAAK,EACrDiQ,EAAiB,GACnB5b,KAAKia,YAAY,EAAGja,KAAK0b,OAAO/P,GAAK,EAAG3L,KAAK0b,OAAOpW,KAAMsW,GAE5D5b,KAAKia,YAAY,EAAGja,KAAK0b,OAAOG,GAAI7b,KAAK0b,OAAOI,GAAI,GACpD9b,KAAK0b,YAASzb,C,CAElB,CAEQ,wBAAAsb,CAAyBnS,GAU/B,GATIA,EAAEpE,KAAO,EAAA+W,uBACX/b,KAAKkZ,KAAKc,UAAYha,KAAK+I,cAAcG,OAAOW,WAAWyH,SACzCrR,IAATmJ,EAAEpE,KAAoB,IAAAgX,YAAW5S,EAAEpE,IAE5ChF,KAAKkZ,KAAKc,UAAYha,KAAK+I,cAAcG,OAAOmC,KAAKjC,EAAEpE,IAAKsM,IAE5DtR,KAAKkZ,KAAKc,UAAYha,KAAK+I,cAAcG,OAAOqC,WAAW+F,IAGzDlI,EAAEuC,KAAOvC,EAAEyS,GAEb7b,KAAK6Z,uBAAuBzQ,EAAEsC,GAAItC,EAAEuC,GAAIvC,EAAE0S,GAAK1S,EAAEsC,QAC5C,CAEL1L,KAAK6Z,uBAAuBzQ,EAAEsC,GAAItC,EAAEuC,GAAIvC,EAAE9D,KAAO8D,EAAEsC,IACnD,IAAK,IAAI7G,EAAIuE,EAAEuC,GAAK,EAAG9G,EAAIuE,EAAEyS,GAAIhX,IAC/B7E,KAAK6Z,uBAAuB,EAAGhV,EAAGuE,EAAE9D,MAEtCtF,KAAK6Z,uBAAuB,EAAGzQ,EAAEyS,GAAIzS,EAAE0S,G,CAEzC9b,KAAK0b,OAAStS,CAChB,CAEQ,wBAAAqS,CAAyBrS,GAC/BpJ,KAAK2b,mBACP,EAlEF,mB,iGCCA,oCACEM,EACArF,EACA7D,EACAO,GAEA2I,EAAKC,iBAAiBtF,EAAM7D,EAASO,GACrC,IAAI6I,GAAW,EACf,MAAO,CACLrL,QAAS,KACHqL,IAGJA,GAAW,EACXF,EAAKG,oBAAoBxF,EAAM7D,EAASO,GAAQ,EAGtD,C,0FCvBA,IAKI+I,EALAC,EAAM,EACNC,EAAM,EACNC,GAAS,EACTC,GAAS,EACTC,GAAc,EAGlB,0BAWE,WAAArd,CACmBC,EACAqd,EACA9P,EACAF,EACA5D,GAJA,KAAAzJ,UAAAA,EACA,KAAAqd,sBAAAA,EACA,KAAA9P,mBAAAA,EACA,KAAAF,oBAAAA,EACA,KAAA5D,cAAAA,EAXH,KAAAgM,OAAkD,CAChE/P,GAAI,EACJD,GAAI,EACJE,IAAK,EAUP,CAMO,OAAAqQ,CAAQzP,EAAiBjB,EAAWC,GACzC7E,KAAK+U,OAAOhQ,GAAKc,EAAKd,GACtB/E,KAAK+U,OAAO/P,GAAKa,EAAKb,GACtBhF,KAAK+U,OAAO9P,IAAgB,UAAVY,EAAKd,GAA4Bc,EAAK+W,SAAS3X,IAAM,EAKvEsX,EAAM,EACND,EAAM,EACNG,GAAS,EACTD,GAAS,EACTE,GAAc,EACdL,EAAUrc,KAAK+I,cAAcG,OAG7BlJ,KAAK6M,mBAAmBgQ,wBAAwBjY,EAAGC,EAAG,UAAUiY,IAC1DA,EAAEC,qBACJR,EAAMO,EAAEC,mBAAmBzR,MAAQ,EAAI,SACvCmR,GAAS,GAEPK,EAAEE,qBACJV,EAAMQ,EAAEE,mBAAmB1R,MAAQ,EAAI,SACvCkR,GAAS,E,IAKbE,EAAc1c,KAAK2c,sBAAsBM,eAAejd,KAAKV,UAAWsF,EAAGC,GACvE6X,IACFH,GAAOvc,KAAK2M,oBAAoB6I,UAAY6G,EAAQa,0BAA4Bb,EAAQc,mCAAmC7R,MAAQ,EAAI,SACvImR,GAAS,EACLJ,EAAQe,sBACVd,EAAMD,EAAQe,oBAAoB9R,MAAQ,EAAI,SAC9CkR,GAAS,IAKbxc,KAAK6M,mBAAmBgQ,wBAAwBjY,EAAGC,EAAG,OAAOiY,IACvDA,EAAEC,qBACJR,EAAMO,EAAEC,mBAAmBzR,MAAQ,EAAI,SACvCmR,GAAS,GAEPK,EAAEE,qBACJV,EAAMQ,EAAEE,mBAAmB1R,MAAQ,EAAI,SACvCkR,GAAS,E,IAMTC,IAGAF,EAFEG,GAEe,SAAV7W,EAAKd,IAA4B,UAAgBwX,EAAM,UAG7C,SAAV1W,EAAKd,GAA6BwX,EAAM,UAG/CC,IAEFF,GAAiB,SAAVzW,EAAKb,IAA4B,SAAoBsX,EAAM,UAK/C,SAAjBtc,KAAK+U,OAAO/P,KACVyX,IAAWD,IAGXF,EAD4C,IAAxB,SAAjBtc,KAAK+U,OAAOhQ,KACS,UAAjB/E,KAAK+U,OAAO/P,GAAuG,SAA/BqX,EAAQxS,WAAWyB,MAAQ,EAAuC,UAErI,UAAjBtL,KAAK+U,OAAO/P,GAAuF,SAAjBhF,KAAK+U,OAAOhQ,GAEvGyX,GAAS,IAENC,GAAUD,IAGXD,EAD4C,IAAxB,SAAjBvc,KAAK+U,OAAO/P,KACS,SAAjBhF,KAAK+U,OAAOhQ,GAAqF,SAA/BsX,EAAQ9Q,WAAWD,MAAQ,EAAuC,UAEnH,SAAjBtL,KAAK+U,OAAOhQ,GAAqE,SAAjB/E,KAAK+U,OAAO/P,GAErFyX,GAAS,IAKbJ,OAAUpc,EAGVD,KAAK+U,OAAOhQ,GAAK0X,EAASF,EAAMvc,KAAK+U,OAAOhQ,GAC5C/E,KAAK+U,OAAO/P,GAAKwX,EAASF,EAAMtc,KAAK+U,OAAO/P,EAC9C,E,wHClIF,eAIA,SAUMqY,EAA4C,GAMlD,+BACEzW,EACA0M,EACApK,EACAoU,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,GAAY,IAAAC,gBAAeN,EAAiBC,EAAkBC,EAAiBC,EAAkBnK,EAASpK,EAAQwU,GAGxH,IAAK,IAAI3c,EAAI,EAAGA,EAAIsc,EAAe7X,OAAQzE,IAAK,CAC9C,MAAM8c,EAAQR,EAAetc,GACvB+c,EAAeD,EAAME,QAAQC,QAAQpX,GAC3C,GAAIkX,GAAgB,EAAG,CACrB,IAAI,IAAAG,cAAaJ,EAAMK,OAAQP,GAC7B,OAAOE,EAAM7V,MAGc,IAAzB6V,EAAME,QAAQvY,QAChBqY,EAAM7V,MAAM8I,UACZuM,EAAec,OAAOpd,EAAG,IAEzB8c,EAAME,QAAQI,OAAOL,EAAc,GAErC,K,EAKJ,IAAK,IAAI/c,EAAI,EAAGA,EAAIsc,EAAe7X,OAAQzE,IAAK,CAC9C,MAAM8c,EAAQR,EAAetc,GAC7B,IAAI,IAAAkd,cAAaJ,EAAMK,OAAQP,GAG7B,OADAE,EAAME,QAAQK,KAAKxX,GACZiX,EAAM7V,K,CAIjB,MAAMqW,EAAmBzX,EAAiBuH,MACpCmQ,EAAoC,CACxCtW,MAAO,IAAI,EAAA9H,aAAa6O,SAAU4O,EAAWU,EAAKE,gBAClDL,OAAQP,EACRI,QAAS,CAACnX,IAGZ,OADAyW,EAAee,KAAKE,GACbA,EAAStW,KAClB,EAMA,mCAAwCpB,GACtC,IAAK,IAAI7F,EAAI,EAAGA,EAAIsc,EAAe7X,OAAQzE,IAAK,CAC9C,MAAMyd,EAAQnB,EAAetc,GAAGgd,QAAQC,QAAQpX,GAChD,IAAe,IAAX4X,EAAc,CACyB,IAArCnB,EAAetc,GAAGgd,QAAQvY,QAE5B6X,EAAetc,GAAGiH,MAAM8I,UACxBuM,EAAec,OAAOpd,EAAG,IAGzBsc,EAAetc,GAAGgd,QAAQI,OAAOK,EAAO,GAE1C,K,EAGN,C,qHCtFA,eAEA,0BAA+BlB,EAAyBC,EAA0BC,EAAyBC,EAA0BnK,EAAqCpK,EAA0BwU,GAElM,MAAMe,EAA0B,CAC9BlT,WAAYrC,EAAOqC,WACnB1B,WAAYX,EAAOW,WACnBE,OAAQ,EAAA2U,WACR/I,aAAc,EAAA+I,WACdtB,oBAAqB,EAAAsB,WACrBC,+BAAgC,EAAAD,WAChCxB,0BAA2B,EAAAwB,WAC3BE,uCAAwC,EAAAF,WACxCvB,kCAAmC,EAAAuB,WAGnCrT,KAAMnC,EAAOmC,KAAKwT,QAClBC,cAAe5V,EAAO4V,cACtBC,kBAAmB7V,EAAO6V,mBAE5B,MAAO,CACLC,aAAc1L,EAAQ0L,aACtBtB,mBACA1H,cAAe1C,EAAQ0C,cACvBF,WAAYxC,EAAQwC,WACpBwH,gBAAiBA,EACjBC,iBAAkBA,EAClBC,gBAAiBA,EACjBC,iBAAkBA,EAClBxC,WAAY3H,EAAQ2H,WACpBD,SAAU1H,EAAQ0H,SAClBD,WAAYzH,EAAQyH,WACpBD,eAAgBxH,EAAQwH,eACxBmE,kBAAmB3L,EAAQ2L,kBAC3BC,2BAA4B5L,EAAQ4L,2BACpCC,qBAAsB7L,EAAQ6L,qBAC9BjW,OAAQuV,EAEZ,EAEA,wBAA6B1S,EAAqBD,GAChD,IAAK,IAAI/K,EAAI,EAAGA,EAAIgL,EAAE7C,OAAOmC,KAAK7F,OAAQzE,IACxC,GAAIgL,EAAE7C,OAAOmC,KAAKtK,GAAGuK,OAASQ,EAAE5C,OAAOmC,KAAKtK,GAAGuK,KAC7C,OAAO,EAGX,OAAOS,EAAE2R,mBAAqB5R,EAAE4R,kBAC5B3R,EAAEiT,eAAiBlT,EAAEkT,cACrBjT,EAAE+J,aAAehK,EAAEgK,YACnB/J,EAAEiK,gBAAkBlK,EAAEkK,eACtBjK,EAAEkP,aAAenP,EAAEmP,YACnBlP,EAAEiP,WAAalP,EAAEkP,UACjBjP,EAAEgP,aAAejP,EAAEiP,YACnBhP,EAAE+O,iBAAmBhP,EAAEgP,gBACvB/O,EAAEkT,oBAAsBnT,EAAEmT,mBAC1BlT,EAAEyR,kBAAoB1R,EAAE0R,iBACxBzR,EAAE0R,mBAAqB3R,EAAE2R,kBACzB1R,EAAEmT,6BAA+BpT,EAAEoT,4BACnCnT,EAAEoT,uBAAyBrT,EAAEqT,sBAC7BpT,EAAE7C,OAAOqC,WAAWD,OAASQ,EAAE5C,OAAOqC,WAAWD,MACjDS,EAAE7C,OAAOW,WAAWyB,OAASQ,EAAE5C,OAAOW,WAAWyB,IACvD,EAEA,sBAA2B8T,GACzB,OAA4C,WAAxB,SAAZA,IAA8F,WAAxB,SAAZA,EACpE,C,+HCrEA,eAEa,EAAArD,uBAAyB,IAEzB,EAAAsD,YAAc,GAId,EAAA/E,cAAoC,EAAAgF,WAAa,EAAAC,aAAe,SAAW,a,gGCDxF,gCAcE,WAAAlgB,CACUmgB,EACA7S,GADA,KAAA6S,gBAAAA,EACA,KAAA7S,oBAAAA,EAER3M,KAAKqT,iBAAkB,EACnBrT,KAAK2M,oBAAoB6I,WAC3BxV,KAAKyf,kBAET,CAEA,YAAWC,GAAsB,QAAS1f,KAAK2f,oBAAsB3f,KAAK4f,eAAiB,CAEpF,OAAA9O,GACD9Q,KAAK4f,iBACP5f,KAAK2M,oBAAoBwD,OAAO0P,cAAc7f,KAAK4f,gBACnD5f,KAAK4f,oBAAiB3f,GAEpBD,KAAK2f,qBACP3f,KAAK2M,oBAAoBwD,OAAOL,aAAa9P,KAAK2f,oBAClD3f,KAAK2f,wBAAqB1f,GAExBD,KAAK8f,kBACP9f,KAAK2M,oBAAoBwD,OAAO4P,qBAAqB/f,KAAK8f,iBAC1D9f,KAAK8f,qBAAkB7f,EAE3B,CAEO,qBAAAkS,GACDnS,KAAK0f,WAIT1f,KAAKggB,wBAA0BC,KAAKC,MAEpClgB,KAAKqT,iBAAkB,EAClBrT,KAAK8f,kBACR9f,KAAK8f,gBAAkB9f,KAAK2M,oBAAoBwD,OAAOgQ,uBAAsB,KAC3EngB,KAAKwf,kBACLxf,KAAK8f,qBAAkB7f,CAAS,KAGtC,CAEQ,gBAAAwf,CAAiBW,EAAsBC,KAEzCrgB,KAAK4f,iBACP5f,KAAK2M,oBAAoBwD,OAAO0P,cAAc7f,KAAK4f,gBACnD5f,KAAK4f,oBAAiB3f,GAOxBD,KAAK2f,mBAAqB3f,KAAK2M,oBAAoBwD,OAAOR,YAAW,KAGnE,GAAI3P,KAAKggB,wBAAyB,CAChC,MAAMM,EA1ES,KA0EgBL,KAAKC,MAAQlgB,KAAKggB,yBAEjD,GADAhgB,KAAKggB,6BAA0B/f,EAC3BqgB,EAAO,EAET,YADAtgB,KAAKyf,iBAAiBa,E,CAM1BtgB,KAAKqT,iBAAkB,EACvBrT,KAAK8f,gBAAkB9f,KAAK2M,oBAAoBwD,OAAOgQ,uBAAsB,KAC3EngB,KAAKwf,kBACLxf,KAAK8f,qBAAkB7f,CAAS,IAIlCD,KAAK4f,eAAiB5f,KAAK2M,oBAAoBwD,OAAOoQ,aAAY,KAEhE,GAAIvgB,KAAKggB,wBAAyB,CAGhC,MAAMM,EA/FO,KA+FkBL,KAAKC,MAAQlgB,KAAKggB,yBAGjD,OAFAhgB,KAAKggB,6BAA0B/f,OAC/BD,KAAKyf,iBAAiBa,E,CAKxBtgB,KAAKqT,iBAAmBrT,KAAKqT,gBAC7BrT,KAAK8f,gBAAkB9f,KAAK2M,oBAAoBwD,OAAOgQ,uBAAsB,KAC3EngB,KAAKwf,kBACLxf,KAAK8f,qBAAkB7f,CAAS,GAChC,GA1Ga,IA2GC,GACjBmgB,EACL,CAEO,KAAA1O,GACL1R,KAAKqT,iBAAkB,EACnBrT,KAAK4f,iBACP5f,KAAK2M,oBAAoBwD,OAAO0P,cAAc7f,KAAK4f,gBACnD5f,KAAK4f,oBAAiB3f,GAEpBD,KAAK2f,qBACP3f,KAAK2M,oBAAoBwD,OAAOL,aAAa9P,KAAK2f,oBAClD3f,KAAK2f,wBAAqB1f,GAExBD,KAAK8f,kBACP9f,KAAK2M,oBAAoBwD,OAAO4P,qBAAqB/f,KAAK8f,iBAC1D9f,KAAK8f,qBAAkB7f,EAE3B,CAEO,MAAA2R,GAEL5R,KAAK0R,QAEL1R,KAAKggB,6BAA0B/f,EAC/BD,KAAKyf,mBACLzf,KAAKmS,uBACP,E,qKC3IF,eASa,EAAAqO,wBAA2E,CAEtF,IAAK,CAAC,CAAE5b,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAG7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAG7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACzD,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACzD,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACzD,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACzD,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACzD,IAAK,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAGzD,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAGrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IACrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAGrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAEjE,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAEjE,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAEjE,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAEjE,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAEjE,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAGzH,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAErC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAErC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAErC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAErC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAGrC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAErC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAErC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAErC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAErC,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAGrC,KAAa,CACX,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GACnD,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GACnD,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GACnD,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAGrD,KAAa,CACX,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GACnD,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GACnD,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GACnD,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,IAGrD,KAAa,CAAC,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,GAAK,CAAEzL,EAAG,EAAGC,EAAG,EAAGuL,EAAG,EAAGC,EAAG,KASnE,MAAMoQ,EAAgF,CAEpF,IAAK,CACH,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZ,IAAK,CACH,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,IAAK,CACH,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAgDK,EAAAC,sBAAwH,CAEnI,IAAK,CAAE,EAAgB,eACvB,IAAK,CAAE,EAAc,eACrB,IAAK,CAAE,EAAgB,eACvB,IAAK,CAAE,EAAc,eACrB,IAAK,CAAE,EAAgB,uBACvB,IAAK,CAAE,EAAc,uBACrB,IAAK,CAAE,EAAgB,sBACvB,IAAK,CAAE,EAAc,sBACrB,IAAK,CAAE,EAAgB,sBACvB,IAAK,CAAE,EAAc,sBACrB,IAAK,CAAE,EAAgB,sBACvB,IAAK,CAAE,EAAc,sBACrB,IAAK,CAAE,EAAgB,4BACvB,IAAK,CAAE,EAAc,4BACrB,IAAK,CAAE,EAAgB,4BACvB,IAAK,CAAE,EAAc,4BACrB,IAAK,CAAE,EAAgB,4BACvB,IAAK,CAAE,EAAc,4BACrB,IAAK,CAAE,EAAgB,4BACvB,IAAK,CAAE,EAAc,4BACrB,IAAK,CAAE,EAAgB,2BACvB,IAAK,CAAE,EAAc,2BACrB,IAAK,CAAE,EAAgB,gBACvB,IAAK,CAAE,EAAc,gBACrB,IAAK,CAAE,EAAgB,gBACvB,IAAK,CAAE,EAAc,gBACrB,IAAK,CAAE,EAAgB,gBACvB,IAAK,CAAE,EAAc,gBACrB,IAAK,CAAE,EAAgB,gBACvB,IAAK,CAAE,EAAc,gBAGrB,IAAK,CAAE,EAAgB,CAACC,EAAIC,IAAO,MAAM,GAAKA,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,KACxF,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,IAAI,GAAKD,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,OACtF,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,aAAa,GAAKA,QAAS,GAAKA,SAAU,GAAKA,QAAS,GAAKA,KAChG,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,IAAI,GAAKD,QAAS,GAAKA,eAAgB,GAAKA,SAAU,GAAKA,OAC9F,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OACpI,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,SAAU,GAAKA,cAAe,GAAKA,SAAU,GAAKA,KAChG,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,IAAI,GAAKD,QAAS,GAAKA,eAAgB,GAAKA,SAAU,GAAKA,OAC9F,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OACpI,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,aAAa,GAAKA,QAAS,GAAKA,SAAU,GAAKA,QAAS,GAAKA,KAChG,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,UAAU,GAAKD,SAAU,GAAKA,QAAS,GAAKA,SAAU,GAAKA,OAC9F,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OACpI,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,SAAU,GAAKA,cAAe,GAAKA,SAAU,GAAKA,KAChG,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,UAAU,GAAKD,SAAU,GAAKA,QAAS,GAAKA,SAAU,GAAKA,OAC9F,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OACpI,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,mBAA+B,GAAKA,QAAS,GAAKA,SAAU,GAAKA,QAAS,GAAKA,KAClH,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,IAAI,GAAKD,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,cACpG,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,IAAI,GAAKD,QAAS,GAAKA,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OAChK,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,kBAA8B,GAAKA,SAAU,GAAKA,QAAS,GAAKA,SAAU,GAAKA,KAClH,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,UAAU,GAAKD,SAAU,GAAKA,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,OAC3G,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,IAAI,GAAKD,QAAS,GAAKA,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OAChK,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,SAAU,GAAKA,WACvG,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,gBAA4B,GAAKD,SAAU,GAAKA,QAAS,GAAKA,SAAU,GAAKA,OAChH,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,QAAS,GAAKA,QAAS,GAAKA,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OAChK,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,aAAa,GAAKA,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,KAC7G,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,gBAA4B,GAAKD,SAAU,GAAKA,QAAS,GAAKA,SAAU,GAAKA,OAChH,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,QAAS,GAAKA,QAAS,GAAKA,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OAChK,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,kBAA8B,GAAKA,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,KAChH,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,gBAA4B,GAAKD,QAAS,GAAKA,QAAS,GAAKA,QAAS,GAAKA,OAC9G,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,MAAM,GAAKA,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,UAAW,GAAKC,MAAO,GAAKD,KAAM,GAAKC,MAAO,GAAKD,OAG1O,IAAK,CAAE,EAAgB,aACvB,IAAK,CAAE,EAAgB,aACvB,IAAK,CAAE,EAAgB,uBAGvB,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,cAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,sBAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,eAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,uBAC3F,IAAK,CAAE,EAAgB,cAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,eAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,sBAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,eAC3F,IAAK,CAAE,EAAgB,cAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,uBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,eAC3F,IAAK,CAAE,EAAgB,cAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,2BAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,2BAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,cAAsD,EAAc,eAC3F,IAAK,CAAE,EAAgB,2BAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,2BAAsD,EAAc,gBAC3F,IAAK,CAAE,EAAgB,cAAsD,EAAc,eAC3F,IAAK,CAAE,EAAgB,sBAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,sBAC3F,IAAK,CAAE,EAAgB,qBAAsD,EAAc,uBAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,4BAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,4BAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,4BAC3F,IAAK,CAAE,EAAgB,eAAsD,EAAc,4BAG3F,IAAK,CAAE,EAAgB,+BACvB,IAAK,CAAE,EAAc,+BACrB,IAAK,CAAE,EAAgB,yDACvB,IAAK,CAAE,EAAc,yDACrB,IAAK,CAAE,EAAgB,+DACvB,IAAK,CAAE,EAAc,+DACrB,IAAK,CAAE,EAAgB,+BACvB,IAAK,CAAE,EAAc,+BACrB,IAAK,CAAE,EAAgB,yDACvB,IAAK,CAAE,EAAc,yDACrB,IAAK,CAAE,EAAgB,wDACvB,IAAK,CAAE,EAAc,wDAGrB,IAAK,CAAE,EAAgB,CAACA,EAAIC,IAAO,aAAa,GAAMA,EAAK,IAAM,UAAW,GAAMA,EAAK,IAAM,iBAC7F,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,aAAa,GAAMA,EAAK,IAAM,UAAW,GAAMA,EAAK,IAAM,iBAC7F,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,aAAa,GAAMA,EAAK,IAAM,UAAW,GAAMA,EAAK,IAAM,iBAC7F,IAAK,CAAE,EAAgB,CAACD,EAAIC,IAAO,aAAa,GAAMA,EAAK,IAAM,UAAW,GAAMA,EAAK,IAAM,kBA0BlF,EAAAC,qBAA0D,CAErE,IAAY,CAAE/D,EAAG,kBAAmBlG,KAAM,EAAiBkK,aAAc,GAEzE,IAAY,CAAEhE,EAAG,wBAAyBlG,KAAM,EAAmBmK,YAAa,EAAGD,aAAc,GAEjG,IAAY,CAAEhE,EAAG,kBAAmBlG,KAAM,EAAiBmK,YAAa,GAExE,IAAY,CAAEjE,EAAG,sBAAuBlG,KAAM,EAAmBmK,YAAa,EAAGD,aAAc,GAE/F,IAAY,CAAEhE,EAAG,uDAAwDlG,KAAM,EAAiBkK,aAAc,GAE9G,IAAY,CAAEhE,EAAG,kDAAmDlG,KAAM,EAAmBkK,aAAc,GAE3G,IAAY,CAAEhE,EAAG,uDAAwDlG,KAAM,EAAiBmK,YAAa,GAE7G,IAAY,CAAEjE,EAAG,kDAAmDlG,KAAM,EAAmBmK,YAAa,GAE1G,IAAY,CAAEjE,EAAG,6BAA8BlG,KAAM,GAErD,IAAY,CAAEkG,EAAG,oBAAqBlG,KAAM,EAAmBmK,YAAa,EAAGD,aAAc,GAE7F,IAAY,CAAEhE,EAAG,6BAA8BlG,KAAM,GAErD,IAAY,CAAEkG,EAAG,6BAA8BlG,KAAM,GAErD,IAAY,CAAEkG,EAAG,oBAAqBlG,KAAM,EAAmBmK,YAAa,EAAGD,aAAc,GAE7F,IAAY,CAAEhE,EAAG,6BAA8BlG,KAAM,IAGvD,EAAAiK,qBAAA,KAAmC,EAAAA,qBAAqB,KAExD,EAAAA,qBAAA,KAAmC,EAAAA,qBAAqB,KAMxD,6BACEG,EACAC,EACAC,EACAC,EACA7D,EACAC,EACAvC,EACA0C,GAEA,MAAM0D,EAAyB,EAAAZ,wBAAwBS,GACvD,GAAIG,EAEF,OAwBJ,SACEJ,EACAK,EACAH,EACAC,EACA7D,EACAC,GAEA,IAAK,IAAIxc,EAAI,EAAGA,EAAIsgB,EAAe7b,OAAQzE,IAAK,CAC9C,MAAMugB,EAAMD,EAAetgB,GACrBwgB,EAAUjE,EAAkB,EAC5BkE,EAAUjE,EAAmB,EACnCyD,EAAIlH,SACFoH,EAAUI,EAAI1c,EAAI2c,EAClBJ,EAAUG,EAAIzc,EAAI2c,EAClBF,EAAIlR,EAAImR,EACRD,EAAIjR,EAAImR,E,CAGd,CA5CIC,CAAqBT,EAAKI,EAAwBF,EAASC,EAAS7D,EAAiBC,IAC9E,EAGT,MAAMmE,EAAoBjB,EAA4BQ,GACtD,GAAIS,EAEF,OAyCJ,SACEV,EACAK,EACAH,EACAC,EACA7D,EACAC,GAEA,IAAIoE,EAAaC,EAAe/M,IAAIwM,GAC/BM,IACHA,EAAa,IAAIE,IACjBD,EAAena,IAAI4Z,EAAgBM,IAErC,MAAM3H,EAAYgH,EAAIhH,UACtB,GAAyB,iBAAdA,EACT,MAAM,IAAI3K,MAAM,8BAA8B2K,MAEhD,IAAI8H,EAAUH,EAAW9M,IAAImF,GAC7B,IAAK8H,EAAS,CACZ,MAAMhc,EAAQub,EAAe,GAAG7b,OAC1Ba,EAASgb,EAAe7b,OACxBuc,EAAYhT,SAASC,cAAc,UACzC+S,EAAUjc,MAAQA,EAClBic,EAAU1b,OAASA,EACnB,MAAM2b,GAAS,IAAA1hB,cAAayhB,EAAU3S,WAAW,OAC3C6S,EAAY,IAAIC,UAAUpc,EAAOO,GAGvC,IAAIuF,EACAC,EACAC,EACAC,EACJ,GAAIiO,EAAUmI,WAAW,KACvBvW,EAAIwW,SAASpI,EAAU6E,MAAM,EAAG,GAAI,IACpChT,EAAIuW,SAASpI,EAAU6E,MAAM,EAAG,GAAI,IACpC/S,EAAIsW,SAASpI,EAAU6E,MAAM,EAAG,GAAI,IACpC9S,EAAIiO,EAAUxU,OAAS,GAAK4c,SAASpI,EAAU6E,MAAM,EAAG,GAAI,KAAO,MAC9D,KAAI7E,EAAUmI,WAAW,QAG9B,MAAM,IAAI9S,MAAM,sCAAsC2K,kCAFpDpO,EAAGC,EAAGC,EAAGC,GAAKiO,EAAUqI,UAAU,EAAGrI,EAAUxU,OAAS,GAAG8c,MAAM,KAAKC,KAAInZ,GAAKoZ,WAAWpZ,I,CAK9F,IAAK,IAAIvE,EAAI,EAAGA,EAAIwB,EAAQxB,IAC1B,IAAK,IAAID,EAAI,EAAGA,EAAIkB,EAAOlB,IACzBqd,EAAUQ,KAAuB,GAAjB5d,EAAIiB,EAAQlB,IAAcgH,EAC1CqW,EAAUQ,KAAuB,GAAjB5d,EAAIiB,EAAQlB,GAAS,GAAKiH,EAC1CoW,EAAUQ,KAAuB,GAAjB5d,EAAIiB,EAAQlB,GAAS,GAAKkH,EAC1CmW,EAAUQ,KAAuB,GAAjB5d,EAAIiB,EAAQlB,GAAS,GAAKyc,EAAexc,GAAGD,IAAU,IAAJmH,GAGtEiW,EAAOU,aAAaT,EAAW,EAAG,GAClCH,GAAU,IAAAxhB,cAAa0gB,EAAI2B,cAAcZ,EAAW,OACpDJ,EAAWla,IAAIuS,EAAW8H,E,CAE5Bd,EAAIhH,UAAY8H,EAChBd,EAAIlH,SAASoH,EAASC,EAAS7D,EAAiBC,EAClD,CAnGIqF,CAAgB5B,EAAKU,EAAmBR,EAASC,EAAS7D,EAAiBC,IACpE,EAGT,MAAMsF,EAAuB,EAAAnC,sBAAsBO,GACnD,GAAI4B,EAEF,OAsIJ,SACE7B,EACAK,EACAH,EACAC,EACA7D,EACAC,EACAG,GAEAsD,EAAI8B,YAAc9B,EAAIhH,UACtB,IAAK,MAAOe,EAAYgI,KAAiBC,OAAOC,QAAQ5B,GAAiB,CAGvE,IAAI6B,EAFJlC,EAAIvG,YACJuG,EAAImC,UAAYzF,EAAmB0F,OAAOhB,SAASrH,GAKjDmI,EAH0B,mBAAjBH,EAGYA,EAFV,IACA,IAAMxF,EAAmBD,GAGfyF,EAEvB,IAAK,MAAMM,KAAeH,EAAmBZ,MAAM,KAAM,CACvD,MAAM1L,EAAOyM,EAAY,GACnBC,EAAIC,EAA0B3M,GACpC,IAAK0M,EAAG,CACN/T,QAAQ4H,MAAM,4CAA4CP,MAC1D,Q,CAEF,MAAM4M,EAAiBH,EAAYhB,UAAU,GAAGC,MAAM,KACjDkB,EAAK,IAAOA,EAAK,IAGtBF,EAAEtC,EAAKyC,EAAcD,EAAMlG,EAAiBC,EAAkB2D,EAASC,GAAS,EAAMzD,G,CAExFsD,EAAI0C,SACJ1C,EAAI2C,W,CAER,CA5KIC,CAAmB5C,EAAK6B,EAAsB3B,EAASC,EAAS7D,EAAiBC,EAAkBG,IAC5F,EAGT,MAAMmG,EAAsB,EAAAhD,qBAAqBI,GACjD,QAAI4C,IAyKN,SACE7C,EACAK,EACAH,EACAC,EACA7D,EACAC,EACAvC,EACA0C,G,QAGA,MAAMoG,EAAa,IAAIC,OACvBD,EAAWpJ,KAAKwG,EAASC,EAAS7D,EAAiBC,GACnDyD,EAAIrG,KAAKmJ,GAET9C,EAAIvG,YAEJ,MAAMuJ,EAAehJ,EAAW,GAChCgG,EAAImC,UAAYzF,EAAmBsG,EACnC,IAAK,MAAMX,KAAehC,EAAevE,EAAEwF,MAAM,KAAM,CACrD,MAAM1L,EAAOyM,EAAY,GACnBC,EAAIC,EAA0B3M,GACpC,IAAK0M,EAAG,CACN/T,QAAQ4H,MAAM,4CAA4CP,MAC1D,Q,CAEF,MAAM4M,EAAiBH,EAAYhB,UAAU,GAAGC,MAAM,KACjDkB,EAAK,IAAOA,EAAK,IAGtBF,EAAEtC,EAAKyC,EACLD,EACAlG,EACAC,EACA2D,EACAC,GACA,EACAzD,GAC2B,QAA1B,EAAA2D,EAAeN,mBAAW,QAAI,IAAMiD,EAAe,IACxB,QAA3B,EAAA3C,EAAeP,oBAAY,QAAI,IAAMkD,EAAe,I,CAG7B,IAAxB3C,EAAezK,MACjBoK,EAAI8B,YAAc9B,EAAIhH,UACtBgH,EAAI0C,UAEJ1C,EAAIta,OAENsa,EAAI2C,WACN,CAzNIM,CAAkBjD,EAAK6C,EAAqB3C,EAASC,EAAS7D,EAAiBC,EAAkBvC,EAAU0C,IACpG,EAIX,EAuBA,MAAMkE,EAAoF,IAAIC,IA+L9F,SAAS5N,EAAMuC,EAAeE,EAAarW,EAAc,GACvD,OAAOD,KAAKsW,IAAItW,KAAKC,IAAImW,EAAOE,GAAMrW,EACxC,CAEA,MAAMkjB,EAAsD,CAC1D,EAAK,CAACvC,EAA+BwC,IAAmBxC,EAAIkD,cAAcV,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAC5H,EAAK,CAACxC,EAA+BwC,IAAmBxC,EAAImD,OAAOX,EAAK,GAAIA,EAAK,IACjF,EAAK,CAACxC,EAA+BwC,IAAmBxC,EAAIoD,OAAOZ,EAAK,GAAIA,EAAK,KAGnF,SAASC,EAAcD,EAAgBa,EAAmBC,EAAoBpD,EAAiBC,EAAiBoD,EAAkB7G,EAA0BqD,EAAsB,EAAGD,EAAuB,GAC1M,MAAM/L,EAASyO,EAAKjB,KAAInZ,GAAKoZ,WAAWpZ,IAAMgZ,SAAShZ,KAEvD,GAAI2L,EAAOvP,OAAS,EAClB,MAAM,IAAI6J,MAAM,qCAGlB,IAAK,IAAIzK,EAAI,EAAGA,EAAImQ,EAAOvP,OAAQZ,GAAK,EAEtCmQ,EAAOnQ,IAAMyf,EAAatD,EAAcrD,EAAqBoD,EAAepD,EAGxE6G,GAAyB,IAAdxP,EAAOnQ,KACpBmQ,EAAOnQ,GAAKqP,EAAM7T,KAAK2V,MAAMhB,EAAOnQ,GAAK,IAAO,GAAKyf,EAAW,IAGlEtP,EAAOnQ,IAAMsc,EAAWH,EAAcrD,EAGxC,IAAK,IAAI7Y,EAAI,EAAGA,EAAIkQ,EAAOvP,OAAQX,GAAK,EAEtCkQ,EAAOlQ,IAAMyf,EAGTC,GAAyB,IAAdxP,EAAOlQ,KACpBkQ,EAAOlQ,GAAKoP,EAAM7T,KAAK2V,MAAMhB,EAAOlQ,GAAK,IAAO,GAAKyf,EAAY,IAGnEvP,EAAOlQ,IAAMsc,EAGf,OAAOpM,CACT,C,sGCzqBA,eAGA,wCAA6CyP,EAAsBC,EAA0CC,GAK3G,IAAIC,EAAuC,IAAIF,EAAaG,gBAAgB3B,IAC1E,MAAMpF,EAAQoF,EAAQ4B,MAAMhH,GAAUA,EAAMiH,SAAWN,IACvD,IAAK3G,EACH,OAIF,KAAM,8BAA+BA,GAGnC,OAFA8G,SAAAA,EAAUI,kBACVJ,OAAW1kB,GAKb,MAAM6F,EAAQ+X,EAAMmH,0BAA0B,GAAGC,WAC3C5e,EAASwX,EAAMmH,0BAA0B,GAAGE,UAC9Cpf,EAAQ,GAAKO,EAAS,GACxBqe,EAAS5e,EAAOO,E,IAGpB,IACEse,EAASQ,QAAQX,EAAS,CAAElD,IAAK,CAAC,6B,CAClC,SACAqD,EAASI,aACTJ,OAAW1kB,C,CAEb,OAAO,IAAAiB,eAAa,IAAMyjB,aAAQ,EAARA,EAAUI,cACtC,C,cC1BA,SAAgBK,EAAiBC,GAI/B,OAAO,OAAUA,GAAaA,GAAa,KAC7C,C,kLAZA,wBAAgC7O,GAC9B,IAAKA,EACH,MAAM,IAAInH,MAAM,2BAElB,OAAOmH,CACT,EAEA,qBAOA,sCAA2C6O,GACzC,OAAO,OAAUA,GAAaA,GAAa,KAC7C,EAMA,2CAAgDA,GAC9C,OAAOD,EAAiBC,IAL1B,SAA2BA,GACzB,OAAO,MAAUA,GAAaA,GAAa,IAC7C,CAGwCC,CAAkBD,EAC1D,EAEA,oCACE,MAAO,CACL/T,IAAK,CACHlL,OAiBG,CACLN,MAAO,EACPO,OAAQ,GAlBNR,KAgBG,CACLC,MAAO,EACPO,OAAQ,IAhBRT,OAAQ,CACNQ,OAaG,CACLN,MAAO,EACPO,OAAQ,GAdNR,KAYG,CACLC,MAAO,EACPO,OAAQ,GAbNN,KAAM,CACJD,MAAO,EACPO,OAAQ,EACRJ,KAAM,EACNC,IAAK,IAIb,C,mGC1CA,MAAMqf,EAYJ,WAAAlmB,GACEW,KAAK2G,OACP,CAEO,KAAAA,GACL3G,KAAKwlB,cAAe,EACpBxlB,KAAKgS,kBAAmB,EACxBhS,KAAKylB,iBAAmB,EACxBzlB,KAAK0lB,eAAiB,EACtB1lB,KAAK2lB,uBAAyB,EAC9B3lB,KAAK4lB,qBAAuB,EAC5B5lB,KAAK6lB,SAAW,EAChB7lB,KAAK8lB,OAAS,EACd9lB,KAAK+lB,oBAAiB9lB,EACtBD,KAAKgmB,kBAAe/lB,CACtB,CAEO,MAAAgS,CAAOrL,EAAoBkL,EAAqCC,EAAmCC,GAA4B,GAIpI,GAHAhS,KAAK+lB,eAAiBjU,EACtB9R,KAAKgmB,aAAejU,GAEfD,IAAUC,GAAQD,EAAM,KAAOC,EAAI,IAAMD,EAAM,KAAOC,EAAI,GAE7D,YADA/R,KAAK2G,QAKP,MAAM8e,EAAmB3T,EAAM,GAAKlL,EAASuN,OAAOC,OAAO6R,UACrDP,EAAiB3T,EAAI,GAAKnL,EAASuN,OAAOC,OAAO6R,UACjDN,EAAyBvlB,KAAKsW,IAAI+O,EAAkB,GACpDG,EAAuBxlB,KAAKC,IAAIqlB,EAAgB9e,EAASE,KAAO,GAGlE6e,GAA0B/e,EAASE,MAAQ8e,EAAuB,EACpE5lB,KAAK2G,SAIP3G,KAAKwlB,cAAe,EACpBxlB,KAAKgS,iBAAmBA,EACxBhS,KAAKylB,iBAAmBA,EACxBzlB,KAAK0lB,eAAiBA,EACtB1lB,KAAK2lB,uBAAyBA,EAC9B3lB,KAAK4lB,qBAAuBA,EAC5B5lB,KAAK6lB,SAAW/T,EAAM,GACtB9R,KAAK8lB,OAAS/T,EAAI,GACpB,CAEO,cAAAkL,CAAerW,EAAoBhC,EAAWC,GACnD,QAAK7E,KAAKwlB,eAGV3gB,GAAK+B,EAASuN,OAAOC,OAAO6R,UACxBjmB,KAAKgS,iBACHhS,KAAK6lB,UAAY7lB,KAAK8lB,OACjBlhB,GAAK5E,KAAK6lB,UAAYhhB,GAAK7E,KAAK2lB,wBACrC/gB,EAAI5E,KAAK8lB,QAAUjhB,GAAK7E,KAAK4lB,qBAE1BhhB,EAAI5E,KAAK6lB,UAAYhhB,GAAK7E,KAAK2lB,wBACpC/gB,GAAK5E,KAAK8lB,QAAUjhB,GAAK7E,KAAK4lB,qBAE1B/gB,EAAI7E,KAAKylB,kBAAoB5gB,EAAI7E,KAAK0lB,gBAC3C1lB,KAAKylB,mBAAqBzlB,KAAK0lB,gBAAkB7gB,IAAM7E,KAAKylB,kBAAoB7gB,GAAK5E,KAAK6lB,UAAYjhB,EAAI5E,KAAK8lB,QAC/G9lB,KAAKylB,iBAAmBzlB,KAAK0lB,gBAAkB7gB,IAAM7E,KAAK0lB,gBAAkB9gB,EAAI5E,KAAK8lB,QACrF9lB,KAAKylB,iBAAmBzlB,KAAK0lB,gBAAkB7gB,IAAM7E,KAAKylB,kBAAoB7gB,GAAK5E,KAAK6lB,SAC7F,EAGF,wCACE,OAAO,IAAIN,CACb,C,uFCrFA,eACA,SAEA,SACA,SACA,SACA,SAEA,SACA,SAEA,SAMMW,EAA0C,CAC9C5f,YAAa,EACb6f,gBAAiB,CAAEvhB,EAAG,EAAGC,EAAG,GAC5B0B,yBAA0B,CAAE3B,EAAG,EAAGC,EAAG,GACrCmB,OAAQ,CAAEpB,EAAG,EAAGC,EAAG,GACnBsB,KAAM,CAAEvB,EAAG,EAAGC,EAAG,GACjB4B,cAAe,CAAE7B,EAAG,EAAGC,EAAG,IA0B5B,IAAI9F,EAEJ,MAAamB,EAQX,SAAWsG,GAA4D,OAAOxG,KAAKomB,MAAQ,CAsB3F,WAAA/mB,CACmBgnB,EACAC,EACAC,GAFA,KAAAF,UAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,gBAAAA,EAhCX,KAAAC,YAAsB,EAEtB,KAAAC,UAA0E,IAAI,EAAAC,WAC9E,KAAAC,kBAAkF,IAAI,EAAAD,WAGtF,KAAAN,OAAsB,GAItB,KAAAQ,aAA4B,GAM5B,KAAAC,iBAAiC,CAAE3gB,IAAK,EAAGD,KAAM,EAAG6gB,OAAQ,EAAGC,MAAO,GACtE,KAAAC,mBAAoC,IAAI,EAAA/Q,cAExC,KAAAgR,aAAuB,IAKd,KAAAzZ,yBAA2B,IAAI,EAAAH,aAChC,KAAAI,wBAA0BzN,KAAKwN,yBAAyBD,MACvD,KAAAG,4BAA8B,IAAI,EAAAL,aACnC,KAAAM,2BAA6B3N,KAAK0N,4BAA4BH,MA8CtE,KAAA2Z,oBAAqB,EAvC3BlnB,KAAKmnB,iBACLnnB,KAAKonB,WAAaC,EAChBhB,EAC+B,EAA/BrmB,KAAKsmB,QAAQhJ,gBAAsBgK,EACnCtnB,KAAKsmB,QAAQ/I,iBAAmB+J,GAElCtnB,KAAKunB,SAAU,IAAAjnB,cAAaN,KAAKonB,WAAWhY,WAAW,KAAM,CAC3D+J,MAAOnZ,KAAKsmB,QAAQrH,kBACpBuI,oBAAoB,IAExB,CAEO,OAAA1W,GACL,IAAK,MAAM2W,KAAQznB,KAAKwG,MACtBihB,EAAKrhB,OAAO6S,SAEdjZ,KAAKwN,yBAAyBsD,SAChC,CAEO,MAAA2B,GACAzS,KAAKwmB,aACRxmB,KAAK0nB,YACL1nB,KAAKwmB,YAAa,EAEtB,CAEQ,SAAAkB,GAEN,MAAMC,EAAQ,IAAI,EAAAC,cAClB,IAAK,IAAI7mB,EAAI,GAAIA,EAAI,IAAKA,IACxB4mB,EAAME,SAAQ,KACZ,IAAK7nB,KAAKymB,UAAU5R,IAAI9T,EAAG,EAAA+mB,cAAe,EAAAA,cAAe,EAAAC,aAAc,CACrE,MAAMC,EAAkBhoB,KAAKioB,aAAalnB,EAAG,EAAA+mB,cAAe,EAAAA,cAAe,EAAAC,aAC3E/nB,KAAKymB,UAAUhf,IAAI1G,EAAG,EAAA+mB,cAAe,EAAAA,cAAe,EAAAC,YAAaC,E,IAIzE,CAGO,UAAAvjB,GACL,OAAOzE,KAAKknB,kBACd,CAEO,YAAAtU,GACL,GAAoC,IAAhC5S,KAAKomB,OAAO,GAAG8B,WAAWtjB,GAA2C,IAAhC5E,KAAKomB,OAAO,GAAG8B,WAAWrjB,EAAnE,CAGA,IAAK,MAAM4iB,KAAQznB,KAAKomB,OACtBqB,EAAK9gB,QAEP3G,KAAKymB,UAAU9f,QACf3G,KAAK2mB,kBAAkBhgB,QACvB3G,KAAKwmB,YAAa,C,CACpB,CAEQ,cAAAW,GAKFjnB,EAAaC,eAAiBH,KAAKomB,OAAO5gB,QAAUpF,KAAKsW,IAAI,EAAGxW,EAAaC,cAAgB,IAC/FgoB,gBAAe,KAGb,MAAMC,EAAcpoB,KAAKomB,OAAOiC,QAAOjf,GACb,EAAjBA,EAAEhD,OAAON,QAAc5F,EAAaO,gBAAkB,QAC5D6nB,MAAK,CAACvc,EAAGD,IACNA,EAAE1F,OAAON,QAAUiG,EAAE3F,OAAON,MACvBgG,EAAE1F,OAAON,MAAQiG,EAAE3F,OAAON,MAE5BgG,EAAEyc,eAAiBxc,EAAEwc,iBAE9B,IAAIC,GAAa,EACbriB,EAAO,EACX,IAAK,IAAIpF,EAAI,EAAGA,EAAIqnB,EAAY5iB,OAAQzE,IACtC,GAAIqnB,EAAYrnB,GAAGqF,OAAON,QAAUK,EAClCqiB,EAAYznB,EACZoF,EAAOiiB,EAAYrnB,GAAGqF,OAAON,WACxB,GAAI/E,EAAIynB,GAAc,EAC3B,MAKJ,MAAMC,EAAeL,EAAYvJ,MAAM2J,EAAWA,EAAY,GACxDE,EAA4BD,EAAalG,KAAInZ,GAAKA,EAAEuf,OAAO,GAAGriB,cAAagiB,MAAK,CAACvc,EAAGD,IAAMC,EAAID,EAAI,GAAK,IACvG8c,EAAkBF,EAA0B,GAG5CG,EAAa7oB,KAAK8oB,YAAYL,EAAcG,GAClDC,EAAWlhB,UAGX3H,KAAKomB,OAAOwC,GAAmBC,EAG/B,IAAK,IAAI9nB,EAAI2nB,EAA0BljB,OAAS,EAAGzE,GAAK,EAAGA,IACzDf,KAAK+oB,YAAYL,EAA0B3nB,IAI7Cf,KAAKknB,oBAAqB,EAC1BlnB,KAAKwN,yBAAyBqC,KAAKgZ,EAAWziB,OAAO,IAKzD,MAAM4iB,EAAU,IAAIC,EAAUjpB,KAAKqmB,UAAWrmB,KAAKinB,cAInD,OAHAjnB,KAAKomB,OAAOhI,KAAK4K,GACjBhpB,KAAK4mB,aAAaxI,KAAK4K,GACvBhpB,KAAKwN,yBAAyBqC,KAAKmZ,EAAQ5iB,QACpC4iB,CACT,CAEQ,WAAAF,CAAYL,EAA2BG,GAC7C,MAAMM,EAA4C,EAA/BT,EAAa,GAAGriB,OAAON,MACpC+iB,EAAa,IAAII,EAAUjpB,KAAKqmB,UAAW6C,EAAYT,GAC7D,IAAK,MAAO1nB,EAAGooB,KAAMV,EAAaxF,UAAW,CAC3C,MAAM/B,EAAUngB,EAAIooB,EAAE/iB,OAAON,MAAQojB,EAC/B/H,EAAU/gB,KAAKuF,MAAM5E,EAAI,GAAKooB,EAAE/iB,OAAOC,OAC7CwiB,EAAW7H,IAAIoI,UAAUD,EAAE/iB,OAAQ8a,EAASC,GAC5C,IAAK,MAAMtV,KAAKsd,EAAER,OAChB9c,EAAEvF,YAAcsiB,EAChB/c,EAAEpF,cAAc7B,EAAIiH,EAAE1F,KAAKvB,EAAIskB,EAC/Brd,EAAEpF,cAAc5B,EAAIgH,EAAE1F,KAAKtB,EAAIqkB,EAC/Brd,EAAEsa,gBAAgBvhB,GAAKsc,EACvBrV,EAAEsa,gBAAgBthB,GAAKsc,EACvBtV,EAAEtF,yBAAyB3B,EAAIiH,EAAEsa,gBAAgBvhB,EAAIskB,EACrDrd,EAAEtF,yBAAyB1B,EAAIgH,EAAEsa,gBAAgBthB,EAAIqkB,EAGvDlpB,KAAK0N,4BAA4BmC,KAAKsZ,EAAE/iB,QAGxC,MAAMoY,EAAQxe,KAAK4mB,aAAa5I,QAAQmL,IACzB,IAAX3K,GACFxe,KAAK4mB,aAAazI,OAAOK,EAAO,E,CAGpC,OAAOqK,CACT,CAEQ,WAAAE,CAAYM,GAClBrpB,KAAKomB,OAAOjI,OAAOkL,EAAW,GAC9B,IAAK,IAAIrV,EAAIqV,EAAWrV,EAAIhU,KAAKomB,OAAO5gB,OAAQwO,IAAK,CACnD,MAAMsV,EAAgBtpB,KAAKomB,OAAOpS,GAClC,IAAK,MAAMnI,KAAKyd,EAAcX,OAC5B9c,EAAEvF,cAEJgjB,EAAc3hB,S,CAElB,CAEO,8BAAAlC,CAA+BP,EAAeH,EAAYC,EAAYC,EAAaskB,GACxF,OAAOvpB,KAAKwpB,iBAAiBxpB,KAAK2mB,kBAAmBzhB,EAAOH,EAAIC,EAAIC,EAAKskB,EAC3E,CAEO,kBAAA7jB,CAAmBZ,EAAcC,EAAYC,EAAYC,EAAaskB,GAC3E,OAAOvpB,KAAKwpB,iBAAiBxpB,KAAKymB,UAAW3hB,EAAMC,EAAIC,EAAIC,EAAKskB,EAClE,CAKQ,gBAAAC,CACNC,EACAC,EACA3kB,EACAC,EACAC,EACAskB,GAAgC,GAOhC,OALAxqB,EAAS0qB,EAAS5U,IAAI6U,EAAK3kB,EAAIC,EAAIC,GAC9BlG,IACHA,EAASiB,KAAKioB,aAAayB,EAAK3kB,EAAIC,EAAIC,EAAKskB,GAC7CE,EAAShiB,IAAIiiB,EAAK3kB,EAAIC,EAAIC,EAAKlG,IAE1BA,CACT,CAEQ,sBAAA4qB,CAAuBC,GAC7B,GAAIA,GAAO5pB,KAAKsmB,QAAQpd,OAAOmC,KAAK7F,OAClC,MAAM,IAAI6J,MAAM,0BAA4Bua,GAE9C,OAAO5pB,KAAKsmB,QAAQpd,OAAOmC,KAAKue,EAClC,CAEQ,mBAAAC,CAAoBC,EAAqBC,EAAiBvf,EAAkBoP,GAClF,GAAI5Z,KAAKsmB,QAAQrH,kBAIf,OAAO,EAAAP,WAGT,IAAI3J,EACJ,OAAQ+U,GACN,KAAK,SACL,KAAK,SACH/U,EAAS/U,KAAK2pB,uBAAuBI,GACrC,MACF,KAAK,SACH,MAAMC,EAAM,EAAA/T,cAAcgU,WAAWF,GAErChV,EAAS,EAAAzJ,KAAK4e,QAAQF,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAC1C,MAEF,QAEIjV,EADEvK,EACO,EAAAwB,MAAMme,OAAOnqB,KAAKsmB,QAAQpd,OAAOqC,YAEjCvL,KAAKsmB,QAAQpd,OAAOW,WAKnC,OAAOkL,CACT,CAEQ,mBAAAqV,CAAoBrlB,EAAY+kB,EAAqBC,EAAiB/kB,EAAYqlB,EAAqBC,EAAiB9f,EAAkBoP,EAAc2Q,EAAeC,GAC7K,MAAMC,EAAuBzqB,KAAK0qB,yBAAyB3lB,EAAI+kB,EAAaC,EAAS/kB,EAAIqlB,EAAaC,GAAS,EAAOC,EAAM3Q,EAAK4Q,GACjI,GAAIC,EACF,OAAOA,EAGT,IAAI1V,EACJ,OAAQsV,GACN,KAAK,SACL,KAAK,SACCrqB,KAAKsmB,QAAQpH,4BAA8BqL,GAAQD,EAAU,IAC/DA,GAAW,GAEbvV,EAAS/U,KAAK2pB,uBAAuBW,GACrC,MACF,KAAK,SACH,MAAMN,EAAM,EAAA/T,cAAcgU,WAAWK,GACrCvV,EAAS,EAAAzJ,KAAK4e,QAAQF,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAC1C,MAEF,QAEIjV,EADEvK,EACOxK,KAAKsmB,QAAQpd,OAAOW,WAEpB7J,KAAKsmB,QAAQpd,OAAOqC,WAcnC,OATIvL,KAAKsmB,QAAQrH,oBACflK,EAAS,EAAA/I,MAAMme,OAAOpV,IAIpB6E,IACF7E,EAAS,EAAA/I,MAAM2e,gBAAgB5V,EAAQ,EAAAsK,cAGlCtK,CACT,CAEQ,sBAAA6V,CAAuBd,EAAqBC,EAAiBvf,GACnE,OAAQsf,GACN,KAAK,SACL,KAAK,SACH,OAAO9pB,KAAK2pB,uBAAuBI,GAASze,KAC9C,KAAK,SACH,OAAOye,GAAW,EAEpB,QACE,OAAIvf,EACKxK,KAAKsmB,QAAQpd,OAAOqC,WAAWD,KAEjCtL,KAAKsmB,QAAQpd,OAAOW,WAAWyB,KAE5C,CAEQ,sBAAAuf,CAAuBR,EAAqBC,EAAiB9f,EAAkB+f,GACrF,OAAQF,GACN,KAAK,SACL,KAAK,SAIH,OAHIrqB,KAAKsmB,QAAQpH,4BAA8BqL,GAAQD,EAAU,IAC/DA,GAAW,GAENtqB,KAAK2pB,uBAAuBW,GAAShf,KAC9C,KAAK,SACH,OAAOgf,GAAW,EAEpB,QACE,OAAI9f,EACKxK,KAAKsmB,QAAQpd,OAAOW,WAAWyB,KAEjCtL,KAAKsmB,QAAQpd,OAAOqC,WAAWD,KAE5C,CAEQ,wBAAAof,CAAyB3lB,EAAY+kB,EAAqBC,EAAiB/kB,EAAYqlB,EAAqBC,EAAiB9f,EAAkB+f,EAAe3Q,EAAc4Q,GAClL,GAA0C,IAAtCxqB,KAAKsmB,QAAQnH,sBAA8BqL,EAC7C,OAIF,MAAMM,EAAQ9qB,KAAK+qB,kBAAkBnR,GAC/BoR,EAAgBF,EAAMG,SAASlmB,EAAIC,GACzC,QAAsB/E,IAAlB+qB,EACF,OAAOA,QAAiB/qB,EAG1B,MAAMirB,EAASlrB,KAAK4qB,uBAAuBd,EAAaC,EAASvf,GAC3D2gB,EAASnrB,KAAK6qB,uBAAuBR,EAAaC,EAAS9f,EAAS+f,GAGpExV,EAAS,EAAAzJ,KAAK8f,oBAAoBF,EAAQC,EAAQnrB,KAAKsmB,QAAQnH,sBAAwBvF,EAAM,EAAI,IAEvG,IAAK7E,EAEH,YADA+V,EAAMO,SAAStmB,EAAIC,EAAI,MAIzB,MAAMgH,EAAQ,EAAAV,KAAK4e,QAChBnV,GAAU,GAAM,IAChBA,GAAU,GAAM,IAChBA,GAAU,EAAK,KAIlB,OAFA+V,EAAMO,SAAStmB,EAAIC,EAAIgH,GAEhBA,CACT,CAEQ,iBAAA+e,CAAkBnR,GACxB,OAAIA,EACK5Z,KAAKsmB,QAAQpd,OAAO6V,kBAEtB/e,KAAKsmB,QAAQpd,OAAO4V,aAC7B,CAEQ,YAAAmJ,CAAaqD,EAA8BvmB,EAAYC,EAAYC,EAAaskB,GAAgC,GACtH,MAAMrkB,EAA+B,iBAAhBomB,EAA2BC,OAAOC,aAAaF,GAAeA,EAQ7EG,EAAerrB,KAAKC,IAAIL,KAAKsmB,QAAQhJ,gBAAkBld,KAAKsW,IAAIxR,EAAMM,OAAQ,GAAK8hB,EAA8BtnB,KAAKinB,cACxHjnB,KAAKonB,WAAWthB,MAAQ2lB,IAC1BzrB,KAAKonB,WAAWthB,MAAQ2lB,GAG1B,MAAMC,EAAgBtrB,KAAKC,IAAIL,KAAKsmB,QAAQ/I,iBAAmB+J,EAA8BtnB,KAAKinB,cAWlG,GAVIjnB,KAAKonB,WAAW/gB,OAASqlB,IAC3B1rB,KAAKonB,WAAW/gB,OAASqlB,GAE3B1rB,KAAKunB,QAAQoE,OAEb3rB,KAAKgnB,mBAAmBhiB,GAAKA,EAC7BhF,KAAKgnB,mBAAmBjiB,GAAKA,EAC7B/E,KAAKgnB,mBAAmBpK,SAAS3X,IAAMA,EAEnBjF,KAAKgnB,mBAAmB4E,cAE1C,OAAO1F,EAGT,MAAMqE,IAASvqB,KAAKgnB,mBAAmBpM,SACjCpQ,IAAYxK,KAAKgnB,mBAAmB6E,YACpCjS,IAAQ5Z,KAAKgnB,mBAAmB8E,QAChCC,IAAW/rB,KAAKgnB,mBAAmBnM,WACnCmR,IAAchsB,KAAKgnB,mBAAmBiF,cACtCC,IAAkBlsB,KAAKgnB,mBAAmBmF,kBAC1CC,IAAapsB,KAAKgnB,mBAAmBqF,aAC3C,IAAI/B,EAAUtqB,KAAKgnB,mBAAmBsF,aAClCjC,EAAcrqB,KAAKgnB,mBAAmBuF,iBACtCxC,EAAU/pB,KAAKgnB,mBAAmBwF,aAClC1C,EAAc9pB,KAAKgnB,mBAAmByF,iBAC1C,GAAIjiB,EAAS,CACX,MAAMkiB,EAAOpC,EACbA,EAAUP,EACVA,EAAU2C,EACV,MAAMC,EAAQtC,EACdA,EAAcP,EACdA,EAAc6C,C,CAIhB,MAAMC,EAAkB5sB,KAAK6pB,oBAAoBC,EAAaC,EAASvf,EAASoP,GAGhF5Z,KAAKunB,QAAQsF,yBAA2B,OACxC7sB,KAAKunB,QAAQvN,UAAY4S,EAAgBtb,IACzCtR,KAAKunB,QAAQzN,SAAS,EAAG,EAAG9Z,KAAKonB,WAAWthB,MAAO9F,KAAKonB,WAAW/gB,QACnErG,KAAKunB,QAAQsF,yBAA2B,cAGxC,MAAM9R,EAAawP,EAAOvqB,KAAKsmB,QAAQxL,eAAiB9a,KAAKsmB,QAAQvL,WAC/D+R,EAAYf,EAAS,SAAW,GACtC/rB,KAAKunB,QAAQpN,KACX,GAAG2S,KAAa/R,KAAc/a,KAAKsmB,QAAQtL,SAAWhb,KAAKsmB,QAAQ5I,sBAAsB1d,KAAKsmB,QAAQrL,aACxGjb,KAAKunB,QAAQlN,aAAe,EAAAC,cAE5B,MAAMyS,EAAkC,IAAjB7nB,EAAMM,SAAgB,IAAA4f,kBAAiBlgB,EAAM8nB,WAAW,IACzEC,EAA4C,IAAjB/nB,EAAMM,SAAgB,IAAA0nB,4BAA2BhoB,EAAM8nB,WAAW,IAC7FG,EAAkBntB,KAAKoqB,oBAAoBrlB,EAAI+kB,EAAaC,EAAS/kB,EAAIqlB,EAAaC,EAAS9f,EAASoP,EAAK2Q,GAAM,IAAAC,iCAAgCtlB,EAAM8nB,WAAW,KAC1KhtB,KAAKunB,QAAQvN,UAAYmT,EAAgB7b,IAGzC,MAAM8b,EAAUH,EAA2B,EAAI3F,EAG/C,IAAI+F,GAAc,GACgB,IAA9BrtB,KAAKsmB,QAAQtH,eACfqO,GAAc,IAAAC,mBAAkBttB,KAAKunB,QAASriB,EAAOkoB,EAASA,EAASptB,KAAKsmB,QAAQhJ,gBAAiBtd,KAAKsmB,QAAQ/I,iBAAkBvd,KAAKsmB,QAAQtL,SAAUhb,KAAKsmB,QAAQ5I,mBAM1K,IAEI6P,EAFAC,GAA6BT,EAUjC,GANEQ,EADyB,iBAAhBjC,EACCtrB,KAAKumB,gBAAgBkH,QAAQnC,GAE7BtrB,KAAKumB,gBAAgBmH,mBAAmBpC,GAIhDU,EAAW,CACbhsB,KAAKunB,QAAQoE,OACb,MAAMxI,EAAY/iB,KAAKsW,IAAI,EAAGtW,KAAKuF,MAAM3F,KAAKsmB,QAAQtL,SAAWhb,KAAKsmB,QAAQ5I,iBAAmB,KAE3FyD,EAAUgC,EAAY,GAAM,EAAI,GAAM,EAI5C,GAHAnjB,KAAKunB,QAAQpE,UAAYA,EAGrBnjB,KAAKgnB,mBAAmB2G,0BAC1B3tB,KAAKunB,QAAQzE,YAAc9iB,KAAKunB,QAAQvN,eACnC,GAAIha,KAAKgnB,mBAAmB4G,sBACjCJ,GAA4B,EAC5BxtB,KAAKunB,QAAQzE,YAAc,OAAO,EAAA7M,cAAcgU,WAAWjqB,KAAKgnB,mBAAmB6G,qBAAqBC,KAAK,YACxG,CACLN,GAA4B,EAC5B,IAAIxoB,EAAKhF,KAAKgnB,mBAAmB6G,oBAC7B7tB,KAAKsmB,QAAQpH,4BAA8Blf,KAAKgnB,mBAAmBpM,UAAY5V,EAAK,IACtFA,GAAM,GAERhF,KAAKunB,QAAQzE,YAAc9iB,KAAK2pB,uBAAuB3kB,GAAIsM,G,CAI7DtR,KAAKunB,QAAQ9M,YACb,MAAMsT,EAAQX,EACRY,EAAO5tB,KAAKyV,KAAKuX,EAAUptB,KAAKsmB,QAAQ7I,kBAAoB0D,GAAWoI,EAAmC,EAAZpG,EAAgB,GAC9G8K,EAAOD,EAAO7K,EACd+K,EAAOF,EAAmB,EAAZ7K,EAEpB,IAAK,IAAIpiB,EAAI,EAAGA,EAAIwsB,EAASxsB,IAAK,CAChCf,KAAKunB,QAAQoE,OACb,MAAMwC,EAAUJ,EAAQhtB,EAAIf,KAAKsmB,QAAQhJ,gBACnC8Q,EAAWL,GAAShtB,EAAI,GAAKf,KAAKsmB,QAAQhJ,gBAC1C+Q,EAASF,EAAUnuB,KAAKsmB,QAAQhJ,gBAAkB,EACxD,OAAQtd,KAAKgnB,mBAAmBpK,SAAS0R,gBACvC,KAAK,EACHtuB,KAAKunB,QAAQnD,OAAO+J,EAASH,GAC7BhuB,KAAKunB,QAAQpD,OAAOiK,EAAUJ,GAC9BhuB,KAAKunB,QAAQnD,OAAO+J,EAASD,GAC7BluB,KAAKunB,QAAQpD,OAAOiK,EAAUF,GAC9B,MACF,KAAK,EAGH,MAAMK,EAAYpL,GAAa,EAAI+K,EAAO9tB,KAAKyV,KAAKuX,EAAUptB,KAAKsmB,QAAQ7I,iBAAmB0F,EAAY,GAAKhC,EACzGqN,EAAYrL,GAAa,EAAI6K,EAAO5tB,KAAKyV,KAAKuX,EAAUptB,KAAKsmB,QAAQ7I,iBAAmB0F,EAAY,GAAKhC,EAIzG2C,EAAa,IAAIC,OACvBD,EAAWpJ,KAAKyT,EAASH,EAAMhuB,KAAKsmB,QAAQhJ,gBAAiB4Q,EAAOF,GACpEhuB,KAAKunB,QAAQ5M,KAAKmJ,GAGlB9jB,KAAKunB,QAAQnD,OAAO+J,EAAUnuB,KAAKsmB,QAAQhJ,gBAAkB,EAAG2Q,GAChEjuB,KAAKunB,QAAQrD,cACXiK,EAAUnuB,KAAKsmB,QAAQhJ,gBAAkB,EAAGkR,EAC5CL,EAASK,EACTL,EAASF,GAEXjuB,KAAKunB,QAAQrD,cACXiK,EAASI,EACTF,EAAQE,EACRF,EAAQJ,GAEVjuB,KAAKunB,QAAQrD,cACXmK,EAAQG,EACRJ,EAAUI,EACVJ,EAAUH,GAEZjuB,KAAKunB,QAAQrD,cACXkK,EAAUG,EACVH,EAAWpuB,KAAKsmB,QAAQhJ,gBAAkB,EAAGiR,EAC7CH,EAAWpuB,KAAKsmB,QAAQhJ,gBAAkB,EAAG2Q,GAE/C,MACF,KAAK,EACHjuB,KAAKunB,QAAQkH,YAAY,CAACruB,KAAK2V,MAAMoN,GAAY/iB,KAAK2V,MAAMoN,KAC5DnjB,KAAKunB,QAAQnD,OAAO+J,EAASH,GAC7BhuB,KAAKunB,QAAQpD,OAAOiK,EAAUJ,GAC9B,MACF,KAAK,EACHhuB,KAAKunB,QAAQkH,YAAY,CAAiC,EAAhCzuB,KAAKsmB,QAAQ5I,iBAAsD,EAAhC1d,KAAKsmB,QAAQ5I,mBAC1E1d,KAAKunB,QAAQnD,OAAO+J,EAASH,GAC7BhuB,KAAKunB,QAAQpD,OAAOiK,EAAUJ,GAC9B,MAEF,QACEhuB,KAAKunB,QAAQnD,OAAO+J,EAASH,GAC7BhuB,KAAKunB,QAAQpD,OAAOiK,EAAUJ,GAGlChuB,KAAKunB,QAAQ7D,SACb1jB,KAAKunB,QAAQmH,S,CAOf,GALA1uB,KAAKunB,QAAQmH,WAKRrB,GAAertB,KAAKsmB,QAAQtL,UAAY,KAGtChb,KAAKsmB,QAAQrH,mBAA+B,MAAV/Z,EAAe,CAGpDlF,KAAKunB,QAAQoE,OACb3rB,KAAKunB,QAAQlN,aAAe,aAC5B,MAAMsU,EAAU3uB,KAAKunB,QAAQqH,YAAY1pB,GAEzC,GADAlF,KAAKunB,QAAQmH,UACT,6BAA8BC,GAAWA,EAAQE,yBAA2B,EAAG,CAEjF7uB,KAAKunB,QAAQoE,OAIb,MAAM7H,EAAa,IAAIC,OACvBD,EAAWpJ,KAAKqT,EAAOC,EAAO5tB,KAAKyV,KAAKsN,EAAY,GAAInjB,KAAKsmB,QAAQhJ,gBAAkBiQ,EAASW,EAAOF,EAAO5tB,KAAKyV,KAAKsN,EAAY,IACpInjB,KAAKunB,QAAQ5M,KAAKmJ,GAClB9jB,KAAKunB,QAAQpE,UAA4C,EAAhCnjB,KAAKsmB,QAAQ5I,iBACtC1d,KAAKunB,QAAQzE,YAAc8J,EAAgBtb,IAC3CtR,KAAKunB,QAAQuH,WAAW5pB,EAAOkoB,EAASA,EAAUptB,KAAKsmB,QAAQ7I,kBAC/Dzd,KAAKunB,QAAQmH,S,GAOrB,GAAItC,EAAU,CACZ,MAAMjJ,EAAY/iB,KAAKsW,IAAI,EAAGtW,KAAKuF,MAAM3F,KAAKsmB,QAAQtL,SAAWhb,KAAKsmB,QAAQ5I,iBAAmB,KAC3FyD,EAAUgC,EAAY,GAAM,EAAI,GAAM,EAC5CnjB,KAAKunB,QAAQpE,UAAYA,EACzBnjB,KAAKunB,QAAQzE,YAAc9iB,KAAKunB,QAAQvN,UACxCha,KAAKunB,QAAQ9M,YACbza,KAAKunB,QAAQnD,OAAOgJ,EAASA,EAAUjM,GACvCnhB,KAAKunB,QAAQpD,OAAOiJ,EAAUptB,KAAKsmB,QAAQ9I,gBAAkB+P,EAASH,EAAUjM,GAChFnhB,KAAKunB,QAAQ7D,Q,CAUf,GANK2J,GACHrtB,KAAKunB,QAAQ/M,SAAStV,EAAOkoB,EAASA,EAAUptB,KAAKsmB,QAAQ7I,kBAKjD,MAAVvY,IAAkBlF,KAAKsmB,QAAQrH,kBAAmB,CACpD,IAAI8P,EAAqBC,EAAWhvB,KAAKunB,QAAQ0H,aAAa7B,EAASA,EAASptB,KAAKsmB,QAAQhJ,gBAAiBtd,KAAKsmB,QAAQ/I,kBAAmBqP,EAAiBO,EAAiBK,GAChL,GAAIuB,EACF,IAAK,IAAI/oB,EAAS,EAAGA,GAAU,IAC7BhG,KAAKunB,QAAQoE,OACb3rB,KAAKunB,QAAQvN,UAAY4S,EAAgBtb,IACzCtR,KAAKunB,QAAQzN,SAAS,EAAG,EAAG9Z,KAAKonB,WAAWthB,MAAO9F,KAAKonB,WAAW/gB,QACnErG,KAAKunB,QAAQmH,UACb1uB,KAAKunB,QAAQ/M,SAAStV,EAAOkoB,EAASA,EAAUptB,KAAKsmB,QAAQ7I,iBAAmBzX,GAChF+oB,EAAqBC,EAAWhvB,KAAKunB,QAAQ0H,aAAa7B,EAASA,EAASptB,KAAKsmB,QAAQhJ,gBAAiBtd,KAAKsmB,QAAQ/I,kBAAmBqP,EAAiBO,EAAiBK,GACvKuB,GAP2B/oB,K,CAetC,GAAIkmB,EAAe,CACjB,MAAM/I,EAAY/iB,KAAKsW,IAAI,EAAGtW,KAAKuF,MAAM3F,KAAKsmB,QAAQtL,SAAWhb,KAAKsmB,QAAQ5I,iBAAmB,KAC3FyD,EAAUnhB,KAAKunB,QAAQpE,UAAY,GAAM,EAAI,GAAM,EACzDnjB,KAAKunB,QAAQpE,UAAYA,EACzBnjB,KAAKunB,QAAQzE,YAAc9iB,KAAKunB,QAAQvN,UACxCha,KAAKunB,QAAQ9M,YACbza,KAAKunB,QAAQnD,OAAOgJ,EAASA,EAAUhtB,KAAKuF,MAAM3F,KAAKsmB,QAAQ7I,iBAAmB,GAAK0D,GACvFnhB,KAAKunB,QAAQpD,OAAOiJ,EAAUptB,KAAKsmB,QAAQ9I,gBAAkB+P,EAASH,EAAUhtB,KAAKuF,MAAM3F,KAAKsmB,QAAQ7I,iBAAmB,GAAK0D,GAChInhB,KAAKunB,QAAQ7D,Q,CAGf1jB,KAAKunB,QAAQmH,UAIb,MAAMzM,EAAYjiB,KAAKunB,QAAQ0H,aAC7B,EAAG,EAAGjvB,KAAKonB,WAAWthB,MAAO9F,KAAKonB,WAAW/gB,QAI/C,IAAI6oB,EAQJ,GAJEA,EAHGlvB,KAAKsmB,QAAQrH,kBA2VtB,SAAoCgD,GAClC,IAAK,IAAIjc,EAAS,EAAGA,EAASic,EAAUQ,KAAKjd,OAAQQ,GAAU,EAC7D,GAAIic,EAAUQ,KAAKzc,EAAS,GAAK,EAC/B,OAAO,EAGX,OAAO,CACT,CA/VgBmpB,CAA2BlN,GAF3B+M,EAAW/M,EAAW2K,EAAiBO,EAAiBK,GAMhE0B,EACF,OAAOhJ,EAGT,MAAM8B,EAAkBhoB,KAAKovB,sBAAsBnN,EAAWjiB,KAAK6mB,iBAAkB4E,EAAcwB,EAA0BI,EAAaD,GAG1I,IAAIiC,EACAC,EACJ,OAAa,CAEX,GAAiC,IAA7BtvB,KAAK4mB,aAAaphB,OAAc,CAClC,MAAMwjB,EAAUhpB,KAAKmnB,iBACrBkI,EAAarG,EACbsG,EAAYtG,EAAQd,WACpBoH,EAAUjpB,OAAS2hB,EAAgB7hB,KAAKtB,EACxC,K,CAIFwqB,EAAarvB,KAAK4mB,aAAa5mB,KAAK4mB,aAAaphB,OAAS,GAC1D8pB,EAAYD,EAAWnH,WACvB,IAAK,MAAMiB,KAAKnpB,KAAK4mB,aACfoB,EAAgB7hB,KAAKtB,GAAKskB,EAAEjB,WAAW7hB,SACzCgpB,EAAalG,EACbmG,EAAYnG,EAAEjB,YAUlB,IAAK,IAAInnB,EAAIf,KAAK4mB,aAAaphB,OAAS,EAAGzE,GAAK,EAAGA,IACjD,IAAK,MAAM2S,KAAO1T,KAAK4mB,aAAa7lB,GAAGwuB,UACjC7b,EAAIrN,QAAUipB,EAAUjpB,QAAU2hB,EAAgB7hB,KAAKtB,GAAK6O,EAAIrN,SAClEgpB,EAAarvB,KAAK4mB,aAAa7lB,GAC/BuuB,EAAY5b,GAQlB,GAAI4b,EAAUzqB,EAAImjB,EAAgB7hB,KAAKtB,GAAKwqB,EAAWjpB,OAAOC,QAAUipB,EAAUjpB,OAAS2hB,EAAgB7hB,KAAKtB,EAAI,EAA+B,CAGjJ,IAAI2qB,GAAoB,EACxB,GAAIH,EAAWnH,WAAWrjB,EAAIwqB,EAAWnH,WAAW7hB,OAAS2hB,EAAgB7hB,KAAKtB,GAAKwqB,EAAWjpB,OAAOC,OAAQ,CAE/G,IAAIopB,EACJ,IAAK,MAAMtG,KAAKnpB,KAAK4mB,aACnB,GAAIuC,EAAEjB,WAAWrjB,EAAIskB,EAAEjB,WAAW7hB,OAAS2hB,EAAgB7hB,KAAKtB,EAAIskB,EAAE/iB,OAAOC,OAAQ,CACnFopB,EAAgBtG,EAChB,K,CAGJ,GAAIsG,EACFJ,EAAaI,MACR,CAEL,MAAMzG,EAAUhpB,KAAKmnB,iBACrBkI,EAAarG,EACbsG,EAAYtG,EAAQd,WACpBoH,EAAUjpB,OAAS2hB,EAAgB7hB,KAAKtB,EACxC2qB,GAAoB,C,EAGnBA,IAECH,EAAWnH,WAAW7hB,OAAS,GACjCgpB,EAAWE,UAAUnR,KAAKiR,EAAWnH,YAEvCoH,EAAY,CACV1qB,EAAG,EACHC,EAAGwqB,EAAWnH,WAAWrjB,EAAIwqB,EAAWnH,WAAW7hB,OACnDA,OAAQ2hB,EAAgB7hB,KAAKtB,GAE/BwqB,EAAWE,UAAUnR,KAAKkR,GAG1BD,EAAWnH,WAAa,CACtBtjB,EAAG,EACHC,EAAGyqB,EAAUzqB,EAAIyqB,EAAUjpB,OAC3BA,OAAQ,G,CAOd,GAAIipB,EAAU1qB,EAAIojB,EAAgB7hB,KAAKvB,GAAKyqB,EAAWjpB,OAAON,MAC5D,MAIEwpB,IAAcD,EAAWnH,YAC3BoH,EAAU1qB,EAAI,EACd0qB,EAAUzqB,GAAKyqB,EAAUjpB,OACzBipB,EAAUjpB,OAAS,GAEnBgpB,EAAWE,UAAUpR,OAAOkR,EAAWE,UAAUvR,QAAQsR,GAAY,E,CAiCzE,OA5BAtH,EAAgB1hB,YAActG,KAAKomB,OAAOpI,QAAQqR,GAClDrH,EAAgB7B,gBAAgBvhB,EAAI0qB,EAAU1qB,EAC9CojB,EAAgB7B,gBAAgBthB,EAAIyqB,EAAUzqB,EAC9CmjB,EAAgBzhB,yBAAyB3B,EAAI0qB,EAAU1qB,EAAIyqB,EAAWjpB,OAAON,MAC7EkiB,EAAgBzhB,yBAAyB1B,EAAIyqB,EAAUzqB,EAAIwqB,EAAWjpB,OAAOC,OAG7E2hB,EAAgBvhB,cAAc7B,GAAKyqB,EAAWjpB,OAAON,MACrDkiB,EAAgBvhB,cAAc5B,GAAKwqB,EAAWjpB,OAAOC,OAIrDipB,EAAUjpB,OAASjG,KAAKsW,IAAI4Y,EAAUjpB,OAAQ2hB,EAAgB7hB,KAAKtB,GACnEyqB,EAAU1qB,GAAKojB,EAAgB7hB,KAAKvB,EAGpCyqB,EAAWrO,IAAI0B,aACbT,EACA+F,EAAgB7B,gBAAgBvhB,EAAI5E,KAAK6mB,iBAAiB5gB,KAC1D+hB,EAAgB7B,gBAAgBthB,EAAI7E,KAAK6mB,iBAAiB3gB,IAC1DlG,KAAK6mB,iBAAiB5gB,KACtBjG,KAAK6mB,iBAAiB3gB,IACtB8hB,EAAgB7hB,KAAKvB,EACrBojB,EAAgB7hB,KAAKtB,GAEvBwqB,EAAWK,SAAS1H,GACpBqH,EAAW1nB,UAEJqgB,CACT,CASQ,qBAAAoH,CAAsBnN,EAAsB0N,EAA2BlE,EAAsBmE,EAA0BvC,EAAsBD,GACnJuC,EAAYzpB,IAAM,EAClB,MAAMG,EAASupB,EAAkB5vB,KAAKsmB,QAAQ/I,iBAAmBvd,KAAKonB,WAAW/gB,OAC3EP,EAAQ8pB,EAAkB5vB,KAAKsmB,QAAQhJ,gBAAkBmO,EAC/D,IAAIoE,GAAQ,EACZ,IAAK,IAAIhrB,EAAI,EAAGA,EAAIwB,EAAQxB,IAAK,CAC/B,IAAK,IAAID,EAAI,EAAGA,EAAIkB,EAAOlB,IAAK,CAC9B,MAAMkrB,EAAcjrB,EAAI7E,KAAKonB,WAAWthB,MAAQ,EAAQ,EAAJlB,EAAQ,EAC5D,GAAoC,IAAhCqd,EAAUQ,KAAKqN,GAAoB,CACrCH,EAAYzpB,IAAMrB,EAClBgrB,GAAQ,EACR,K,EAGJ,GAAIA,EACF,K,CAGJF,EAAY1pB,KAAO,EACnB4pB,GAAQ,EACR,IAAK,IAAIjrB,EAAI,EAAGA,EAAIwoB,EAAUtnB,EAAOlB,IAAK,CACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIwB,EAAQxB,IAAK,CAC/B,MAAMirB,EAAcjrB,EAAI7E,KAAKonB,WAAWthB,MAAQ,EAAQ,EAAJlB,EAAQ,EAC5D,GAAoC,IAAhCqd,EAAUQ,KAAKqN,GAAoB,CACrCH,EAAY1pB,KAAOrB,EACnBirB,GAAQ,EACR,K,EAGJ,GAAIA,EACF,K,CAGJF,EAAY5I,MAAQjhB,EACpB+pB,GAAQ,EACR,IAAK,IAAIjrB,EAAIwoB,EAAUtnB,EAAQ,EAAGlB,GAAKwoB,EAASxoB,IAAK,CACnD,IAAK,IAAIC,EAAI,EAAGA,EAAIwB,EAAQxB,IAAK,CAC/B,MAAMirB,EAAcjrB,EAAI7E,KAAKonB,WAAWthB,MAAQ,EAAQ,EAAJlB,EAAQ,EAC5D,GAAoC,IAAhCqd,EAAUQ,KAAKqN,GAAoB,CACrCH,EAAY5I,MAAQniB,EACpBirB,GAAQ,EACR,K,EAGJ,GAAIA,EACF,K,CAGJF,EAAY7I,OAASzgB,EACrBwpB,GAAQ,EACR,IAAK,IAAIhrB,EAAIwB,EAAS,EAAGxB,GAAK,EAAGA,IAAK,CACpC,IAAK,IAAID,EAAI,EAAGA,EAAIkB,EAAOlB,IAAK,CAC9B,MAAMkrB,EAAcjrB,EAAI7E,KAAKonB,WAAWthB,MAAQ,EAAQ,EAAJlB,EAAQ,EAC5D,GAAoC,IAAhCqd,EAAUQ,KAAKqN,GAAoB,CACrCH,EAAY7I,OAASjiB,EACrBgrB,GAAQ,EACR,K,EAGJ,GAAIA,EACF,K,CAGJ,MAAO,CACLvpB,YAAa,EACb6f,gBAAiB,CAAEvhB,EAAG,EAAGC,EAAG,GAC5B0B,yBAA0B,CAAE3B,EAAG,EAAGC,EAAG,GACrCsB,KAAM,CACJvB,EAAG+qB,EAAY5I,MAAQ4I,EAAY1pB,KAAO,EAC1CpB,EAAG8qB,EAAY7I,OAAS6I,EAAYzpB,IAAM,GAE5CO,cAAe,CACb7B,EAAI+qB,EAAY5I,MAAQ4I,EAAY1pB,KAAO,EAC3CpB,EAAI8qB,EAAY7I,OAAS6I,EAAYzpB,IAAM,GAE7CF,OAAQ,CACNpB,GAAI+qB,EAAY1pB,KAAOmnB,GAAYwC,GAAmBvC,EAAejtB,KAAKuF,OAAO3F,KAAKsmB,QAAQhJ,gBAAkBtd,KAAKsmB,QAAQ9I,iBAAmB,GAAK,GACrJ3Y,GAAI8qB,EAAYzpB,IAAMknB,GAAYwC,GAAmBvC,EAA2C,IAA5BrtB,KAAKsmB,QAAQxQ,WAAmB,EAAI1V,KAAK2V,OAAO/V,KAAKsmB,QAAQ/I,iBAAmBvd,KAAKsmB,QAAQ7I,kBAAoB,GAAK,IAGhM,EAn3BF,iBAs3BA,MAAMwL,EAKJ,kBAAWV,GAA2B,OAAOvoB,KAAK+vB,aAAe/vB,KAAKoG,OAAON,MAAQ9F,KAAKoG,OAAOC,OAAS,CAG1G,UAAWsiB,GAA4C,OAAO3oB,KAAKgwB,OAAS,CACrE,QAAAN,CAASO,GACdjwB,KAAKgwB,QAAQ5R,KAAK6R,GAClBjwB,KAAK+vB,aAAeE,EAAM9pB,KAAKvB,EAAIqrB,EAAM9pB,KAAKtB,CAChD,CAwBA,WAAAxF,CACE0P,EACA5I,EACA+pB,GAEA,GArCM,KAAAH,YAAsB,EAGb,KAAAC,QAA8B,GAUxC,KAAAroB,QAAU,EAYV,KAAAugB,WAAkC,CACvCtjB,EAAG,EACHC,EAAG,EACHwB,OAAQ,GAEM,KAAAkpB,UAAmC,GAO7CW,EACF,IAAK,MAAM/G,KAAK+G,EACdlwB,KAAKgwB,QAAQ5R,QAAQ+K,EAAER,QACvB3oB,KAAK+vB,aAAe5G,EAAE4G,YAG1B/vB,KAAKoG,OAASihB,EAAatY,EAAU5I,EAAMA,GAI3CnG,KAAKghB,KAAM,IAAA1gB,cAAaN,KAAKoG,OAAOgJ,WAAW,KAAM,CAAE+J,OAAO,IAChE,CAEO,KAAAxS,GACL3G,KAAKghB,IAAIjH,UAAU,EAAG,EAAG/Z,KAAKoG,OAAON,MAAO9F,KAAKoG,OAAOC,QACxDrG,KAAKkoB,WAAWtjB,EAAI,EACpB5E,KAAKkoB,WAAWrjB,EAAI,EACpB7E,KAAKkoB,WAAW7hB,OAAS,EACzBrG,KAAKuvB,UAAU/pB,OAAS,EACxBxF,KAAK2H,SACP,EAQF,SAASqnB,EAAW/M,EAAsBld,EAAYC,EAAYmrB,GAEhE,MAAMvkB,EAAI7G,EAAGuG,OAAS,GAChBO,EAAI9G,EAAGuG,OAAS,GAAK,IACrBQ,EAAI/G,EAAGuG,OAAS,EAAI,IACpB8kB,EAAMprB,EAAGsG,OAAS,GAClB+kB,EAAMrrB,EAAGsG,OAAS,GAAK,IACvBglB,EAAMtrB,EAAGsG,OAAS,EAAI,IAQtBilB,EAAYnwB,KAAKuF,OAAOvF,KAAKowB,IAAI5kB,EAAIwkB,GAAOhwB,KAAKowB,IAAI3kB,EAAIwkB,GAAOjwB,KAAKowB,IAAI1kB,EAAIwkB,IAAQ,IAG3F,IAAIpB,GAAU,EACd,IAAK,IAAIlpB,EAAS,EAAGA,EAASic,EAAUQ,KAAKjd,OAAQQ,GAAU,EAEzDic,EAAUQ,KAAKzc,KAAY4F,GAC3BqW,EAAUQ,KAAKzc,EAAS,KAAO6F,GAC/BoW,EAAUQ,KAAKzc,EAAS,KAAO8F,GAI7BqkB,GACC/vB,KAAKowB,IAAIvO,EAAUQ,KAAKzc,GAAU4F,GACnCxL,KAAKowB,IAAIvO,EAAUQ,KAAKzc,EAAS,GAAK6F,GACtCzL,KAAKowB,IAAIvO,EAAUQ,KAAKzc,EAAS,GAAK8F,GAAMykB,EANhDtO,EAAUQ,KAAKzc,EAAS,GAAK,EAS3BkpB,GAAU,EAKhB,OAAOA,CACT,CAWA,SAAS7H,EAAatY,EAAoBjJ,EAAeO,GACvD,MAAMD,EAAS2I,EAASC,cAAc,UAGtC,OAFA5I,EAAON,MAAQA,EACfM,EAAOC,OAASA,EACTD,CACT,C,yJCriCA,eAGA,IAAIsC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EAUT,IAAiB4nB,EAmBAzkB,EAuEAsF,EAkGAof,EAoCAplB,EA8FjB,SAAgBqlB,EAAY1P,GAC1B,MAAM2P,EAAI3P,EAAElI,SAAS,IACrB,OAAO6X,EAAEprB,OAAS,EAAI,IAAMorB,EAAIA,CAClC,CAQA,SAAgBC,EAAcC,EAAYC,GACxC,OAAID,EAAKC,GACCA,EAAK,MAASD,EAAK,MAErBA,EAAK,MAASC,EAAK,IAC7B,CAtVa,EAAArS,WAAqB,CAChCpN,IAAK,YACLhG,KAAM,GAMR,SAAiBmlB,GACC,EAAAO,MAAhB,SAAsBplB,EAAWC,EAAWC,EAAWC,GACrD,YAAU9L,IAAN8L,EACK,IAAI4kB,EAAY/kB,KAAK+kB,EAAY9kB,KAAK8kB,EAAY7kB,KAAK6kB,EAAY5kB,KAErE,IAAI4kB,EAAY/kB,KAAK+kB,EAAY9kB,KAAK8kB,EAAY7kB,IAC3D,EAEgB,EAAAmlB,OAAhB,SAAuBrlB,EAAWC,EAAWC,EAAWC,EAAY,KAIlE,OAAQH,GAAK,GAAKC,GAAK,GAAKC,GAAK,EAAIC,KAAO,CAC9C,CACD,CAdD,CAAiB0kB,IAAQ,WAARA,EAAQ,KAmBzB,SAAiB,GAgDf,SAAgBS,EAAQllB,EAAeklB,GAGrC,OAFAroB,EAAKzI,KAAK2V,MAAgB,IAAVmb,IACfxoB,EAAIC,EAAIC,GAAM0C,EAAK6lB,WAAWnlB,EAAMV,MAC9B,CACLgG,IAAKmf,EAASO,MAAMtoB,EAAIC,EAAIC,EAAIC,GAChCyC,KAAMmlB,EAASQ,OAAOvoB,EAAIC,EAAIC,EAAIC,GAEtC,CAtDgB,EAAAuoB,MAAhB,SAAsBrsB,EAAYC,GAEhC,GADA6D,GAAgB,IAAV7D,EAAGsG,MAAe,IACb,IAAPzC,EACF,MAAO,CACLyI,IAAKtM,EAAGsM,IACRhG,KAAMtG,EAAGsG,MAGb,MAAM8kB,EAAOprB,EAAGsG,MAAQ,GAAM,IACxB+kB,EAAOrrB,EAAGsG,MAAQ,GAAM,IACxBglB,EAAOtrB,EAAGsG,MAAQ,EAAK,IACvB+lB,EAAOtsB,EAAGuG,MAAQ,GAAM,IACxBgmB,EAAOvsB,EAAGuG,MAAQ,GAAM,IACxBimB,EAAOxsB,EAAGuG,MAAQ,EAAK,IAM7B,OALA5C,EAAK2oB,EAAMjxB,KAAK2V,OAAOqa,EAAMiB,GAAOxoB,GACpCF,EAAK2oB,EAAMlxB,KAAK2V,OAAOsa,EAAMiB,GAAOzoB,GACpCD,EAAK2oB,EAAMnxB,KAAK2V,OAAOua,EAAMiB,GAAO1oB,GAG7B,CAAEyI,IAFGmf,EAASO,MAAMtoB,EAAIC,EAAIC,GAErB0C,KADDmlB,EAASQ,OAAOvoB,EAAIC,EAAIC,GAEvC,EAEgB,EAAA4oB,SAAhB,SAAyBxlB,GACvB,OAA+B,MAAV,IAAbA,EAAMV,KAChB,EAEgB,EAAA8f,oBAAhB,SAAoCrmB,EAAYC,EAAYysB,GAC1D,MAAM1c,EAASzJ,EAAK8f,oBAAoBrmB,EAAGuG,KAAMtG,EAAGsG,KAAMmmB,GAC1D,GAAK1c,EAGL,OAAOzJ,EAAK4e,QACTnV,GAAU,GAAK,IACfA,GAAU,GAAK,IACfA,GAAU,EAAK,IAEpB,EAEgB,EAAAoV,OAAhB,SAAuBne,GACrB,MAAM0lB,GAA0B,IAAb1lB,EAAMV,QAAiB,EAE1C,OADC5C,EAAIC,EAAIC,GAAM0C,EAAK6lB,WAAWO,GACxB,CACLpgB,IAAKmf,EAASO,MAAMtoB,EAAIC,EAAIC,GAC5B0C,KAAMomB,EAEV,EAEgB,EAAAR,QAAO,EASP,EAAAvG,gBAAhB,SAAgC3e,EAAe2lB,GAE7C,OADA9oB,EAAkB,IAAbmD,EAAMV,KACJ4lB,EAAQllB,EAAQnD,EAAK8oB,EAAU,IACxC,EAEgB,EAAA1H,WAAhB,SAA2Bje,GACzB,MAAO,CAAEA,EAAMV,MAAQ,GAAM,IAAOU,EAAMV,MAAQ,GAAM,IAAOU,EAAMV,MAAQ,EAAK,IACpF,CACD,CAjED,CAAiBU,IAAK,QAALA,EAAK,KAuEtB,SAAiB,GACf,IAAI4lB,EACAC,EACJ,IAAK,EAAAC,OAAQ,CACX,MAAM1rB,EAAS2I,SAASC,cAAc,UACtC5I,EAAON,MAAQ,EACfM,EAAOC,OAAS,EAChB,MAAM2a,EAAM5a,EAAOgJ,WAAW,KAAM,CAClCoY,oBAAoB,IAElBxG,IACF4Q,EAAO5Q,EACP4Q,EAAK/E,yBAA2B,OAChCgF,EAAeD,EAAKG,qBAAqB,EAAG,EAAG,EAAG,G,CAWtC,EAAA7H,QAAhB,SAAwB5Y,GAEtB,GAAIA,EAAI0gB,MAAM,kBACZ,OAAQ1gB,EAAI9L,QACV,KAAK,EAIH,OAHAkD,EAAK0Z,SAAS9Q,EAAIuN,MAAM,EAAG,GAAGoT,OAAO,GAAI,IACzCtpB,EAAKyZ,SAAS9Q,EAAIuN,MAAM,EAAG,GAAGoT,OAAO,GAAI,IACzCrpB,EAAKwZ,SAAS9Q,EAAIuN,MAAM,EAAG,GAAGoT,OAAO,GAAI,IAClC3mB,EAAK4e,QAAQxhB,EAAIC,EAAIC,GAE9B,KAAK,EAKH,OAJAF,EAAK0Z,SAAS9Q,EAAIuN,MAAM,EAAG,GAAGoT,OAAO,GAAI,IACzCtpB,EAAKyZ,SAAS9Q,EAAIuN,MAAM,EAAG,GAAGoT,OAAO,GAAI,IACzCrpB,EAAKwZ,SAAS9Q,EAAIuN,MAAM,EAAG,GAAGoT,OAAO,GAAI,IACzCppB,EAAKuZ,SAAS9Q,EAAIuN,MAAM,EAAG,GAAGoT,OAAO,GAAI,IAClC3mB,EAAK4e,QAAQxhB,EAAIC,EAAIC,EAAIC,GAElC,KAAK,EACH,MAAO,CACLyI,MACAhG,MAAO8W,SAAS9Q,EAAIuN,MAAM,GAAI,KAAO,EAAI,OAAU,GAEvD,KAAK,EACH,MAAO,CACLvN,MACAhG,KAAM8W,SAAS9Q,EAAIuN,MAAM,GAAI,MAAQ,GAM7C,MAAMqT,EAAY5gB,EAAI0gB,MAAM,sFAC5B,GAAIE,EAKF,OAJAxpB,EAAK0Z,SAAS8P,EAAU,IACxBvpB,EAAKyZ,SAAS8P,EAAU,IACxBtpB,EAAKwZ,SAAS8P,EAAU,IACxBrpB,EAAKzI,KAAK2V,MAAoE,UAA5C9V,IAAjBiyB,EAAU,GAAmB,EAAI1P,WAAW0P,EAAU,MAChE5mB,EAAK4e,QAAQxhB,EAAIC,EAAIC,EAAIC,GAIlC,IAAK+oB,IAASC,EACZ,MAAM,IAAIxiB,MAAM,uCAOlB,GAFAuiB,EAAK5X,UAAY6X,EACjBD,EAAK5X,UAAY1I,EACa,iBAAnBsgB,EAAK5X,UACd,MAAM,IAAI3K,MAAM,uCAOlB,GAJAuiB,EAAK9X,SAAS,EAAG,EAAG,EAAG,IACtBpR,EAAIC,EAAIC,EAAIC,GAAM+oB,EAAK3C,aAAa,EAAG,EAAG,EAAG,GAAGxM,KAGtC,MAAP5Z,EACF,MAAM,IAAIwG,MAAM,uCAMlB,MAAO,CACL/D,KAAMmlB,EAASQ,OAAOvoB,EAAIC,EAAIC,EAAIC,GAClCyI,MAEJ,CACD,CA7FD,CAAiBA,IAAG,MAAHA,EAAG,KAkGpB,SAAiB,GAsBf,SAAgB6gB,EAAmBvmB,EAAWC,EAAWC,GACvD,MAAMsmB,EAAKxmB,EAAI,IACTymB,EAAKxmB,EAAI,IACTymB,EAAKxmB,EAAI,IAIf,MAAY,OAHDsmB,GAAM,OAAUA,EAAK,MAAQhyB,KAAKmyB,KAAKH,EAAK,MAAS,MAAO,MAG7C,OAFfC,GAAM,OAAUA,EAAK,MAAQjyB,KAAKmyB,KAAKF,EAAK,MAAS,MAAO,MAE/B,OAD7BC,GAAM,OAAUA,EAAK,MAAQlyB,KAAKmyB,KAAKD,EAAK,MAAS,MAAO,KAEzE,CAvBgB,EAAAE,kBAAhB,SAAkC9B,GAChC,OAAOyB,EACJzB,GAAO,GAAM,IACbA,GAAO,EAAM,IACA,IAAd,EACJ,EAUgB,EAAAyB,mBAAkB,CASnC,CA/BD,CAAiBzB,IAAG,MAAHA,EAAG,KAoCpB,SAAiBplB,GAyCf,SAAgBmnB,EAAgBvH,EAAgBC,EAAgBsG,GAG9D,MAAMJ,EAAOnG,GAAU,GAAM,IACvBoG,EAAOpG,GAAU,GAAM,IACvBqG,EAAOrG,GAAW,EAAK,IAC7B,IAAIkF,EAAOjF,GAAU,GAAM,IACvBkF,EAAOlF,GAAU,GAAM,IACvBmF,EAAOnF,GAAW,EAAK,IACvBuH,EAAK7B,EAAcH,EAAIyB,mBAAmB/B,EAAKC,EAAKC,GAAMI,EAAIyB,mBAAmBd,EAAKC,EAAKC,IAC/F,KAAOmB,EAAKjB,IAAUrB,EAAM,GAAKC,EAAM,GAAKC,EAAM,IAEhDF,GAAOhwB,KAAKsW,IAAI,EAAGtW,KAAKyV,KAAW,GAANua,IAC7BC,GAAOjwB,KAAKsW,IAAI,EAAGtW,KAAKyV,KAAW,GAANwa,IAC7BC,GAAOlwB,KAAKsW,IAAI,EAAGtW,KAAKyV,KAAW,GAANya,IAC7BoC,EAAK7B,EAAcH,EAAIyB,mBAAmB/B,EAAKC,EAAKC,GAAMI,EAAIyB,mBAAmBd,EAAKC,EAAKC,IAE7F,OAAQnB,GAAO,GAAKC,GAAO,GAAKC,GAAO,EAAI,OAAU,CACvD,CAEA,SAAgBqC,EAAkBzH,EAAgBC,EAAgBsG,GAGhE,MAAMJ,EAAOnG,GAAU,GAAM,IACvBoG,EAAOpG,GAAU,GAAM,IACvBqG,EAAOrG,GAAW,EAAK,IAC7B,IAAIkF,EAAOjF,GAAU,GAAM,IACvBkF,EAAOlF,GAAU,GAAM,IACvBmF,EAAOnF,GAAW,EAAK,IACvBuH,EAAK7B,EAAcH,EAAIyB,mBAAmB/B,EAAKC,EAAKC,GAAMI,EAAIyB,mBAAmBd,EAAKC,EAAKC,IAC/F,KAAOmB,EAAKjB,IAAUrB,EAAM,KAAQC,EAAM,KAAQC,EAAM,MAEtDF,EAAMhwB,KAAKC,IAAI,IAAM+vB,EAAMhwB,KAAKyV,KAAmB,IAAb,IAAMua,KAC5CC,EAAMjwB,KAAKC,IAAI,IAAMgwB,EAAMjwB,KAAKyV,KAAmB,IAAb,IAAMwa,KAC5CC,EAAMlwB,KAAKC,IAAI,IAAMiwB,EAAMlwB,KAAKyV,KAAmB,IAAb,IAAMya,KAC5CoC,EAAK7B,EAAcH,EAAIyB,mBAAmB/B,EAAKC,EAAKC,GAAMI,EAAIyB,mBAAmBd,EAAKC,EAAKC,IAE7F,OAAQnB,GAAO,GAAKC,GAAO,GAAKC,GAAO,EAAI,OAAU,CACvD,CAjEgB,EAAAlF,oBAAhB,SAAoCF,EAAgBC,EAAgBsG,GAClE,MAAMmB,EAAMlC,EAAI8B,kBAAkBtH,GAAU,GACtC2H,EAAMnC,EAAI8B,kBAAkBrH,GAAU,GAE5C,GADW0F,EAAc+B,EAAKC,GACrBpB,EAAO,CACd,GAAIoB,EAAMD,EAAK,CACb,MAAME,EAAUL,EAAgBvH,EAAQC,EAAQsG,GAC1CsB,EAAelC,EAAc+B,EAAKlC,EAAI8B,kBAAkBM,GAAW,IACzE,GAAIC,EAAetB,EAAO,CACxB,MAAMuB,EAAUL,EAAkBzH,EAAQC,EAAQsG,GAElD,OAAOsB,EADclC,EAAc+B,EAAKlC,EAAI8B,kBAAkBQ,GAAW,IACpCF,EAAUE,C,CAEjD,OAAOF,C,CAET,MAAMA,EAAUH,EAAkBzH,EAAQC,EAAQsG,GAC5CsB,EAAelC,EAAc+B,EAAKlC,EAAI8B,kBAAkBM,GAAW,IACzE,GAAIC,EAAetB,EAAO,CACxB,MAAMuB,EAAUP,EAAgBvH,EAAQC,EAAQsG,GAEhD,OAAOsB,EADclC,EAAc+B,EAAKlC,EAAI8B,kBAAkBQ,GAAW,IACpCF,EAAUE,C,CAEjD,OAAOF,C,CAGX,EAEgB,EAAAL,gBAAe,EAoBf,EAAAE,kBAAiB,EAqBjB,EAAAxB,WAAhB,SAA2B3a,GACzB,MAAO,CAAEA,GAAS,GAAM,IAAOA,GAAS,GAAM,IAAOA,GAAS,EAAK,IAAc,IAARA,EAC3E,EAEgB,EAAA0T,QAAhB,SAAwBte,EAAWC,EAAWC,EAAWC,GACvD,MAAO,CACLuF,IAAKmf,EAASO,MAAMplB,EAAGC,EAAGC,EAAGC,GAC7BT,KAAMmlB,EAASQ,OAAOrlB,EAAGC,EAAGC,EAAGC,GAEnC,CACD,CA5FD,CAAiBT,IAAI,OAAJA,EAAI,KA8FrB,gBAWA,iB,oGCzUA,mCACU,KAAA2nB,WAAgC,GAEhC,KAAAC,WAAqB,CAwC/B,CAtCE,SAAW3lB,GAmBT,OAlBKvN,KAAKmzB,SACRnzB,KAAKmzB,OAAUC,IACbpzB,KAAKizB,WAAW7U,KAAKgV,GACF,CACjBtiB,QAAS,KACP,IAAK9Q,KAAKkzB,UACR,IAAK,IAAInyB,EAAI,EAAGA,EAAIf,KAAKizB,WAAWztB,OAAQzE,IAC1C,GAAIf,KAAKizB,WAAWlyB,KAAOqyB,EAEzB,YADApzB,KAAKizB,WAAW9U,OAAOpd,EAAG,E,KAUjCf,KAAKmzB,MACd,CAEO,IAAAtjB,CAAKwjB,EAASC,GACnB,MAAM3L,EAA2B,GACjC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIf,KAAKizB,WAAWztB,OAAQzE,IAC1C4mB,EAAMvJ,KAAKpe,KAAKizB,WAAWlyB,IAE7B,IAAK,IAAIA,EAAI,EAAGA,EAAI4mB,EAAMniB,OAAQzE,IAChC4mB,EAAM5mB,GAAGwyB,UAAKtzB,EAAWozB,EAAMC,EAEnC,CAEO,OAAAxiB,GACD9Q,KAAKizB,aACPjzB,KAAKizB,WAAWztB,OAAS,GAE3BxF,KAAKkzB,WAAY,CACnB,GAGF,wBAAgCM,EAAiBC,GAC/C,OAAOD,GAAKpqB,GAAKqqB,EAAG5jB,KAAKzG,IAC3B,C,cCNA,SAAgBsqB,EAAaC,GAC3B,IAAK,MAAM7W,KAAK6W,EACd7W,EAAEhM,UAEJ6iB,EAAYnuB,OAAS,CACvB,C,+HAxDA,mBAIE,WAAAnG,GAHU,KAAAu0B,aAA8B,GAC9B,KAAAC,aAAuB,CAGjC,CAKO,OAAA/iB,GACL9Q,KAAK6zB,aAAc,EACnB,IAAK,MAAM/W,KAAK9c,KAAK4zB,aACnB9W,EAAEhM,UAEJ9Q,KAAK4zB,aAAapuB,OAAS,CAC7B,CAOO,QAAAvE,CAAgC6b,GAErC,OADA9c,KAAK4zB,aAAaxV,KAAKtB,GAChBA,CACT,CAOO,UAAAgX,CAAkChX,GACvC,MAAM0B,EAAQxe,KAAK4zB,aAAa5V,QAAQlB,IACzB,IAAX0B,GACFxe,KAAK4zB,aAAazV,OAAOK,EAAO,EAEpC,GAMF,wBAA6B8E,GAC3B,MAAO,CAAExS,QAASwS,EACpB,EAKA,iBAUA,qCAA0Cje,GACxC,MAAO,CAAEyL,QAAS,IAAM4iB,EAAaruB,GACvC,C,+FCrEA,MAAa0uB,EAAb,cACU,KAAAC,MAA8F,CAAC,CAgBzG,CAdS,GAAAvsB,CAAIwsB,EAAeC,EAAiB1d,GACpCxW,KAAKg0B,MAAMC,KACdj0B,KAAKg0B,MAAMC,GAAS,CAAC,GAEvBj0B,KAAKg0B,MAAMC,GAA2BC,GAAU1d,CAClD,CAEO,GAAA3B,CAAIof,EAAeC,GACxB,OAAOl0B,KAAKg0B,MAAMC,GAA4Bj0B,KAAKg0B,MAAMC,GAA2BC,QAAUj0B,CAChG,CAEO,KAAA0G,GACL3G,KAAKg0B,MAAQ,CAAC,CAChB,EAhBF,cAmBA,iCACU,KAAAA,MAAwE,IAAID,CAgBtF,CAdS,GAAAtsB,CAAIwsB,EAAeC,EAAiBC,EAAeC,EAAiB5d,GACpExW,KAAKg0B,MAAMnf,IAAIof,EAAOC,IACzBl0B,KAAKg0B,MAAMvsB,IAAIwsB,EAAOC,EAAQ,IAAIH,GAEpC/zB,KAAKg0B,MAAMnf,IAAIof,EAAOC,GAASzsB,IAAI0sB,EAAOC,EAAQ5d,EACpD,CAEO,GAAA3B,CAAIof,EAAeC,EAAiBC,EAAeC,G,MACxD,OAAoC,QAA7B,EAAAp0B,KAAKg0B,MAAMnf,IAAIof,EAAOC,UAAO,eAAErf,IAAIsf,EAAOC,EACnD,CAEO,KAAAztB,GACL3G,KAAKg0B,MAAMrtB,OACb,E,uMCzBW,EAAAmrB,OAA+B,oBAAduC,UAC9B,MAAMC,EAAa,EAAM,OAAI,OAASD,UAAUC,UAC1CC,EAAY,EAAM,OAAI,OAASF,UAAUE,SAElC,EAAAjV,UAAYgV,EAAUE,SAAS,WAC/B,EAAAjV,aAAe+U,EAAUE,SAAS,QAClC,EAAAC,SAAW,iCAAiCC,KAAKJ,GAC9D,8BACE,IAAK,EAAAG,SACH,OAAO,EAET,MAAME,EAAeL,EAAUtC,MAAM,kBACrC,OAAqB,OAAjB2C,GAAyBA,EAAanvB,OAAS,EAC1C,EAEF4c,SAASuS,EAAa,GAC/B,EAKa,EAAAC,MAAQ,CAAC,YAAa,WAAY,SAAU,UAAUJ,SAASD,GAC/D,EAAAM,OAAsB,SAAbN,EACT,EAAAO,SAAwB,WAAbP,EACX,EAAAQ,UAAY,CAAC,UAAW,QAAS,QAAS,SAASP,SAASD,GAC5D,EAAAS,QAAUT,EAASvW,QAAQ,UAAY,EAEvC,EAAAiX,WAAa,WAAWP,KAAKJ,E,gICrC1C,eA2BA,MAAeY,EAAf,cACU,KAAAC,OAAmC,GAEnC,KAAAC,GAAK,CAkEf,CA7DS,OAAAvN,CAAQwN,GACbr1B,KAAKm1B,OAAO/W,KAAKiX,GACjBr1B,KAAKs1B,QACP,CAEO,KAAAC,GACL,KAAOv1B,KAAKo1B,GAAKp1B,KAAKm1B,OAAO3vB,QACtBxF,KAAKm1B,OAAOn1B,KAAKo1B,OACpBp1B,KAAKo1B,KAGTp1B,KAAK2G,OACP,CAEO,KAAAA,GACD3G,KAAKw1B,gBACPx1B,KAAKy1B,gBAAgBz1B,KAAKw1B,eAC1Bx1B,KAAKw1B,mBAAgBv1B,GAEvBD,KAAKo1B,GAAK,EACVp1B,KAAKm1B,OAAO3vB,OAAS,CACvB,CAEQ,MAAA8vB,GACDt1B,KAAKw1B,gBACRx1B,KAAKw1B,cAAgBx1B,KAAK01B,iBAAiB11B,KAAK21B,SAASC,KAAK51B,OAElE,CAEQ,QAAA21B,CAASE,GACf71B,KAAKw1B,mBAAgBv1B,EACrB,IAAI61B,EAAe,EACfC,EAAc,EACdC,EAAwBH,EAASI,gBACjCC,EAAoB,EACxB,KAAOl2B,KAAKo1B,GAAKp1B,KAAKm1B,OAAO3vB,QAAQ,CAanC,GAZAswB,EAAe7V,KAAKC,MACflgB,KAAKm1B,OAAOn1B,KAAKo1B,OACpBp1B,KAAKo1B,KAKPU,EAAe11B,KAAKsW,IAAI,EAAGuJ,KAAKC,MAAQ4V,GACxCC,EAAc31B,KAAKsW,IAAIof,EAAcC,GAGrCG,EAAoBL,EAASI,gBACX,IAAdF,EAAoBG,EAOtB,OAJIF,EAAwBF,GAAgB,IAC1CvmB,QAAQK,KAAK,4CAA4CxP,KAAKowB,IAAIpwB,KAAK2V,MAAMigB,EAAwBF,cAEvG91B,KAAKs1B,SAGPU,EAAwBE,C,CAE1Bl2B,KAAK2G,OACP,EAQF,MAAawvB,UAA0BjB,EAC3B,gBAAAQ,CAAiBhR,GACzB,OAAO/U,YAAW,IAAM+U,EAAS1kB,KAAKo2B,gBAAgB,MACxD,CAEU,eAAAX,CAAgBY,GACxBvmB,aAAaumB,EACf,CAEQ,eAAAD,CAAgBE,GACtB,MAAMvkB,EAAMkO,KAAKC,MAAQoW,EACzB,MAAO,CACLL,cAAe,IAAM71B,KAAKsW,IAAI,EAAG3E,EAAMkO,KAAKC,OAEhD,EAdF,sBAoCa,EAAA0H,eAAkB,EAAAkK,QAAU,wBAAyB3hB,OAnBlE,cAAoC+kB,EACxB,gBAAAQ,CAAiBhR,GACzB,OAAO6R,oBAAoB7R,EAC7B,CAEU,eAAA+Q,CAAgBY,GACxBG,mBAAmBH,EACrB,GAYkGF,EAMpG,0BAGE,WAAA92B,GACEW,KAAKy2B,OAAS,IAAI,EAAA7O,aACpB,CAEO,GAAAngB,CAAI4tB,GACTr1B,KAAKy2B,OAAO9vB,QACZ3G,KAAKy2B,OAAO5O,QAAQwN,EACtB,CAEO,KAAAE,GACLv1B,KAAKy2B,OAAOlB,OACd,E,sGC5JF,MAAatf,EAAb,cAsBS,KAAAjR,GAAK,EACL,KAAAD,GAAK,EACL,KAAA6X,SAA2B,IAAI8Z,CAgGxC,CAvHS,iBAAOzM,CAAWzT,GACvB,MAAO,CACLA,IAAU,GAAuB,IACjCA,IAAU,EAAyB,IAC3B,IAARA,EAEJ,CAEO,mBAAOmgB,CAAangB,GACzB,OAAmB,IAAXA,EAAM,KAAa,IAAmC,IAAXA,EAAM,KAAa,EAAoC,IAAXA,EAAM,EACvG,CAEO,KAAAogB,GACL,MAAMC,EAAS,IAAI5gB,EAInB,OAHA4gB,EAAO7xB,GAAKhF,KAAKgF,GACjB6xB,EAAO9xB,GAAK/E,KAAK+E,GACjB8xB,EAAOja,SAAW5c,KAAK4c,SAASga,QACzBC,CACT,CAQO,SAAAhL,GAA4B,OAAiB,SAAV7rB,KAAKgF,EAAsB,CAC9D,MAAA4V,GAA4B,OAAiB,UAAV5a,KAAKgF,EAAmB,CAC3D,WAAAinB,GACL,OAAIjsB,KAAK82B,oBAAuD,IAAjC92B,KAAK4c,SAAS0R,eACpC,EAEQ,UAAVtuB,KAAKgF,EACd,CACO,OAAA+xB,GAA4B,OAAiB,UAAV/2B,KAAKgF,EAAoB,CAC5D,WAAA4mB,GAA4B,OAAiB,WAAV5rB,KAAKgF,EAAwB,CAChE,QAAA6V,GAA4B,OAAiB,SAAV7a,KAAK+E,EAAqB,CAC7D,KAAA+mB,GAA4B,OAAiB,UAAV9rB,KAAK+E,EAAkB,CAC1D,eAAAonB,GAA4B,OAAiB,WAAVnsB,KAAKgF,EAA4B,CACpE,WAAAgyB,GAA4B,OAAiB,UAAVh3B,KAAK+E,EAAwB,CAChE,UAAAsnB,GAA4B,OAAiB,WAAVrsB,KAAK+E,EAAuB,CAG/D,cAAAwnB,GAA2B,OAAiB,SAAVvsB,KAAKgF,EAAyB,CAChE,cAAAynB,GAA2B,OAAiB,SAAVzsB,KAAK+E,EAAyB,CAChE,OAAAkyB,GAA2B,OAA0C,WAAxB,SAAVj3B,KAAKgF,GAAgD,CACxF,OAAAkyB,GAA2B,OAA0C,WAAxB,SAAVl3B,KAAK+E,GAAgD,CACxF,WAAAoyB,GAA2B,OAA0C,WAAxB,SAAVn3B,KAAKgF,KAAqF,WAAxB,SAAVhF,KAAKgF,GAAiD,CACjJ,WAAAoyB,GAA2B,OAA0C,WAAxB,SAAVp3B,KAAK+E,KAAqF,WAAxB,SAAV/E,KAAK+E,GAAiD,CACjJ,WAAAsyB,GAA2B,OAA0C,IAAxB,SAAVr3B,KAAKgF,GAAgC,CACxE,WAAAsyB,GAA2B,OAA0C,IAAxB,SAAVt3B,KAAK+E,GAAgC,CACxE,kBAAAwyB,GAAgC,OAAmB,IAAZv3B,KAAKgF,IAAwB,IAAZhF,KAAK+E,EAAU,CAGvE,UAAAunB,GACL,OAAkB,SAAVtsB,KAAKgF,IACX,KAAK,SACL,KAAK,SAAqB,OAAiB,IAAVhF,KAAKgF,GACtC,KAAK,SAAqB,OAAiB,SAAVhF,KAAKgF,GACtC,QAA0B,OAAQ,EAEtC,CACO,UAAAwnB,GACL,OAAkB,SAAVxsB,KAAK+E,IACX,KAAK,SACL,KAAK,SAAqB,OAAiB,IAAV/E,KAAK+E,GACtC,KAAK,SAAqB,OAAiB,SAAV/E,KAAK+E,GACtC,QAA0B,OAAQ,EAEtC,CAGO,gBAAA+xB,GACL,OAAiB,UAAV92B,KAAK+E,EACd,CACO,cAAAyyB,GACDx3B,KAAK4c,SAASsS,UAChBlvB,KAAK+E,KAAM,UAEX/E,KAAK+E,IAAM,SAEf,CACO,iBAAA8oB,GACL,GAAe,UAAV7tB,KAAK+E,KAA+B/E,KAAK4c,SAAS6a,eACrD,OAAuC,SAA/Bz3B,KAAK4c,SAAS6a,gBACpB,KAAK,SACL,KAAK,SAAqB,OAAsC,IAA/Bz3B,KAAK4c,SAAS6a,eAC/C,KAAK,SAAqB,OAAsC,SAA/Bz3B,KAAK4c,SAAS6a,eAC/C,QAA0B,OAAOz3B,KAAKssB,aAG1C,OAAOtsB,KAAKssB,YACd,CACO,qBAAAoL,GACL,OAAkB,UAAV13B,KAAK+E,KAA+B/E,KAAK4c,SAAS6a,eACvB,SAA/Bz3B,KAAK4c,SAAS6a,eACdz3B,KAAKusB,gBACX,CACO,mBAAAqB,GACL,OAAkB,UAAV5tB,KAAK+E,KAA+B/E,KAAK4c,SAAS6a,eACE,WAAxB,SAA/Bz3B,KAAK4c,SAAS6a,gBACfz3B,KAAKi3B,SACX,CACO,uBAAAU,GACL,OAAkB,UAAV33B,KAAK+E,KAA+B/E,KAAK4c,SAAS6a,eACE,WAAxB,SAA/Bz3B,KAAK4c,SAAS6a,iBAC8C,WAAxB,SAA/Bz3B,KAAK4c,SAAS6a,gBACpBz3B,KAAKm3B,aACX,CACO,uBAAAxJ,GACL,OAAkB,UAAV3tB,KAAK+E,KAA+B/E,KAAK4c,SAAS6a,eACE,IAAxB,SAA/Bz3B,KAAK4c,SAAS6a,gBACfz3B,KAAKq3B,aACX,CACO,iBAAAO,GACL,OAAiB,UAAV53B,KAAKgF,GACG,UAAVhF,KAAK+E,GAA4B/E,KAAK4c,SAAS0R,eAAiB,EACjE,CACN,EAvHF,kBA+HA,MAAaoI,EAEX,OAAWzxB,GACT,OAAIjF,KAAK63B,QAEQ,UAAZ73B,KAAK83B,KACL93B,KAAKsuB,gBAAkB,GAGrBtuB,KAAK83B,IACd,CACA,OAAW7yB,CAAIuR,GAAiBxW,KAAK83B,KAAOthB,CAAO,CAEnD,kBAAW8X,GAET,OAAItuB,KAAK63B,OACA,GAEW,UAAZ73B,KAAK83B,OAAoC,EACnD,CACA,kBAAWxJ,CAAe9X,GACxBxW,KAAK83B,OAAQ,UACb93B,KAAK83B,MAASthB,GAAS,GAAM,SAC/B,CAEA,kBAAWihB,GACT,OAAmB,SAAZz3B,KAAK83B,IACd,CACA,kBAAWL,CAAejhB,GACxBxW,KAAK83B,OAAQ,SACb93B,KAAK83B,MAAgB,SAARthB,CACf,CAGA,SAAWuhB,GACT,OAAO/3B,KAAK63B,MACd,CACA,SAAWE,CAAMvhB,GACfxW,KAAK63B,OAASrhB,CAChB,CAEA,WAAAnX,CACE4F,EAAc,EACd8yB,EAAgB,GA1CV,KAAAD,KAAe,EAgCf,KAAAD,OAAiB,EAYvB73B,KAAK83B,KAAO7yB,EACZjF,KAAK63B,OAASE,CAChB,CAEO,KAAAnB,GACL,OAAO,IAAIF,EAAc12B,KAAK83B,KAAM93B,KAAK63B,OAC3C,CAMO,OAAA3I,GACL,OAA+B,IAAxBlvB,KAAKsuB,gBAA0D,IAAhBtuB,KAAK63B,MAC7D,EA3DF,iB,mFCjIA,eACA,SACA,SAKA,MAAa1qB,UAAiB,EAAA8I,cAA9B,c,oBAQS,KAAAE,QAAU,EACV,KAAAnR,GAAK,EACL,KAAAD,GAAK,EACL,KAAA6X,SAA2B,IAAI,EAAA8Z,cAC/B,KAAAtgB,aAAe,EAoExB,CA9ES,mBAAO4hB,CAAaxhB,GACzB,MAAMyhB,EAAM,IAAI9qB,EAEhB,OADA8qB,EAAI1hB,gBAAgBC,GACbyhB,CACT,CAQO,UAAA3hB,GACL,OAAsB,QAAftW,KAAKmW,OACd,CAEO,QAAAZ,GACL,OAAOvV,KAAKmW,SAAW,EACzB,CAEO,QAAAf,GACL,OAAmB,QAAfpV,KAAKmW,QACAnW,KAAKoW,aAEK,QAAfpW,KAAKmW,SACA,IAAA+hB,qBAAmC,QAAfl4B,KAAKmW,SAE3B,EACT,CAOO,OAAAd,GACL,OAAQrV,KAAKsW,aACTtW,KAAKoW,aAAa4W,WAAWhtB,KAAKoW,aAAa5Q,OAAS,GACzC,QAAfxF,KAAKmW,OACX,CAEO,eAAAI,CAAgBC,GACrBxW,KAAKgF,GAAKwR,EAAM,EAAA2hB,sBAChBn4B,KAAK+E,GAAK,EACV,IAAIqzB,GAAW,EAEf,GAAI5hB,EAAM,EAAA6hB,sBAAsB7yB,OAAS,EACvC4yB,GAAW,OAER,GAA2C,IAAvC5hB,EAAM,EAAA6hB,sBAAsB7yB,OAAc,CACjD,MAAMV,EAAO0R,EAAM,EAAA6hB,sBAAsBrL,WAAW,GAGpD,GAAI,OAAUloB,GAAQA,GAAQ,MAAQ,CACpC,MAAMovB,EAAS1d,EAAM,EAAA6hB,sBAAsBrL,WAAW,GAClD,OAAUkH,GAAUA,GAAU,MAChCl0B,KAAKmW,QAA6B,MAAjBrR,EAAO,OAAkBovB,EAAS,MAAS,MAAY1d,EAAM,EAAA8hB,wBAA0B,GAGxGF,GAAW,C,MAIbA,GAAW,C,MAIbp4B,KAAKmW,QAAUK,EAAM,EAAA6hB,sBAAsBrL,WAAW,GAAMxW,EAAM,EAAA8hB,wBAA0B,GAE1FF,IACFp4B,KAAKoW,aAAeI,EAAM,EAAA6hB,sBAC1Br4B,KAAKmW,QAAU,QAA4BK,EAAM,EAAA8hB,wBAA0B,GAE/E,CAEO,aAAA7hB,GACL,MAAO,CAACzW,KAAKgF,GAAIhF,KAAKoV,WAAYpV,KAAKuV,WAAYvV,KAAKqV,UAC1D,EA/EF,Y,0UCRa,EAAAyS,cAAgB,EAChB,EAAAyQ,aAAe,IAAa,EAAAzQ,eAAiB,EAC7C,EAAAC,YAAc,EAEd,EAAAoQ,qBAAuB,EACvB,EAAAE,qBAAuB,EACvB,EAAAC,sBAAwB,EACxB,EAAAE,qBAAuB,EAOvB,EAAA5iB,eAAiB,GACjB,EAAA6iB,gBAAkB,EAClB,EAAAlzB,eAAiB,EAOjB,EAAAmzB,qBAAuB,IACvB,EAAAC,sBAAwB,EACxB,EAAAC,qBAAuB,E,0IClBpC,+BAAoCC,GAClC,OAAIA,EAAY,OACdA,GAAa,MACNtN,OAAOC,aAAiC,OAAnBqN,GAAa,KAAgBtN,OAAOC,aAAcqN,EAAY,KAAS,QAE9FtN,OAAOC,aAAaqN,EAC7B,EAOA,yBAA8BpW,EAAmB3Q,EAAgB,EAAGC,EAAc0Q,EAAKjd,QACrF,IAAIuP,EAAS,GACb,IAAK,IAAIhU,EAAI+Q,EAAO/Q,EAAIgR,IAAOhR,EAAG,CAChC,IAAIskB,EAAY5C,EAAK1hB,GACjBskB,EAAY,OAMdA,GAAa,MACbtQ,GAAUwW,OAAOC,aAAiC,OAAnBnG,GAAa,KAAgBkG,OAAOC,aAAcnG,EAAY,KAAS,QAEtGtQ,GAAUwW,OAAOC,aAAanG,E,CAGlC,OAAOtQ,CACT,EAMA,oCACU,KAAA+jB,SAAmB,CAkE7B,CA7DS,KAAAnyB,GACL3G,KAAK84B,SAAW,CAClB,CAUO,MAAAC,CAAOC,EAAelU,GAC3B,MAAMtf,EAASwzB,EAAMxzB,OAErB,IAAKA,EACH,OAAO,EAGT,IAAIW,EAAO,EACP8yB,EAAW,EAGf,GAAIj5B,KAAK84B,SAAU,CACjB,MAAM5E,EAAS8E,EAAMhM,WAAWiM,KAC5B,OAAU/E,GAAUA,GAAU,MAChCpP,EAAO3e,KAAqC,MAA1BnG,KAAK84B,SAAW,OAAkB5E,EAAS,MAAS,OAGtEpP,EAAO3e,KAAUnG,KAAK84B,SACtBhU,EAAO3e,KAAU+tB,GAEnBl0B,KAAK84B,SAAW,C,CAGlB,IAAK,IAAI/3B,EAAIk4B,EAAUl4B,EAAIyE,IAAUzE,EAAG,CACtC,MAAM+D,EAAOk0B,EAAMhM,WAAWjsB,GAE9B,GAAI,OAAU+D,GAAQA,GAAQ,MAA9B,CACE,KAAM/D,GAAKyE,EAET,OADAxF,KAAK84B,SAAWh0B,EACTqB,EAET,MAAM+tB,EAAS8E,EAAMhM,WAAWjsB,GAC5B,OAAUmzB,GAAUA,GAAU,MAChCpP,EAAO3e,KAA4B,MAAjBrB,EAAO,OAAkBovB,EAAS,MAAS,OAG7DpP,EAAO3e,KAAUrB,EACjBggB,EAAO3e,KAAU+tB,E,MAIR,QAATpvB,IAIJggB,EAAO3e,KAAUrB,E,CAEnB,OAAOqB,CACT,GAMF,kCACS,KAAA+yB,QAAsB,IAAI32B,WAAW,EAgO9C,CA3NS,KAAAoE,GACL3G,KAAKk5B,QAAQxyB,KAAK,EACpB,CAUO,MAAAqyB,CAAOC,EAAmBlU,GAC/B,MAAMtf,EAASwzB,EAAMxzB,OAErB,IAAKA,EACH,OAAO,EAGT,IACI2zB,EACAC,EACAC,EACAC,EAJAnzB,EAAO,EAKPkf,EAAY,EACZ4T,EAAW,EAGf,GAAIj5B,KAAKk5B,QAAQ,GAAI,CACnB,IAAIK,GAAiB,EACjBC,EAAKx5B,KAAKk5B,QAAQ,GACtBM,GAAyB,MAAV,IAALA,GAAwB,GAAyB,MAAV,IAALA,GAAwB,GAAO,EAC3E,IACIC,EADAC,EAAM,EAEV,MAAQD,EAA4B,GAAtBz5B,KAAKk5B,UAAUQ,KAAgBA,EAAM,GACjDF,IAAO,EACPA,GAAMC,EAGR,MAAM7iB,EAAsC,MAAV,IAAlB5W,KAAKk5B,QAAQ,IAAwB,EAAmC,MAAV,IAAlBl5B,KAAKk5B,QAAQ,IAAwB,EAAI,EAC/FS,EAAU/iB,EAAO8iB,EACvB,KAAOT,EAAWU,GAAS,CACzB,GAAIV,GAAYzzB,EACd,OAAO,EAGT,GADAi0B,EAAMT,EAAMC,KACS,MAAV,IAANQ,GAAsB,CAEzBR,IACAM,GAAiB,EACjB,K,CAGAv5B,KAAKk5B,QAAQQ,KAASD,EACtBD,IAAO,EACPA,GAAY,GAANC,C,CAGLF,IAEU,IAAT3iB,EACE4iB,EAAK,IAEPP,IAEAnU,EAAO3e,KAAUqzB,EAED,IAAT5iB,EACL4iB,EAAK,MAAWA,GAAM,OAAUA,GAAM,OAAkB,QAAPA,IAGnD1U,EAAO3e,KAAUqzB,GAGfA,EAAK,OAAYA,EAAK,UAGxB1U,EAAO3e,KAAUqzB,IAIvBx5B,KAAKk5B,QAAQxyB,KAAK,E,CAIpB,MAAMkzB,EAAWp0B,EAAS,EAC1B,IAAIzE,EAAIk4B,EACR,KAAOl4B,EAAIyE,GAAQ,CAejB,SAAOzE,EAAI64B,IACiB,KAApBT,EAAQH,EAAMj4B,KACU,KAAxBq4B,EAAQJ,EAAMj4B,EAAI,KACM,KAAxBs4B,EAAQL,EAAMj4B,EAAI,KACM,KAAxBu4B,EAAQN,EAAMj4B,EAAI,MAExB+jB,EAAO3e,KAAUgzB,EACjBrU,EAAO3e,KAAUizB,EACjBtU,EAAO3e,KAAUkzB,EACjBvU,EAAO3e,KAAUmzB,EACjBv4B,GAAK,EAOP,GAHAo4B,EAAQH,EAAMj4B,KAGVo4B,EAAQ,IACVrU,EAAO3e,KAAUgzB,OAGZ,GAAuB,MAAV,IAARA,GAAwB,CAClC,GAAIp4B,GAAKyE,EAEP,OADAxF,KAAKk5B,QAAQ,GAAKC,EACXhzB,EAGT,GADAizB,EAAQJ,EAAMj4B,KACS,MAAV,IAARq4B,GAAwB,CAE3Br4B,IACA,Q,CAGF,GADAskB,GAAqB,GAAR8T,IAAiB,EAAa,GAARC,EAC/B/T,EAAY,IAAM,CAEpBtkB,IACA,Q,CAEF+jB,EAAO3e,KAAUkf,C,MAGZ,GAAuB,MAAV,IAAR8T,GAAwB,CAClC,GAAIp4B,GAAKyE,EAEP,OADAxF,KAAKk5B,QAAQ,GAAKC,EACXhzB,EAGT,GADAizB,EAAQJ,EAAMj4B,KACS,MAAV,IAARq4B,GAAwB,CAE3Br4B,IACA,Q,CAEF,GAAIA,GAAKyE,EAGP,OAFAxF,KAAKk5B,QAAQ,GAAKC,EAClBn5B,KAAKk5B,QAAQ,GAAKE,EACXjzB,EAGT,GADAkzB,EAAQL,EAAMj4B,KACS,MAAV,IAARs4B,GAAwB,CAE3Bt4B,IACA,Q,CAGF,GADAskB,GAAqB,GAAR8T,IAAiB,IAAc,GAARC,IAAiB,EAAa,GAARC,EACtDhU,EAAY,MAAWA,GAAa,OAAUA,GAAa,OAAyB,QAAdA,EAExE,SAEFP,EAAO3e,KAAUkf,C,MAGZ,GAAuB,MAAV,IAAR8T,GAAwB,CAClC,GAAIp4B,GAAKyE,EAEP,OADAxF,KAAKk5B,QAAQ,GAAKC,EACXhzB,EAGT,GADAizB,EAAQJ,EAAMj4B,KACS,MAAV,IAARq4B,GAAwB,CAE3Br4B,IACA,Q,CAEF,GAAIA,GAAKyE,EAGP,OAFAxF,KAAKk5B,QAAQ,GAAKC,EAClBn5B,KAAKk5B,QAAQ,GAAKE,EACXjzB,EAGT,GADAkzB,EAAQL,EAAMj4B,KACS,MAAV,IAARs4B,GAAwB,CAE3Bt4B,IACA,Q,CAEF,GAAIA,GAAKyE,EAIP,OAHAxF,KAAKk5B,QAAQ,GAAKC,EAClBn5B,KAAKk5B,QAAQ,GAAKE,EAClBp5B,KAAKk5B,QAAQ,GAAKG,EACXlzB,EAGT,GADAmzB,EAAQN,EAAMj4B,KACS,MAAV,IAARu4B,GAAwB,CAE3Bv4B,IACA,Q,CAGF,GADAskB,GAAqB,EAAR8T,IAAiB,IAAc,GAARC,IAAiB,IAAc,GAARC,IAAiB,EAAa,GAARC,EAC7EjU,EAAY,OAAYA,EAAY,QAEtC,SAEFP,EAAO3e,KAAUkf,C,EAKrB,OAAOlf,CACT,E,GCvVE0zB,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB95B,IAAjB+5B,EACH,OAAOA,EAAa17B,QAGrB,IAAIC,EAASs7B,EAAyBE,GAAY,CAGjDz7B,QAAS,CAAC,GAOX,OAHA27B,EAAoBF,GAAUx7B,EAAQA,EAAOD,QAASw7B,GAG/Cv7B,EAAOD,OACf,C,kGCfA,eACA,SACA,SAGA,SAEA,MAAa47B,UAAmB,EAAA96B,WAa9B,WAAAC,CACU86B,GAER,GAAI,EAAA1F,WAAY,IAAA2F,oBAAqB,GACnC,MAAM,IAAI/qB,MAAM,mDAElB5P,QALQ,KAAA06B,uBAAAA,EAVO,KAAA/sB,sBAAwBpN,KAAKiB,SAAS,IAAI,EAAAoM,cAC3C,KAAAC,qBAAuBtN,KAAKoN,sBAAsBG,MACjD,KAAAC,yBAA2BxN,KAAKiB,SAAS,IAAI,EAAAoM,cAC9C,KAAAI,wBAA0BzN,KAAKwN,yBAAyBD,MACvD,KAAAG,4BAA8B1N,KAAKiB,SAAS,IAAI,EAAAoM,cACjD,KAAAM,2BAA6B3N,KAAK0N,4BAA4BH,MAC7D,KAAAO,eAAiB9N,KAAKiB,SAAS,IAAI,EAAAoM,cACpC,KAAAU,cAAgB/N,KAAK8N,eAAeP,KASpD,CAEO,QAAA8sB,CAASzzB,GACd,MAAMyX,EAAQzX,EAAiBuH,MAC/B,IAAKvH,EAAS4d,QAEZ,YADAxkB,KAAKiB,SAASod,EAAKic,YAAW,IAAMt6B,KAAKq6B,SAASzzB,MAIpD5G,KAAKV,UAAYsH,EACjB,MAAM2zB,EAA4Blc,EAAKkc,YACjCnf,EAAkCiD,EAAKjD,eAEvCof,EAAanc,EACboc,EAAgCD,EAAWE,eAC3CC,EAAkDH,EAAW/tB,wBAC7DmuB,EAAoCJ,EAAW9tB,iBAC/CyO,EAA0Cqf,EAAW7tB,oBACrDkuB,EAAwCL,EAAW3tB,mBACnDwO,EAA8Bmf,EAAWzxB,cAE/C/I,KAAK86B,UAAY96B,KAAKiB,SAAS,IAAI,EAAAuL,cACjC5F,EACA+zB,EACAC,EACAzf,EACAof,EACAM,EACAzf,EACAC,EACArb,KAAKm6B,yBAEPn6B,KAAKiB,UAAS,IAAAuR,cAAaxS,KAAK86B,UAAU/sB,cAAe/N,KAAK8N,iBAC9D9N,KAAKiB,UAAS,IAAAuR,cAAaxS,KAAK86B,UAAUxtB,qBAAsBtN,KAAKoN,wBACrEpN,KAAKiB,UAAS,IAAAuR,cAAaxS,KAAK86B,UAAUrtB,wBAAyBzN,KAAKwN,2BACxExN,KAAKiB,UAAS,IAAAuR,cAAaxS,KAAK86B,UAAUntB,2BAA4B3N,KAAK0N,8BAC3E+sB,EAAcM,YAAY/6B,KAAK86B,WAE/B96B,KAAKiB,UAAS,IAAAC,eAAa,KACzB,MAAMu5B,EAAiCz6B,KAAKV,UAAkB6O,MAAMusB,eACpED,EAAcM,YAAa/6B,KAAKV,UAAkB6O,MAAM6sB,mBACxDP,EAAcj2B,aAAaoC,EAAStB,KAAMsB,EAASE,KAAK,IAE5D,CAEA,gBAAWmK,G,MACT,OAAqB,QAAd,EAAAjR,KAAK86B,iBAAS,eAAE7pB,YACzB,CAEO,iBAAA0B,G,MACS,QAAd,EAAA3S,KAAK86B,iBAAS,SAAEnoB,mBAClB,EAvEF,c","sources":["webpack://WebglAddon/webpack/universalModuleDefinition","webpack://WebglAddon/./src/GlyphRenderer.ts","webpack://WebglAddon/./src/RectangleRenderer.ts","webpack://WebglAddon/./src/RenderModel.ts","webpack://WebglAddon/./src/WebglRenderer.ts","webpack://WebglAddon/./src/WebglUtils.ts","webpack://WebglAddon/./src/renderLayer/BaseRenderLayer.ts","webpack://WebglAddon/./src/renderLayer/LinkRenderLayer.ts","webpack://WebglAddon/../../src/browser/Lifecycle.ts","webpack://WebglAddon/../../src/browser/renderer/shared/CellColorResolver.ts","webpack://WebglAddon/../../src/browser/renderer/shared/CharAtlasCache.ts","webpack://WebglAddon/../../src/browser/renderer/shared/CharAtlasUtils.ts","webpack://WebglAddon/../../src/browser/renderer/shared/Constants.ts","webpack://WebglAddon/../../src/browser/renderer/shared/CursorBlinkStateManager.ts","webpack://WebglAddon/../../src/browser/renderer/shared/CustomGlyphs.ts","webpack://WebglAddon/../../src/browser/renderer/shared/DevicePixelObserver.ts","webpack://WebglAddon/../../src/browser/renderer/shared/RendererUtils.ts","webpack://WebglAddon/../../src/browser/renderer/shared/SelectionRenderModel.ts","webpack://WebglAddon/../../src/browser/renderer/shared/TextureAtlas.ts","webpack://WebglAddon/../../src/common/Color.ts","webpack://WebglAddon/../../src/common/EventEmitter.ts","webpack://WebglAddon/../../src/common/Lifecycle.ts","webpack://WebglAddon/../../src/common/MultiKeyMap.ts","webpack://WebglAddon/../../src/common/Platform.ts","webpack://WebglAddon/../../src/common/TaskQueue.ts","webpack://WebglAddon/../../src/common/buffer/AttributeData.ts","webpack://WebglAddon/../../src/common/buffer/CellData.ts","webpack://WebglAddon/../../src/common/buffer/Constants.ts","webpack://WebglAddon/../../src/common/input/TextDecoder.ts","webpack://WebglAddon/webpack/bootstrap","webpack://WebglAddon/./src/WebglAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(self, () => {\nreturn ","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, GLTexture, PROJECTION_MATRIX } from './WebglUtils';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel } from './Types';\nimport { NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IRasterizedGlyph, IRenderDimensions, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { TextureAtlas } from 'browser/renderer/shared/TextureAtlas';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXPAGE = 4,\n  TEXCOORD = 5,\n  TEXSIZE = 6\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXPAGE}) in float a_texpage;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\nflat out int v_texpage;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texpage = int(a_texpage);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nfunction createFragmentShaderSource(maxFragmentShaderTextureUnits: number): string {\n  let textureConditionals = '';\n  for (let i = 1; i < maxFragmentShaderTextureUnits; i++) {\n    textureConditionals += ` else if (v_texpage == ${i}) { outColor = texture(u_texture[${i}], v_texcoord); }`;\n  }\n  return (`#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\nflat in int v_texpage;\n\nuniform sampler2D u_texture[${maxFragmentShaderTextureUnits}];\n\nout vec4 outColor;\n\nvoid main() {\n  if (v_texpage == 0) {\n    outColor = texture(u_texture[0], v_texcoord);\n  } ${textureConditionals}\n}`);\n}\n\nconst INDICES_PER_CELL = 11;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\n// Work variables to avoid garbage collection\nlet $i = 0;\nlet $glyph: IRasterizedGlyph | undefined = undefined;\nlet $leftCellPadding = 0;\nlet $clippedPixels = 0;\n\nexport class GlyphRenderer extends Disposable {\n  private readonly _program: WebGLProgram;\n  private readonly _vertexArrayObject: IWebGLVertexArrayObject;\n  private readonly _projectionLocation: WebGLUniformLocation;\n  private readonly _resolutionLocation: WebGLUniformLocation;\n  private readonly _textureLocation: WebGLUniformLocation;\n  private readonly _atlasTextures: GLTexture[];\n  private readonly _attributesBuffer: WebGLBuffer;\n\n  private _atlas: ITextureAtlas | undefined;\n  private _activeBuffer: number = 0;\n  private readonly _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ]\n  };\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private readonly _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    super();\n\n    const gl = this._gl;\n\n    if (TextureAtlas.maxAtlasPages === undefined) {\n      // Typically 8 or 16\n      TextureAtlas.maxAtlasPages = Math.min(32, throwIfFalsy(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS) as number | null));\n      // Almost all clients will support >= 4096\n      TextureAtlas.maxTextureSize = throwIfFalsy(gl.getParameter(gl.MAX_TEXTURE_SIZE) as number | null);\n    }\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, createFragmentShaderSource(TextureAtlas.maxAtlasPages)));\n    this.register(toDisposable(() => gl.deleteProgram(this._program)));\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(unitQuadVerticesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertices to allow is to draw 2 triangles from the vertices via a\n    // triangle strip\n    const unitQuadElementIndices = new Uint8Array([0, 1, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(elementIndicesBuffer)));\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    this.register(toDisposable(() => gl.deleteBuffer(this._attributesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXPAGE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXPAGE, 1, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXPAGE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 5 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 7 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 9 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup static uniforms\n    gl.useProgram(this._program);\n    const textureUnits = new Int32Array(TextureAtlas.maxAtlasPages);\n    for (let i = 0; i < TextureAtlas.maxAtlasPages; i++) {\n      textureUnits[i] = i;\n    }\n    gl.uniform1iv(this._textureLocation, textureUnits);\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n\n    // Setup 1x1 red pixel textures for all potential atlas pages, if one of these invalid textures\n    // is ever drawn it will show characters as red rectangles.\n    this._atlasTextures = [];\n    for (let i = 0; i < TextureAtlas.maxAtlasPages; i++) {\n      const glTexture = new GLTexture(throwIfFalsy(gl.createTexture()));\n      this.register(toDisposable(() => gl.deleteTexture(glTexture.texture)));\n      gl.activeTexture(gl.TEXTURE0 + i);\n      gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 0, 0, 255]));\n      this._atlasTextures[i] = glTexture;\n    }\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.handleResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, ext: number, chars: string, lastBg: number): void {\n    // Since this function is called for every cell (`rows*cols`), it must be very optimized. It\n    // should not instantiate any variables unless a new glyph is drawn to the cache where the\n    // slight slowdown is acceptable for the developer ergonomics provided as it's a once of for\n    // each glyph.\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, ext, chars, lastBg);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, ext: number, chars: string, lastBg: number): void {\n    $i = (y * this._terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null character, allow space character to continue as it may have\n    // underline/strikethrough styles\n    if (code === NULL_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      array.fill(0, $i, $i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    if (!this._atlas) {\n      return;\n    }\n\n    // Get the glyph\n    if (chars && chars.length > 1) {\n      $glyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg, ext, false);\n    } else {\n      $glyph = this._atlas.getRasterizedGlyph(code, bg, fg, ext, false);\n    }\n\n    $leftCellPadding = Math.floor((this._dimensions.device.cell.width - this._dimensions.device.char.width) / 2);\n    if (bg !== lastBg && $glyph.offset.x > $leftCellPadding) {\n      $clippedPixels = $glyph.offset.x - $leftCellPadding;\n      // a_origin\n      array[$i    ] = -($glyph.offset.x - $clippedPixels) + this._dimensions.device.char.left;\n      array[$i + 1] = -$glyph.offset.y + this._dimensions.device.char.top;\n      // a_size\n      array[$i + 2] = ($glyph.size.x - $clippedPixels) / this._dimensions.device.canvas.width;\n      array[$i + 3] = $glyph.size.y / this._dimensions.device.canvas.height;\n      // a_texpage\n      array[$i + 4] = $glyph.texturePage;\n      // a_texcoord\n      array[$i + 5] = $glyph.texturePositionClipSpace.x + $clippedPixels / this._atlas.pages[$glyph.texturePage].canvas.width;\n      array[$i + 6] = $glyph.texturePositionClipSpace.y;\n      // a_texsize\n      array[$i + 7] = $glyph.sizeClipSpace.x - $clippedPixels / this._atlas.pages[$glyph.texturePage].canvas.width;\n      array[$i + 8] = $glyph.sizeClipSpace.y;\n    } else {\n      // a_origin\n      array[$i    ] = -$glyph.offset.x + this._dimensions.device.char.left;\n      array[$i + 1] = -$glyph.offset.y + this._dimensions.device.char.top;\n      // a_size\n      array[$i + 2] = $glyph.size.x / this._dimensions.device.canvas.width;\n      array[$i + 3] = $glyph.size.y / this._dimensions.device.canvas.height;\n      // a_texpage\n      array[$i + 4] = $glyph.texturePage;\n      // a_texcoord\n      array[$i + 5] = $glyph.texturePositionClipSpace.x;\n      array[$i + 6] = $glyph.texturePositionClipSpace.y;\n      // a_texsize\n      array[$i + 7] = $glyph.sizeClipSpace.x;\n      array[$i + 8] = $glyph.sizeClipSpace.y;\n    }\n    // a_cellpos only changes on resize\n  }\n\n  public clear(): void {\n    const terminal = this._terminal;\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n\n    // Clear vertices\n    if (this._vertices.count !== newCount) {\n      this._vertices.attributes = new Float32Array(newCount);\n    } else {\n      this._vertices.attributes.fill(0);\n    }\n    let i = 0;\n    for (; i < this._vertices.attributesBuffers.length; i++) {\n      if (this._vertices.count !== newCount) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      } else {\n        this._vertices.attributesBuffers[i].fill(0);\n      }\n    }\n    this._vertices.count = newCount;\n    i = 0;\n    for (let y = 0; y < terminal.rows; y++) {\n      for (let x = 0; x < terminal.cols; x++) {\n        this._vertices.attributes[i + 9] = x / terminal.cols;\n        this._vertices.attributes[i + 10] = y / terminal.rows;\n        i += INDICES_PER_CELL;\n      }\n    }\n  }\n\n  public handleResize(): void {\n    const gl = this._gl;\n    gl.useProgram(this._program);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n    this.clear();\n  }\n\n  public render(renderModel: IRenderModel): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = this._vertices.attributes.subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the atlas page texture if they have changed\n    for (let i = 0; i < this._atlas.pages.length; i++) {\n      if (this._atlas.pages[i].version !== this._atlasTextures[i].version) {\n        this._bindAtlasPageTexture(gl, this._atlas, i);\n      }\n    }\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: ITextureAtlas): void {\n    this._atlas = atlas;\n    for (const glTexture of this._atlasTextures) {\n      glTexture.version = -1;\n    }\n  }\n\n  private _bindAtlasPageTexture(gl: IWebGL2RenderingContext, atlas: ITextureAtlas, i: number): void {\n    gl.activeTexture(gl.TEXTURE0 + i);\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTextures[i].texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.pages[i].canvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n    this._atlasTextures[i].version = atlas.pages[i].version;\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext } from './Types';\nimport { Attributes, BgFlags, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColor } from 'common/Types';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { DIM_OPACITY } from 'browser/renderer/shared/Constants';\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { IThemeService } from 'browser/services/Services';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = a_position + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\nclass Vertices {\n  public attributes: Float32Array;\n  public count: number;\n\n  constructor() {\n    this.attributes = new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY);\n    this.count = 0;\n  }\n}\n\n// Work variables to avoid garbage collection\nlet $rgba = 0;\nlet $isDefault = false;\nlet $x1 = 0;\nlet $y1 = 0;\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport class RectangleRenderer extends Disposable {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n  private _cursorFloat!: Float32Array;\n\n  private _vertices: Vertices = new Vertices();\n  private _verticesCursor: Vertices = new Vertices();\n\n  constructor(\n    private _terminal: Terminal,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions,\n    private readonly _themeService: IThemeService\n  ) {\n    super();\n\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this.register(toDisposable(() => gl.deleteProgram(this._program)));\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(unitQuadVerticesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertices to allow is to draw 2 triangles from the vertices via a\n    // triangle strip\n    const unitQuadElementIndices = new Uint8Array([0, 1, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(elementIndicesBuffer)));\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    this.register(toDisposable(() => gl.deleteBuffer(this._attributesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors(_themeService.colors);\n    this.register(this._themeService.onChangeColors(e => {\n      this._updateCachedColors(e);\n      this._updateViewportRectangle();\n    }));\n  }\n\n  public renderBackgrounds(): void {\n    this._renderVertices(this._vertices);\n  }\n\n  public renderCursor(): void {\n    this._renderVertices(this._verticesCursor);\n  }\n\n  private _renderVertices(vertices: Vertices): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_BYTE, 0, vertices.count);\n  }\n\n  public handleResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n\n  private _updateCachedColors(colors: ReadonlyColorSet): void {\n    this._bgFloat = this._colorToFloat32Array(colors.background);\n    this._cursorFloat = this._colorToFloat32Array(colors.cursor);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.device.cell.width,\n      this._terminal.rows * this._dimensions.device.cell.height,\n      this._bgFloat\n    );\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    // Declare variable ahead of time to avoid garbage collection\n    let rectangleCount = 1;\n    let y: number;\n    let x: number;\n    let currentStartX: number;\n    let currentBg: number;\n    let currentFg: number;\n    let currentInverse: boolean;\n    let modelIndex: number;\n    let bg: number;\n    let fg: number;\n    let inverse: boolean;\n    let offset: number;\n\n    for (y = 0; y < terminal.rows; y++) {\n      currentStartX = -1;\n      currentBg = 0;\n      currentFg = 0;\n      currentInverse = false;\n      for (x = 0; x < terminal.cols; x++) {\n        modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  public updateCursor(model: IRenderModel): void {\n    const vertices = this._verticesCursor;\n    const cursor = model.cursor;\n    if (!cursor || cursor.style === 'block') {\n      vertices.count = 0;\n      return;\n    }\n\n    let offset: number;\n    let rectangleCount = 0;\n\n    if (cursor.style === 'bar' || cursor.style === 'outline') {\n      // Left edge\n      offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n      this._addRectangleFloat(\n        vertices.attributes,\n        offset,\n        cursor.x * this._dimensions.device.cell.width,\n        cursor.y * this._dimensions.device.cell.height,\n        cursor.style === 'bar' ? cursor.dpr * cursor.cursorWidth : cursor.dpr,\n        this._dimensions.device.cell.height,\n        this._cursorFloat\n      );\n    }\n    if (cursor.style === 'underline' || cursor.style === 'outline') {\n      // Bottom edge\n      offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n      this._addRectangleFloat(\n        vertices.attributes,\n        offset,\n        cursor.x * this._dimensions.device.cell.width,\n        (cursor.y + 1) * this._dimensions.device.cell.height - cursor.dpr,\n        cursor.width * this._dimensions.device.cell.width,\n        cursor.dpr,\n        this._cursorFloat\n      );\n    }\n    if (cursor.style === 'outline') {\n      // Top edge\n      offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n      this._addRectangleFloat(\n        vertices.attributes,\n        offset,\n        cursor.x * this._dimensions.device.cell.width,\n        cursor.y * this._dimensions.device.cell.height,\n        cursor.width * this._dimensions.device.cell.width,\n        cursor.dpr,\n        this._cursorFloat\n      );\n      // Right edge\n      offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n      this._addRectangleFloat(\n        vertices.attributes,\n        offset,\n        (cursor.x + cursor.width) * this._dimensions.device.cell.width - cursor.dpr,\n        cursor.y * this._dimensions.device.cell.height,\n        cursor.dpr,\n        this._dimensions.device.cell.height,\n        this._cursorFloat\n      );\n    }\n\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: Vertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    $isDefault = false;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          $rgba = this._themeService.colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          $rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          $rgba = this._themeService.colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          $rgba = this._themeService.colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          $rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          $rgba = this._themeService.colors.background.rgba;\n          $isDefault = true;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    $x1 = startX * this._dimensions.device.cell.width;\n    $y1 = y * this._dimensions.device.cell.height;\n    $r = (($rgba >> 24) & 0xFF) / 255;\n    $g = (($rgba >> 16) & 0xFF) / 255;\n    $b = (($rgba >> 8 ) & 0xFF) / 255;\n    $a = 1;\n\n    this._addRectangle(vertices.attributes, offset, $x1, $y1, (endX - startX) * this._dimensions.device.cell.width, this._dimensions.device.cell.height, $r, $g, $b, $a);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1 / this._dimensions.device.canvas.width;\n    array[offset + 1] = y1 / this._dimensions.device.canvas.height;\n    array[offset + 2] = width / this._dimensions.device.canvas.width;\n    array[offset + 3] = height / this._dimensions.device.canvas.height;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1 / this._dimensions.device.canvas.width;\n    array[offset + 1] = y1 / this._dimensions.device.canvas.height;\n    array[offset + 2] = width / this._dimensions.device.canvas.width;\n    array[offset + 3] = height / this._dimensions.device.canvas.height;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICursorRenderModel, IRenderModel } from './Types';\nimport { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { createSelectionRenderModel } from 'browser/renderer/shared/SelectionRenderModel';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 4;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\nexport const RENDER_MODEL_EXT_OFFSET = 3;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n  public cursor?: ICursorRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = createSelectionRenderModel();\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    this.cells.fill(0, 0);\n    this.lineLengths.fill(0, 0);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { CellColorResolver } from 'browser/renderer/shared/CellColorResolver';\nimport { acquireTextureAtlas, removeTerminalFromCache } from 'browser/renderer/shared/CharAtlasCache';\nimport { observeDevicePixelDimensions } from 'browser/renderer/shared/DevicePixelObserver';\nimport { createRenderDimensions, throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { TextureAtlas } from 'browser/renderer/shared/TextureAtlas';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { ICharacterJoinerService, ICharSizeService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ITerminal } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { CellData } from 'common/buffer/CellData';\nimport { Attributes, Content, NULL_CELL_CHAR, NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { Disposable, getDisposeArrayDisposable, toDisposable } from 'common/Lifecycle';\nimport { ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { CharData, IBufferLine, ICellData } from 'common/Types';\nimport { IDisposable, Terminal } from 'xterm';\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { CursorBlinkStateManager } from 'browser/renderer/shared/CursorBlinkStateManager';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { COMBINED_CHAR_BIT_MASK, RenderModel, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_EXT_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { IWebGL2RenderingContext } from './Types';\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _charAtlasDisposable: IDisposable | undefined;\n  private _charAtlas: ITextureAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n  private _cellColorResolver: CellColorResolver;\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer?: RectangleRenderer;\n  private _glyphRenderer?: GlyphRenderer;\n\n  public readonly dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n  private _contextRestorationTimeout: number | undefined;\n\n  private readonly _onChangeTextureAtlas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onChangeTextureAtlas = this._onChangeTextureAtlas.event;\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n  private readonly _onRemoveTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onRemoveTextureAtlasCanvas = this._onRemoveTextureAtlasCanvas.event;\n  private readonly _onRequestRedraw = this.register(new EventEmitter<IRequestRedrawEvent>());\n  public readonly onRequestRedraw = this._onRequestRedraw.event;\n  private readonly _onContextLoss = this.register(new EventEmitter<void>());\n  public readonly onContextLoss = this._onContextLoss.event;\n\n  constructor(\n    private _terminal: Terminal,\n    private readonly _characterJoinerService: ICharacterJoinerService,\n    private readonly _charSizeService: ICharSizeService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    private readonly _coreService: ICoreService,\n    private readonly _decorationService: IDecorationService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _themeService: IThemeService,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this.register(this._themeService.onChangeColors(() => this._handleColorChange()));\n\n    this._cellColorResolver = new CellColorResolver(this._terminal, this._model.selection, this._decorationService, this._coreBrowserService, this._themeService);\n\n    this._core = (this._terminal as any)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement!, 2, this._terminal, this._core.linkifier2, this._coreBrowserService, _optionsService, this._themeService)\n    ];\n    this.dimensions = createRenderDimensions();\n    this._devicePixelRatio = this._coreBrowserService.dpr;\n    this._updateDimensions();\n    this._updateCursorBlink();\n    this.register(_optionsService.onOptionChange(() => this._handleOptionsChanged()));\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n      throw new Error('WebGL2 not supported ' + this._gl);\n    }\n\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextlost', (e) => {\n      console.log('webglcontextlost event received');\n      // Prevent the default behavior in order to enable WebGL context restoration.\n      e.preventDefault();\n      // Wait a few seconds to see if the 'webglcontextrestored' event is fired.\n      // If not, dispatch the onContextLoss notification to observers.\n      this._contextRestorationTimeout = setTimeout(() => {\n        this._contextRestorationTimeout = undefined;\n        console.warn('webgl context not restored; firing onContextLoss');\n        this._onContextLoss.fire(e);\n      }, 3000 /* ms */);\n    }));\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextrestored', (e) => {\n      console.warn('webglcontextrestored event received');\n      clearTimeout(this._contextRestorationTimeout);\n      this._contextRestorationTimeout = undefined;\n      // The texture atlas and glyph renderer must be fully reinitialized\n      // because their contents have been lost.\n      removeTerminalFromCache(this._terminal);\n      this._initializeWebGLState();\n      this._requestRedrawViewport();\n    }));\n\n    this.register(observeDevicePixelDimensions(this._canvas, this._coreBrowserService.window, (w, h) => this._setCanvasDevicePixelDimensions(w, h)));\n\n    this._core.screenElement!.appendChild(this._canvas);\n\n    [this._rectangleRenderer, this._glyphRenderer] = this._initializeWebGLState();\n\n    this._isAttached = this._coreBrowserService.window.document.body.contains(this._core.screenElement!);\n\n    this.register(toDisposable(() => {\n      for (const l of this._renderLayers) {\n        l.dispose();\n      }\n      this._canvas.parentElement?.removeChild(this._canvas);\n      removeTerminalFromCache(this._terminal);\n    }));\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.pages[0].canvas;\n  }\n\n  private _handleColorChange(): void {\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._clearModel(true);\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== this._coreBrowserService.dpr) {\n      this._devicePixelRatio = this._coreBrowserService.dpr;\n      this.handleResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this._terminal, this.dimensions);\n    }\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.device.canvas.width;\n    this._canvas.height = this.dimensions.device.canvas.height;\n    this._canvas.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._canvas.style.height = `${this.dimensions.css.canvas.height}px`;\n\n    // Resize the screen\n    this._core.screenElement!.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._core.screenElement!.style.height = `${this.dimensions.css.canvas.height}px`;\n\n    this._rectangleRenderer?.setDimensions(this.dimensions);\n    this._rectangleRenderer?.handleResize();\n    this._glyphRenderer?.setDimensions(this.dimensions);\n    this._glyphRenderer?.handleResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh. Resizing `_glyphRenderer` should clear it already,\n    // so there is no need to clear it again here.\n    this._clearModel(false);\n  }\n\n  public handleCharSizeChanged(): void {\n    this.handleResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public handleBlur(): void {\n    for (const l of this._renderLayers) {\n      l.handleBlur(this._terminal);\n    }\n    this._cursorBlinkStateManager?.pause();\n    // Request a redraw for active/inactive selection background\n    this._requestRedrawViewport();\n  }\n\n  public handleFocus(): void {\n    for (const l of this._renderLayers) {\n      l.handleFocus(this._terminal);\n    }\n    this._cursorBlinkStateManager?.resume();\n    // Request a redraw for active/inactive selection background\n    this._requestRedrawViewport();\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    for (const l of this._renderLayers) {\n      l.handleSelectionChanged(this._terminal, start, end, columnSelectMode);\n    }\n    this._model.selection.update(this._terminal, start, end, columnSelectMode);\n    this._requestRedrawViewport();\n  }\n\n  public handleCursorMove(): void {\n    for (const l of this._renderLayers) {\n      l.handleCursorMove(this._terminal);\n    }\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n  }\n\n  private _handleOptionsChanged(): void {\n    this._updateDimensions();\n    this._refreshCharAtlas();\n    this._updateCursorBlink();\n  }\n\n  /**\n   * Initializes members dependent on WebGL context state.\n   */\n  private _initializeWebGLState(): [RectangleRenderer, GlyphRenderer] {\n    // Dispose any previous rectangle and glyph renderers before creating new ones.\n    this._rectangleRenderer?.dispose();\n    this._glyphRenderer?.dispose();\n\n    this._rectangleRenderer = this.register(new RectangleRenderer(this._terminal, this._gl, this.dimensions, this._themeService));\n    this._glyphRenderer = this.register(new GlyphRenderer(this._terminal, this._gl, this.dimensions));\n\n    // Update dimensions and acquire char atlas\n    this.handleCharSizeChanged();\n\n    return [this._rectangleRenderer, this._glyphRenderer];\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.device.char.width <= 0 && this.dimensions.device.char.height <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireTextureAtlas(\n      this._terminal,\n      this._optionsService.rawOptions,\n      this._themeService.colors,\n      this.dimensions.device.cell.width,\n      this.dimensions.device.cell.height,\n      this.dimensions.device.char.width,\n      this.dimensions.device.char.height,\n      this._coreBrowserService.dpr\n    );\n    if (this._charAtlas !== atlas) {\n      this._charAtlasDisposable?.dispose();\n      this._onChangeTextureAtlas.fire(atlas.pages[0].canvas);\n      this._charAtlasDisposable = getDisposeArrayDisposable([\n        forwardEvent(atlas.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas),\n        forwardEvent(atlas.onRemoveTextureAtlasCanvas, this._onRemoveTextureAtlasCanvas)\n      ]);\n    }\n    this._charAtlas = atlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer?.setAtlas(this._charAtlas);\n  }\n\n  /**\n   * Clear the model.\n   * @param clearGlyphRenderer Whether to also clear the glyph renderer. This\n   * should be true generally to make sure it is in the same state as the model.\n   */\n  private _clearModel(clearGlyphRenderer: boolean): void {\n    this._model.clear();\n    if (clearGlyphRenderer) {\n      this._glyphRenderer?.clear();\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    this._charAtlas?.clearTexture();\n    this._clearModel(true);\n    this._requestRedrawViewport();\n  }\n\n  public clear(): void {\n    this._clearModel(true);\n    for (const l of this._renderLayers) {\n      l.reset(this._terminal);\n    }\n\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n    this._updateCursorBlink();\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (this._coreBrowserService.window.document.body.contains(this._core.screenElement!) && this._charSizeService.width && this._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    for (const l of this._renderLayers) {\n      l.handleGridChanged(this._terminal, start, end);\n    }\n\n    if (!this._glyphRenderer || !this._rectangleRenderer) {\n      return;\n    }\n\n    // Tell renderer the frame is beginning\n    // upon a model clear also refresh the full viewport model\n    // (also triggered by an atlas page merge, part of #4480)\n    if (this._glyphRenderer.beginFrame()) {\n      this._clearModel(true);\n      this._updateModel(0, this._terminal.rows - 1);\n    } else {\n      // just update changed lines to draw\n      this._updateModel(start, end);\n    }\n\n    // Render\n    this._rectangleRenderer?.renderBackgrounds();\n    this._glyphRenderer?.render(this._model);\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isCursorVisible) {\n      this._rectangleRenderer?.renderCursor();\n    }\n  }\n\n  private _updateCursorBlink(): void {\n    if (this._terminal.options.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = this.register(new CursorBlinkStateManager(() => {\n          this._requestRedrawCursor();\n        }, this._coreBrowserService));\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._requestRedrawCursor();\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n    let cell: ICellData = this._workCell;\n\n    // Declare variable ahead of time to avoid garbage collection\n    let lastBg: number;\n    let y: number;\n    let row: number;\n    let line: IBufferLine;\n    let joinedRanges: [number, number][];\n    let isJoined: boolean;\n    let lastCharX: number;\n    let range: [number, number];\n    let chars: string;\n    let code: number;\n    let i: number;\n    let x: number;\n    let j: number;\n    start = clamp(start, terminal.rows - 1, 0);\n    end = clamp(end, terminal.rows - 1, 0);\n\n    const cursorY = this._terminal.buffer.active.baseY + this._terminal.buffer.active.cursorY;\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(this._terminal.buffer.active.cursorX, terminal.cols - 1);\n    let lastCursorX = -1;\n    const isCursorVisible =\n      this._coreService.isCursorInitialized &&\n      !this._coreService.isCursorHidden &&\n      (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isCursorVisible);\n    this._model.cursor = undefined;\n    let modelUpdated = false;\n\n    for (y = start; y <= end; y++) {\n      row = y + terminal.buffer.ydisp;\n      line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (x = 0; x < terminal.cols; x++) {\n        lastBg = this._cellColorResolver.result.bg;\n        line.loadCell(x, cell);\n\n        if (x === 0) {\n          lastBg = this._cellColorResolver.result.bg;\n        }\n\n        // If true, indicates that the current character(s) to draw were joined.\n        isJoined = false;\n        lastCharX = x;\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly.\n          cell = new JoinedCellData(\n            cell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        chars = cell.getChars();\n        code = cell.getCode();\n        i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        // Load colors/resolve overrides into work colors\n        this._cellColorResolver.resolve(cell, x, row);\n\n        // Override colors for cursor cell\n        if (isCursorVisible && row === cursorY) {\n          if (x === cursorX) {\n            this._model.cursor = {\n              x: cursorX,\n              y: this._terminal.buffer.active.cursorY,\n              width: cell.getWidth(),\n              style: this._coreBrowserService.isFocused ?\n                (terminal.options.cursorStyle || 'block') : terminal.options.cursorInactiveStyle,\n              cursorWidth: terminal.options.cursorWidth,\n              dpr: this._devicePixelRatio\n            };\n            lastCursorX = cursorX + cell.getWidth() - 1;\n          }\n          if (x >= cursorX && x <= lastCursorX &&\n              ((this._coreBrowserService.isFocused &&\n              (terminal.options.cursorStyle || 'block') === 'block') ||\n              (this._coreBrowserService.isFocused === false &&\n              terminal.options.cursorInactiveStyle === 'block'))) {\n            this._cellColorResolver.result.fg =\n              Attributes.CM_RGB | (this._themeService.colors.cursorAccent.rgba >> 8 & Attributes.RGB_MASK);\n            this._cellColorResolver.result.bg =\n              Attributes.CM_RGB | (this._themeService.colors.cursor.rgba >> 8 & Attributes.RGB_MASK);\n          }\n        }\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === this._cellColorResolver.result.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === this._cellColorResolver.result.fg &&\n            this._model.cells[i + RENDER_MODEL_EXT_OFFSET] === this._cellColorResolver.result.ext) {\n          continue;\n        }\n\n        modelUpdated = true;\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code |= COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = this._cellColorResolver.result.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = this._cellColorResolver.result.fg;\n        this._model.cells[i + RENDER_MODEL_EXT_OFFSET] = this._cellColorResolver.result.ext;\n\n        this._glyphRenderer!.updateCell(x, y, code, this._cellColorResolver.result.bg, this._cellColorResolver.result.fg, this._cellColorResolver.result.ext, chars, lastBg);\n\n        if (isJoined) {\n          // Restore work cell\n          cell = this._workCell;\n\n          // Null out non-first cells\n          for (x++; x < lastCharX; x++) {\n            j = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n            this._glyphRenderer!.updateCell(x, y, NULL_CELL_CODE, 0, 0, 0, NULL_CELL_CHAR, 0);\n            this._model.cells[j] = NULL_CELL_CODE;\n            this._model.cells[j + RENDER_MODEL_BG_OFFSET] = this._cellColorResolver.result.bg;\n            this._model.cells[j + RENDER_MODEL_FG_OFFSET] = this._cellColorResolver.result.fg;\n            this._model.cells[j + RENDER_MODEL_EXT_OFFSET] = this._cellColorResolver.result.ext;\n          }\n        }\n      }\n    }\n    if (modelUpdated) {\n      this._rectangleRenderer!.updateBackgrounds(this._model);\n    }\n    this._rectangleRenderer!.updateCursor(this._model);\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!this._charSizeService.width || !this._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the device character width. Width is floored as it must be drawn to an integer grid\n    // in order for the char atlas glyphs to not be blurry.\n    this.dimensions.device.char.width = Math.floor(this._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the device character height. Height is ceiled in case devicePixelRatio is a\n    // floating point number in order to ensure there is enough space to draw the character to the\n    // cell.\n    this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the device cell height, if lineHeight is _not_ 1, the resulting value will be\n    // floored since lineHeight can never be lower then 1, this guarentees the device cell height\n    // will always be larger than device char height.\n    this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight);\n\n    // Calculate the y offset within a cell that glyph should draw at in order for it to be centered\n    // correctly within the cell.\n    this.dimensions.device.char.top = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.device.cell.height - this.dimensions.device.char.height) / 2);\n\n    // Calculate the device cell width, taking the letterSpacing into account.\n    this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing);\n\n    // Calculate the x offset with a cell that text should draw from in order for it to be centered\n    // correctly within the cell.\n    this.dimensions.device.char.left = Math.floor(this._optionsService.rawOptions.letterSpacing / 2);\n\n    // Recalculate the canvas dimensions, the device dimensions define the actual number of pixel in\n    // the canvas\n    this.dimensions.device.canvas.height = this._terminal.rows * this.dimensions.device.cell.height;\n    this.dimensions.device.canvas.width = this._terminal.cols * this.dimensions.device.cell.width;\n\n    // The the size of the canvas on the page. It's important that this rounds to nearest integer\n    // and not ceils as browsers often have floating point precision issues where\n    // `window.devicePixelRatio` ends up being something like `1.100000023841858` for example, when\n    // it's actually 1.1. Ceiling may causes blurriness as the backing canvas image is 1 pixel too\n    // large for the canvas element size.\n    this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / this._devicePixelRatio);\n    this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / this._devicePixelRatio);\n\n    // Get the CSS dimensions of an individual cell. This needs to be derived from the calculated\n    // device pixel canvas value above. CharMeasure.width/height by itself is insufficient when the\n    // page is not at 100% zoom level as CharMeasure is measured in CSS pixels, but the actual char\n    // size on the canvas can differ.\n    this.dimensions.css.cell.height = this.dimensions.device.cell.height / this._devicePixelRatio;\n    this.dimensions.css.cell.width = this.dimensions.device.cell.width / this._devicePixelRatio;\n  }\n\n  private _setCanvasDevicePixelDimensions(width: number, height: number): void {\n    if (this._canvas.width === width && this._canvas.height === height) {\n      return;\n    }\n    // While the actual canvas size has changed, keep device canvas dimensions as the value before\n    // the change as it's an exact multiple of the cell sizes.\n    this._canvas.width = width;\n    this._canvas.height = height;\n    this._requestRedrawViewport();\n  }\n\n  private _requestRedrawViewport(): void {\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  private _requestRedrawCursor(): void {\n    const cursorY = this._terminal.buffer.active.cursorY;\n    this._onRequestRedraw.fire({ start: cursorY, end: cursorY });\n  }\n}\n\n// TODO: Share impl with core\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport class GLTexture {\n  public texture: WebGLTexture;\n  public version: number;\n\n  constructor(texture: WebGLTexture) {\n    this.texture = texture;\n    this.version = -1;\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireTextureAtlas } from 'browser/renderer/shared/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { TEXT_BASELINE } from 'browser/renderer/shared/Constants';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { IRenderDimensions, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IOptionsService } from 'common/services/Services';\n\nexport abstract class BaseRenderLayer extends Disposable implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _deviceCharWidth: number = 0;\n  private _deviceCharHeight: number = 0;\n  private _deviceCellWidth: number = 0;\n  private _deviceCellHeight: number = 0;\n  private _deviceCharLeft: number = 0;\n  private _deviceCharTop: number = 0;\n\n  protected _charAtlas: ITextureAtlas | undefined;\n\n  constructor(\n    terminal: Terminal,\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected readonly _coreBrowserService: ICoreBrowserService,\n    protected readonly _optionsService: IOptionsService,\n    protected readonly _themeService: IThemeService\n  ) {\n    super();\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n    this.register(this._themeService.onChangeColors(e => {\n      this._refreshCharAtlas(terminal, e);\n      this.reset(terminal);\n    }));\n    this.register(toDisposable(() => {\n      this._canvas.remove();\n      this._charAtlas?.dispose();\n    }));\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public handleBlur(terminal: Terminal): void {}\n  public handleFocus(terminal: Terminal): void {}\n  public handleCursorMove(terminal: Terminal): void {}\n  public handleGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public handleSelectionChanged(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._themeService.colors);\n    this.handleGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: ReadonlyColorSet): void {\n    if (this._deviceCharWidth <= 0 && this._deviceCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireTextureAtlas(terminal, this._optionsService.rawOptions, colorSet, this._deviceCellWidth, this._deviceCellHeight, this._deviceCharWidth, this._deviceCharHeight, this._coreBrowserService.dpr);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._deviceCellWidth = dim.device.cell.width;\n    this._deviceCellHeight = dim.device.cell.height;\n    this._deviceCharWidth = dim.device.char.width;\n    this._deviceCharHeight = dim.device.char.height;\n    this._deviceCharLeft = dim.device.char.left;\n    this._deviceCharTop = dim.device.char.top;\n    this._canvas.width = dim.device.canvas.width;\n    this._canvas.height = dim.device.canvas.height;\n    this._canvas.style.width = `${dim.css.canvas.width}px`;\n    this._canvas.style.height = `${dim.css.canvas.height}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._themeService.colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._deviceCellWidth,\n      (y + 1) * this._deviceCellHeight - this._coreBrowserService.dpr - 1 /* Ensure it's drawn within the cell */,\n      width * this._deviceCellWidth,\n      this._coreBrowserService.dpr);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._deviceCellWidth,\n        y * this._deviceCellHeight,\n        width * this._deviceCellWidth,\n        height * this._deviceCellHeight);\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n      this._ctx.fillRect(\n        x * this._deviceCellWidth,\n        y * this._deviceCellHeight,\n        width * this._deviceCellWidth,\n        height * this._deviceCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipCell(x, y, cell.getWidth());\n    this._ctx.fillText(\n      cell.getChars(),\n      x * this._deviceCellWidth + this._deviceCharLeft,\n      y * this._deviceCellHeight + this._deviceCharTop + this._deviceCharHeight);\n  }\n\n  /**\n   * Clips a cell to ensure no pixels will be drawn outside of it.\n   * @param x The column to clip.\n   * @param y The row to clip.\n   * @param width The number of columns to clip.\n   */\n  private _clipCell(x: number, y: number, width: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      x * this._deviceCellWidth,\n      y * this._deviceCellHeight,\n      width * this._deviceCellWidth,\n      this._deviceCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.options.fontSize! * this._coreBrowserService.dpr}px ${terminal.options.fontFamily}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { is256Color } from 'browser/renderer/shared/CharAtlasUtils';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ILinkifier2, ILinkifierEvent } from 'browser/Types';\nimport { IOptionsService } from 'common/services/Services';\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    terminal: Terminal,\n    linkifier2: ILinkifier2,\n    coreBrowserService: ICoreBrowserService,\n    optionsService: IOptionsService,\n    themeService: IThemeService\n  ) {\n    super(terminal, container, 'link', zIndex, true, coreBrowserService, optionsService, themeService);\n\n    this.register(linkifier2.onShowLinkUnderline(e => this._handleShowLinkUnderline(e)));\n    this.register(linkifier2.onHideLinkUnderline(e => this._handleHideLinkUnderline(e)));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _handleShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._themeService.colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _handleHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param node The node to add a listener to.\n * @param type The event type.\n * @param handler The handler for the listener.\n * @param options The boolean or options object to pass on to the event\n * listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n","import { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { Attributes, BgFlags, FgFlags } from 'common/buffer/Constants';\nimport { IDecorationService } from 'common/services/Services';\nimport { ICellData } from 'common/Types';\nimport { Terminal } from 'xterm';\n\n// Work variables to avoid garbage collection\nlet $fg = 0;\nlet $bg = 0;\nlet $hasFg = false;\nlet $hasBg = false;\nlet $isSelected = false;\nlet $colors: ReadonlyColorSet | undefined;\n\nexport class CellColorResolver {\n  /**\n   * The shared result of the {@link resolve} call. This is only safe to use immediately after as\n   * any other calls will share object.\n   */\n  public readonly result: { fg: number, bg: number, ext: number } = {\n    fg: 0,\n    bg: 0,\n    ext: 0\n  };\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private readonly _selectionRenderModel: ISelectionRenderModel,\n    private readonly _decorationService: IDecorationService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    private readonly _themeService: IThemeService\n  ) {\n  }\n\n  /**\n   * Resolves colors for the cell, putting the result into the shared {@link result}. This resolves\n   * overrides, inverse and selection for the cell which can then be used to feed into the renderer.\n   */\n  public resolve(cell: ICellData, x: number, y: number): void {\n    this.result.bg = cell.bg;\n    this.result.fg = cell.fg;\n    this.result.ext = cell.bg & BgFlags.HAS_EXTENDED ? cell.extended.ext : 0;\n    // Get any foreground/background overrides, this happens on the model to avoid spreading\n    // override logic throughout the different sub-renderers\n\n    // Reset overrides work variables\n    $bg = 0;\n    $fg = 0;\n    $hasBg = false;\n    $hasFg = false;\n    $isSelected = false;\n    $colors = this._themeService.colors;\n\n    // Apply decorations on the bottom layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'bottom', d => {\n      if (d.backgroundColorRGB) {\n        $bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        $hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        $fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        $hasFg = true;\n      }\n    });\n\n    // Apply the selection color if needed\n    $isSelected = this._selectionRenderModel.isCellSelected(this._terminal, x, y);\n    if ($isSelected) {\n      $bg = (this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba >> 8 & 0xFFFFFF;\n      $hasBg = true;\n      if ($colors.selectionForeground) {\n        $fg = $colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n        $hasFg = true;\n      }\n    }\n\n    // Apply decorations on the top layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'top', d => {\n      if (d.backgroundColorRGB) {\n        $bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        $hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        $fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        $hasFg = true;\n      }\n    });\n\n    // Convert any overrides from rgba to the fg/bg packed format. This resolves the inverse flag\n    // ahead of time in order to use the correct cache key\n    if ($hasBg) {\n      if ($isSelected) {\n        // Non-RGB attributes from model + force non-dim + override + force RGB color mode\n        $bg = (cell.bg & ~Attributes.RGB_MASK & ~BgFlags.DIM) | $bg | Attributes.CM_RGB;\n      } else {\n        // Non-RGB attributes from model + override + force RGB color mode\n        $bg = (cell.bg & ~Attributes.RGB_MASK) | $bg | Attributes.CM_RGB;\n      }\n    }\n    if ($hasFg) {\n      // Non-RGB attributes from model + force disable inverse + override + force RGB color mode\n      $fg = (cell.fg & ~Attributes.RGB_MASK & ~FgFlags.INVERSE) | $fg | Attributes.CM_RGB;\n    }\n\n    // Handle case where inverse was specified by only one of bg override or fg override was set,\n    // resolving the other inverse color and setting the inverse flag if needed.\n    if (this.result.fg & FgFlags.INVERSE) {\n      if ($hasBg && !$hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this.result.bg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          $fg = (this.result.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | (($colors.background.rgba >> 8 & 0xFFFFFF) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          $fg = (this.result.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | this.result.bg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        $hasFg = true;\n      }\n      if (!$hasBg && $hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this.result.fg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          $bg = (this.result.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | (($colors.foreground.rgba >> 8 & 0xFFFFFF) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          $bg = (this.result.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | this.result.fg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        $hasBg = true;\n      }\n    }\n\n    // Release object\n    $colors = undefined;\n\n    // Use the override if it exists\n    this.result.bg = $hasBg ? $bg : this.result.bg;\n    this.result.fg = $hasFg ? $fg : this.result.fg;\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { TextureAtlas } from 'browser/renderer/shared/TextureAtlas';\nimport { ITerminalOptions, Terminal } from 'xterm';\nimport { ITerminal, ReadonlyColorSet } from 'browser/Types';\nimport { ICharAtlasConfig, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { generateConfig, configEquals } from 'browser/renderer/shared/CharAtlasUtils';\n\ninterface ITextureAtlasCacheEntry {\n  atlas: ITextureAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ITextureAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n */\nexport function acquireTextureAtlas(\n  terminal: Terminal,\n  options: Required<ITerminalOptions>,\n  colors: ReadonlyColorSet,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  deviceCharWidth: number,\n  deviceCharHeight: number,\n  devicePixelRatio: number\n): ITextureAtlas {\n  const newConfig = generateConfig(deviceCellWidth, deviceCellHeight, deviceCharWidth, deviceCharHeight, options, colors, devicePixelRatio);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const core: ITerminal = (terminal as any)._core;\n  const newEntry: ITextureAtlasCacheEntry = {\n    atlas: new TextureAtlas(document, newConfig, core.unicodeService),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { ITerminalOptions } from 'xterm';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { NULL_COLOR } from 'common/Color';\n\nexport function generateConfig(deviceCellWidth: number, deviceCellHeight: number, deviceCharWidth: number, deviceCharHeight: number, options: Required<ITerminalOptions>, colors: ReadonlyColorSet, devicePixelRatio: number): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selectionForeground: NULL_COLOR,\n    selectionBackgroundTransparent: NULL_COLOR,\n    selectionBackgroundOpaque: NULL_COLOR,\n    selectionInactiveBackgroundTransparent: NULL_COLOR,\n    selectionInactiveBackgroundOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache,\n    halfContrastCache: colors.halfContrastCache\n  };\n  return {\n    customGlyphs: options.customGlyphs,\n    devicePixelRatio,\n    letterSpacing: options.letterSpacing,\n    lineHeight: options.lineHeight,\n    deviceCellWidth: deviceCellWidth,\n    deviceCellHeight: deviceCellHeight,\n    deviceCharWidth: deviceCharWidth,\n    deviceCharHeight: deviceCharHeight,\n    fontFamily: options.fontFamily,\n    fontSize: options.fontSize,\n    fontWeight: options.fontWeight,\n    fontWeightBold: options.fontWeightBold,\n    allowTransparency: options.allowTransparency,\n    drawBoldTextInBrightColors: options.drawBoldTextInBrightColors,\n    minimumContrastRatio: options.minimumContrastRatio,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.customGlyphs === b.customGlyphs &&\n      a.lineHeight === b.lineHeight &&\n      a.letterSpacing === b.letterSpacing &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.deviceCharWidth === b.deviceCharWidth &&\n      a.deviceCharHeight === b.deviceCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground.rgba === b.colors.foreground.rgba &&\n      a.colors.background.rgba === b.colors.background.rgba;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge\n// would result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from 'browser/services/Services';\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    private _renderCallback: () => void,\n    private _coreBrowserService: ICoreBrowserService\n  ) {\n    this.isCursorVisible = true;\n    if (this._coreBrowserService.isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = this._coreBrowserService.window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = this._coreBrowserService.window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation();\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '▔': [{ x: 0, y: 0, w: 8, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 4, y: 0, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '░': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '▒': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '▓': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * @param xp The percentage of 15% of the x axis.\n * @param yp The percentage of 15% of the x axis on the y axis.\n */\ntype DrawFunctionDefinition = (xp: number, yp: number) => string;\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | DrawFunctionDefinition } | undefined } = {\n  // Uniform normal and bold\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '╭': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,1,.5` },\n  '╮': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,0,.5` },\n  '╯': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,0,.5` },\n  '╰': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,1,.5` }\n};\n\ninterface IVectorShape {\n  d: string;\n  type: VectorType;\n  leftPadding?: number;\n  rightPadding?: number;\n}\n\nconst enum VectorType {\n  FILL,\n  STROKE\n}\n\n/**\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\n * reason these characters are defined specially is to avoid common problems if a user's font has\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\n * issues can occur around AA/SPAA.\n *\n * The line variants draw beyond the cell and get clipped to ensure the end of the line is not\n * visible.\n *\n * Original symbols defined in https://github.com/powerline/fontpatcher\n */\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\n  // Right triangle solid\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL, rightPadding: 2 },\n  // Right triangle line\n  '\\u{E0B1}': { d: 'M-1,-.5 L1,.5 L-1,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Left triangle solid\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL, leftPadding: 2 },\n  // Left triangle line\n  '\\u{E0B3}': { d: 'M2,-.5 L0,.5 L2,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Right semi-circle solid\n  '\\u{E0B4}': { d: 'M0,0 L0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.FILL, rightPadding: 1 },\n  // Right semi-circle line\n  '\\u{E0B5}': { d: 'M0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.STROKE, rightPadding: 1 },\n  // Left semi-circle solid\n  '\\u{E0B6}': { d: 'M1,0 L1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.FILL, leftPadding: 1 },\n  // Left semi-circle line\n  '\\u{E0B7}': { d: 'M1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.STROKE, leftPadding: 1 },\n  // Lower left triangle\n  '\\u{E0B8}': { d: 'M-.5,-.5 L1.5,1.5 L-.5,1.5', type: VectorType.FILL },\n  // Backslash separator\n  '\\u{E0B9}': { d: 'M-.5,-.5 L1.5,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Lower right triangle\n  '\\u{E0BA}': { d: 'M1.5,-.5 L-.5,1.5 L1.5,1.5', type: VectorType.FILL },\n  // Upper left triangle\n  '\\u{E0BC}': { d: 'M1.5,-.5 L-.5,1.5 L-.5,-.5', type: VectorType.FILL },\n  // Forward slash separator\n  '\\u{E0BD}': { d: 'M1.5,-.5 L-.5,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Upper right triangle\n  '\\u{E0BE}': { d: 'M-.5,-.5 L1.5,1.5 L1.5,-.5', type: VectorType.FILL }\n};\n// Forward slash separator redundant\npowerlineDefinitions['\\u{E0BB}'] = powerlineDefinitions['\\u{E0BD}'];\n// Backslash separator redundant\npowerlineDefinitions['\\u{E0BF}'] = powerlineDefinitions['\\u{E0B9}'];\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight, devicePixelRatio);\n    return true;\n  }\n\n  const powerlineDefinition = powerlineDefinitions[c];\n  if (powerlineDefinition) {\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight, fontSize, devicePixelRatio);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = deviceCellWidth / 8;\n    const yEighth = deviceCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.slice(1, 3), 16);\n      g = parseInt(fillStyle.slice(3, 5), 16);\n      b = parseInt(fillStyle.slice(5, 7), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\n *\n * Other:\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\n *\n * All box drawing characters:\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\n *\n * ---\n *\n * Box drawing alignment tests:                                          █\n *                                                                       ▉\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  devicePixelRatio: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / deviceCellHeight * deviceCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, deviceCellWidth, deviceCellHeight, xOffset, yOffset, true, devicePixelRatio));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction drawPowerlineChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IVectorShape,\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): void {\n  // Clip the cell to make sure drawing doesn't occur beyond bounds\n  const clipRegion = new Path2D();\n  clipRegion.rect(xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n  ctx.clip(clipRegion);\n\n  ctx.beginPath();\n  // Scale the stroke with DPR and font size\n  const cssLineWidth = fontSize / 12;\n  ctx.lineWidth = devicePixelRatio * cssLineWidth;\n  for (const instruction of charDefinition.d.split(' ')) {\n    const type = instruction[0];\n    const f = svgToCanvasInstructionMap[type];\n    if (!f) {\n      console.error(`Could not find drawing instructions for \"${type}\"`);\n      continue;\n    }\n    const args: string[] = instruction.substring(1).split(',');\n    if (!args[0] || !args[1]) {\n      continue;\n    }\n    f(ctx, translateArgs(\n      args,\n      deviceCellWidth,\n      deviceCellHeight,\n      xOffset,\n      yOffset,\n      false,\n      devicePixelRatio,\n      (charDefinition.leftPadding ?? 0) * (cssLineWidth / 2),\n      (charDefinition.rightPadding ?? 0) * (cssLineWidth / 2)\n    ));\n  }\n  if (charDefinition.type === VectorType.STROKE) {\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.stroke();\n  } else {\n    ctx.fill();\n  }\n  ctx.closePath();\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, doClamp: boolean, devicePixelRatio: number, leftPadding: number = 0, rightPadding: number = 0): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth - (leftPadding * devicePixelRatio) - (rightPadding * devicePixelRatio);\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset + (leftPadding * devicePixelRatio);\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\n\nexport function observeDevicePixelDimensions(element: HTMLElement, parentWindow: Window & typeof globalThis, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\n  // Observe any resizes to the element and extract the actual pixel size of the element if the\n  // devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\n  // converting between CSS pixels and device pixels which causes blurry rendering when device\n  // pixel ratio is not a round number.\n  let observer: ResizeObserver | undefined = new parentWindow.ResizeObserver((entries) => {\n    const entry = entries.find((entry) => entry.target === element);\n    if (!entry) {\n      return;\n    }\n\n    // Disconnect if devicePixelContentBoxSize isn't supported by the browser\n    if (!('devicePixelContentBoxSize' in entry)) {\n      observer?.disconnect();\n      observer = undefined;\n      return;\n    }\n\n    // Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\n    const width = entry.devicePixelContentBoxSize[0].inlineSize;\n    const height = entry.devicePixelContentBoxSize[0].blockSize;\n    if (width > 0 && height > 0) {\n      callback(width, height);\n    }\n  });\n  try {\n    observer.observe(element, { box: ['device-pixel-content-box'] } as any);\n  } catch {\n    observer.disconnect();\n    observer = undefined;\n  }\n  return toDisposable(() => observer?.disconnect());\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDimensions, IOffset, IRenderDimensions } from 'browser/renderer/shared/Types';\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n\nexport function createRenderDimensions(): IRenderDimensions {\n  return {\n    css: {\n      canvas: createDimension(),\n      cell: createDimension()\n    },\n    device: {\n      canvas: createDimension(),\n      cell: createDimension(),\n      char: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }\n    }\n  };\n}\n\nfunction createDimension(): IDimensions {\n  return {\n    width: 0,\n    height: 0\n  };\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { Terminal } from 'xterm';\n\nclass SelectionRenderModel implements ISelectionRenderModel {\n  public hasSelection!: boolean;\n  public columnSelectMode!: boolean;\n  public viewportStartRow!: number;\n  public viewportEndRow!: number;\n  public viewportCappedStartRow!: number;\n  public viewportCappedEndRow!: number;\n  public startCol!: number;\n  public endCol!: number;\n  public selectionStart: [number, number] | undefined;\n  public selectionEnd: [number, number] | undefined;\n\n  constructor() {\n    this.clear();\n  }\n\n  public clear(): void {\n    this.hasSelection = false;\n    this.columnSelectMode = false;\n    this.viewportStartRow = 0;\n    this.viewportEndRow = 0;\n    this.viewportCappedStartRow = 0;\n    this.viewportCappedEndRow = 0;\n    this.startCol = 0;\n    this.endCol = 0;\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n  }\n\n  public update(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this.selectionStart = start;\n    this.selectionEnd = end;\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this.clear();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.active.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.active.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this.clear();\n      return;\n    }\n\n    this.hasSelection = true;\n    this.columnSelectMode = columnSelectMode;\n    this.viewportStartRow = viewportStartRow;\n    this.viewportEndRow = viewportEndRow;\n    this.viewportCappedStartRow = viewportCappedStartRow;\n    this.viewportCappedEndRow = viewportCappedEndRow;\n    this.startCol = start[0];\n    this.endCol = end[0];\n  }\n\n  public isCellSelected(terminal: Terminal, x: number, y: number): boolean {\n    if (!this.hasSelection) {\n      return false;\n    }\n    y -= terminal.buffer.active.viewportY;\n    if (this.columnSelectMode) {\n      if (this.startCol <= this.endCol) {\n        return x >= this.startCol && y >= this.viewportCappedStartRow &&\n          x < this.endCol && y <= this.viewportCappedEndRow;\n      }\n      return x < this.startCol && y >= this.viewportCappedStartRow &&\n        x >= this.endCol && y <= this.viewportCappedEndRow;\n    }\n    return (y > this.viewportStartRow && y < this.viewportEndRow) ||\n      (this.viewportStartRow === this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol && x < this.endCol) ||\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportEndRow && x < this.endCol) ||\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol);\n  }\n}\n\nexport function createSelectionRenderModel(): ISelectionRenderModel {\n  return new SelectionRenderModel();\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { DIM_OPACITY, TEXT_BASELINE } from 'browser/renderer/shared/Constants';\nimport { DEFAULT_COLOR, Attributes, DEFAULT_EXT, UnderlineStyle } from 'common/buffer/Constants';\nimport { IColor } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { color, NULL_COLOR, rgba } from 'common/Color';\nimport { tryDrawCustomChar } from 'browser/renderer/shared/CustomGlyphs';\nimport { excludeFromContrastRatioDemands, isPowerlineGlyph, isRestrictedPowerlineGlyph, throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { IUnicodeService } from 'common/services/Services';\nimport { FourKeyMap } from 'common/MultiKeyMap';\nimport { IdleTaskQueue } from 'common/TaskQueue';\nimport { IBoundingBox, ICharAtlasConfig, IRasterizedGlyph, IRequestRedrawEvent, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { IColorContrastCache } from 'browser/Types';\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  texturePage: 0,\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  offset: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nconst enum Constants {\n  /**\n   * The amount of pixel padding to allow in each row. Setting this to zero would make the atlas\n   * page pack as tightly as possible, but more pages would end up being created as a result.\n   */\n  ROW_PIXEL_THRESHOLD = 2,\n  /**\n   * The maximum texture size regardless of what the actual hardware maximum turns out to be. This\n   * is enforced to ensure uploading the texture still finishes in a reasonable amount of time. A\n   * 4096 squared image takes up 16MB of GPU memory.\n   */\n  FORCED_MAX_TEXTURE_SIZE = 4096\n}\n\ninterface ICharAtlasActiveRow {\n  x: number;\n  y: number;\n  height: number;\n}\n\n// Work variables to avoid garbage collection\nlet $glyph = undefined;\n\nexport class TextureAtlas implements ITextureAtlas {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: FourKeyMap<number, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n  private _cacheMapCombined: FourKeyMap<string, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n\n  // The texture that the atlas is drawn to\n  private _pages: AtlasPage[] = [];\n  public get pages(): { canvas: HTMLCanvasElement, version: number }[] { return this._pages; }\n\n  // The set of atlas pages that can be written to\n  private _activePages: AtlasPage[] = [];\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  private _textureSize: number = 512;\n\n  public static maxAtlasPages: number | undefined;\n  public static maxTextureSize: number | undefined;\n\n  private readonly _onAddTextureAtlasCanvas = new EventEmitter<HTMLCanvasElement>();\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n  private readonly _onRemoveTextureAtlasCanvas = new EventEmitter<HTMLCanvasElement>();\n  public readonly onRemoveTextureAtlasCanvas = this._onRemoveTextureAtlasCanvas.event;\n\n  constructor(\n    private readonly _document: Document,\n    private readonly _config: ICharAtlasConfig,\n    private readonly _unicodeService: IUnicodeService\n  ) {\n    this._createNewPage();\n    this._tmpCanvas = createCanvas(\n      _document,\n      this._config.deviceCellWidth * 4 + TMP_CANVAS_GLYPH_PADDING * 2,\n      this._config.deviceCellHeight + TMP_CANVAS_GLYPH_PADDING * 2\n    );\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', {\n      alpha: this._config.allowTransparency,\n      willReadFrequently: true\n    }));\n  }\n\n  public dispose(): void {\n    for (const page of this.pages) {\n      page.canvas.remove();\n    }\n    this._onAddTextureAtlasCanvas.dispose();\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  private _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126, this is not urgent and done in idle callbacks\n    const queue = new IdleTaskQueue();\n    for (let i = 33; i < 126; i++) {\n      queue.enqueue(() => {\n        if (!this._cacheMap.get(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT)) {\n          const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT);\n          this._cacheMap.set(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT, rasterizedGlyph);\n        }\n      });\n    }\n  }\n\n  private _requestClearModel = false;\n  public beginFrame(): boolean {\n    return this._requestClearModel;\n  }\n\n  public clearTexture(): void {\n    if (this._pages[0].currentRow.x === 0 && this._pages[0].currentRow.y === 0) {\n      return;\n    }\n    for (const page of this._pages) {\n      page.clear();\n    }\n    this._cacheMap.clear();\n    this._cacheMapCombined.clear();\n    this._didWarmUp = false;\n  }\n\n  private _createNewPage(): AtlasPage {\n    // Try merge the set of the 4 most used pages of the largest size. This is is deferred to a\n    // microtask to ensure it does not interrupt textures that will be rendered in the current\n    // animation frame which would result in blank rendered areas. This is actually not that\n    // expensive relative to drawing the glyphs, so there is no need to wait for an idle callback.\n    if (TextureAtlas.maxAtlasPages && this._pages.length >= Math.max(4, TextureAtlas.maxAtlasPages / 2)) {\n      queueMicrotask(() => {\n        // Find the set of the largest 4 images, below the maximum size, with the highest\n        // percentages used\n        const pagesBySize = this._pages.filter(e => {\n          return e.canvas.width * 2 <= (TextureAtlas.maxTextureSize || Constants.FORCED_MAX_TEXTURE_SIZE);\n        }).sort((a, b) => {\n          if (b.canvas.width !== a.canvas.width) {\n            return b.canvas.width - a.canvas.width;\n          }\n          return b.percentageUsed - a.percentageUsed;\n        });\n        let sameSizeI = -1;\n        let size = 0;\n        for (let i = 0; i < pagesBySize.length; i++) {\n          if (pagesBySize[i].canvas.width !== size) {\n            sameSizeI = i;\n            size = pagesBySize[i].canvas.width;\n          } else if (i - sameSizeI === 3) {\n            break;\n          }\n        }\n\n        // Gather details of the merge\n        const mergingPages = pagesBySize.slice(sameSizeI, sameSizeI + 4);\n        const sortedMergingPagesIndexes = mergingPages.map(e => e.glyphs[0].texturePage).sort((a, b) => a > b ? 1 : -1);\n        const mergedPageIndex = sortedMergingPagesIndexes[0];\n\n        // Merge into the new page\n        const mergedPage = this._mergePages(mergingPages, mergedPageIndex);\n        mergedPage.version++;\n\n        // Replace the first _merging_ page with the _merged_ page\n        this._pages[mergedPageIndex] = mergedPage;\n\n        // Delete the other 3 pages, shifting glyph texture pages as needed\n        for (let i = sortedMergingPagesIndexes.length - 1; i >= 1; i--) {\n          this._deletePage(sortedMergingPagesIndexes[i]);\n        }\n\n        // Request the model to be cleared to refresh all texture pages.\n        this._requestClearModel = true;\n        this._onAddTextureAtlasCanvas.fire(mergedPage.canvas);\n      });\n    }\n\n    // All new atlas pages are created small as they are highly dynamic\n    const newPage = new AtlasPage(this._document, this._textureSize);\n    this._pages.push(newPage);\n    this._activePages.push(newPage);\n    this._onAddTextureAtlasCanvas.fire(newPage.canvas);\n    return newPage;\n  }\n\n  private _mergePages(mergingPages: AtlasPage[], mergedPageIndex: number): AtlasPage {\n    const mergedSize = mergingPages[0].canvas.width * 2;\n    const mergedPage = new AtlasPage(this._document, mergedSize, mergingPages);\n    for (const [i, p] of mergingPages.entries()) {\n      const xOffset = i * p.canvas.width % mergedSize;\n      const yOffset = Math.floor(i / 2) * p.canvas.height;\n      mergedPage.ctx.drawImage(p.canvas, xOffset, yOffset);\n      for (const g of p.glyphs) {\n        g.texturePage = mergedPageIndex;\n        g.sizeClipSpace.x = g.size.x / mergedSize;\n        g.sizeClipSpace.y = g.size.y / mergedSize;\n        g.texturePosition.x += xOffset;\n        g.texturePosition.y += yOffset;\n        g.texturePositionClipSpace.x = g.texturePosition.x / mergedSize;\n        g.texturePositionClipSpace.y = g.texturePosition.y / mergedSize;\n      }\n\n      this._onRemoveTextureAtlasCanvas.fire(p.canvas);\n\n      // Remove the merging page from active pages if it was there\n      const index = this._activePages.indexOf(p);\n      if (index !== -1) {\n        this._activePages.splice(index, 1);\n      }\n    }\n    return mergedPage;\n  }\n\n  private _deletePage(pageIndex: number): void {\n    this._pages.splice(pageIndex, 1);\n    for (let j = pageIndex; j < this._pages.length; j++) {\n      const adjustingPage = this._pages[j];\n      for (const g of adjustingPage.glyphs) {\n        g.texturePage--;\n      }\n      adjustingPage.version++;\n    }\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number, ext: number, restrictToCellHeight: boolean): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMapCombined, chars, bg, fg, ext, restrictToCellHeight);\n  }\n\n  public getRasterizedGlyph(code: number, bg: number, fg: number, ext: number, restrictToCellHeight: boolean): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMap, code, bg, fg, ext, restrictToCellHeight);\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  private _getFromCacheMap(\n    cacheMap: FourKeyMap<string | number, number, number, number, IRasterizedGlyph>,\n    key: string | number,\n    bg: number,\n    fg: number,\n    ext: number,\n    restrictToCellHeight: boolean = false\n  ): IRasterizedGlyph {\n    $glyph = cacheMap.get(key, bg, fg, ext);\n    if (!$glyph) {\n      $glyph = this._drawToCache(key, bg, fg, ext, restrictToCellHeight);\n      cacheMap.set(key, bg, fg, ext, $glyph);\n    }\n    return $glyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean, dim: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return NULL_COLOR;\n    }\n\n    let result: IColor;\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        result = this._getColorFromAnsiIndex(bgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        result = rgba.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = color.opaque(this._config.colors.foreground);\n        } else {\n          result = this._config.colors.background;\n        }\n        break;\n    }\n\n    return result;\n  }\n\n  private _getForegroundColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, dim: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor {\n    const minimumContrastColor = this._getMinimumContrastColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, false, bold, dim, excludeFromContrastRatioDemands);\n    if (minimumContrastColor) {\n      return minimumContrastColor;\n    }\n\n    let result: IColor;\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        result = this._getColorFromAnsiIndex(fgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        result = rgba.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = this._config.colors.background;\n        } else {\n          result = this._config.colors.foreground;\n        }\n    }\n\n    // Always use an opaque color regardless of allowTransparency\n    if (this._config.allowTransparency) {\n      result = color.opaque(result);\n    }\n\n    // Apply dim to the color, opacity is fine to use for the foreground color\n    if (dim) {\n      result = color.multiplyOpacity(result, DIM_OPACITY);\n    }\n\n    return result;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean, dim: boolean, excludeFromContrastRatioDemands: boolean): IColor | undefined {\n    if (this._config.minimumContrastRatio === 1 || excludeFromContrastRatioDemands) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const cache = this._getContrastCache(dim);\n    const adjustedColor = cache.getColor(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    // Dim cells only require half the contrast, otherwise they wouldn't be distinguishable from\n    // non-dim cells\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio / (dim ? 2 : 1));\n\n    if (!result) {\n      cache.setColor(bg, fg, null);\n      return undefined;\n    }\n\n    const color = rgba.toColor(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    cache.setColor(bg, fg, color);\n\n    return color;\n  }\n\n  private _getContrastCache(dim: boolean): IColorContrastCache {\n    if (dim) {\n      return this._config.colors.halfContrastCache;\n    }\n    return this._config.colors.contrastCache;\n  }\n\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number, ext: number, restrictToCellHeight: boolean = false): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    // Uncomment for debugging\n    // console.log(`draw to cache \"${chars}\"`, bg, fg, ext);\n\n    // Allow 1 cell width per character, with a minimum of 2 (CJK), plus some padding. This is used\n    // to draw the glyph to the canvas as well as to restrict the bounding box search to ensure\n    // giant ligatures (eg. =====>) don't impact overall performance.\n    const allowedWidth = Math.min(this._config.deviceCellWidth * Math.max(chars.length, 2) + TMP_CANVAS_GLYPH_PADDING * 2, this._textureSize);\n    if (this._tmpCanvas.width < allowedWidth) {\n      this._tmpCanvas.width = allowedWidth;\n    }\n    // Include line height when drawing glyphs\n    const allowedHeight = Math.min(this._config.deviceCellHeight + TMP_CANVAS_GLYPH_PADDING * 4, this._textureSize);\n    if (this._tmpCanvas.height < allowedHeight) {\n      this._tmpCanvas.height = allowedHeight;\n    }\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n    this._workAttributeData.extended.ext = ext;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    const underline = !!this._workAttributeData.isUnderline();\n    const strikethrough = !!this._workAttributeData.isStrikethrough();\n    const overline = !!this._workAttributeData.isOverline();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse, dim);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha,\n    // regardless of transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    const powerlineGlyph = chars.length === 1 && isPowerlineGlyph(chars.charCodeAt(0));\n    const restrictedPowerlineGlyph = chars.length === 1 && isRestrictedPowerlineGlyph(chars.charCodeAt(0));\n    const foregroundColor = this._getForegroundColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, dim, bold, excludeFromContrastRatioDemands(chars.charCodeAt(0)));\n    this._tmpCtx.fillStyle = foregroundColor.css;\n\n    // For powerline glyphs left/top padding is excluded (https://github.com/microsoft/vscode/issues/120129)\n    const padding = restrictedPowerlineGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING * 2;\n\n    // Draw custom characters if applicable\n    let customGlyph = false;\n    if (this._config.customGlyphs !== false) {\n      customGlyph = tryDrawCustomChar(this._tmpCtx, chars, padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight, this._config.fontSize, this._config.devicePixelRatio);\n    }\n\n    // Whether to clear pixels based on a threshold difference between the glyph color and the\n    // background color. This should be disabled when the glyph contains multiple colors such as\n    // underline colors to prevent important colors could get cleared.\n    let enableClearThresholdCheck = !powerlineGlyph;\n\n    let chWidth: number;\n    if (typeof codeOrChars === 'number') {\n      chWidth = this._unicodeService.wcwidth(codeOrChars);\n    } else {\n      chWidth = this._unicodeService.getStringCellWidth(codeOrChars);\n    }\n\n    // Draw underline\n    if (underline) {\n      this._tmpCtx.save();\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\n      // When the line width is odd, draw at a 0.5 position\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\n      this._tmpCtx.lineWidth = lineWidth;\n\n      // Underline color\n      if (this._workAttributeData.isUnderlineColorDefault()) {\n        this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      } else if (this._workAttributeData.isUnderlineColorRGB()) {\n        enableClearThresholdCheck = false;\n        this._tmpCtx.strokeStyle = `rgb(${AttributeData.toColorRGB(this._workAttributeData.getUnderlineColor()).join(',')})`;\n      } else {\n        enableClearThresholdCheck = false;\n        let fg = this._workAttributeData.getUnderlineColor();\n        if (this._config.drawBoldTextInBrightColors && this._workAttributeData.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._tmpCtx.strokeStyle = this._getColorFromAnsiIndex(fg).css;\n      }\n\n      // Underline style/stroke\n      this._tmpCtx.beginPath();\n      const xLeft = padding;\n      const yTop = Math.ceil(padding + this._config.deviceCharHeight) - yOffset - (restrictToCellHeight ? lineWidth * 2 : 0);\n      const yMid = yTop + lineWidth;\n      const yBot = yTop + lineWidth * 2;\n\n      for (let i = 0; i < chWidth; i++) {\n        this._tmpCtx.save();\n        const xChLeft = xLeft + i * this._config.deviceCellWidth;\n        const xChRight = xLeft + (i + 1) * this._config.deviceCellWidth;\n        const xChMid = xChLeft + this._config.deviceCellWidth / 2;\n        switch (this._workAttributeData.extended.underlineStyle) {\n          case UnderlineStyle.DOUBLE:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            this._tmpCtx.moveTo(xChLeft, yBot);\n            this._tmpCtx.lineTo(xChRight, yBot);\n            break;\n          case UnderlineStyle.CURLY:\n            // Choose the bezier top and bottom based on the device pixel ratio, the curly line is\n            // made taller when the line width is  as otherwise it's not very clear otherwise.\n            const yCurlyBot = lineWidth <= 1 ? yBot : Math.ceil(padding + this._config.deviceCharHeight - lineWidth / 2) - yOffset;\n            const yCurlyTop = lineWidth <= 1 ? yTop : Math.ceil(padding + this._config.deviceCharHeight + lineWidth / 2) - yOffset;\n            // Clip the left and right edges of the underline such that it can be drawn just outside\n            // the edge of the cell to ensure a continuous stroke when there are multiple underlined\n            // glyphs adjacent to one another.\n            const clipRegion = new Path2D();\n            clipRegion.rect(xChLeft, yTop, this._config.deviceCellWidth, yBot - yTop);\n            this._tmpCtx.clip(clipRegion);\n            // Start 1/2 cell before and end 1/2 cells after to ensure a smooth curve with other\n            // cells\n            this._tmpCtx.moveTo(xChLeft - this._config.deviceCellWidth / 2, yMid);\n            this._tmpCtx.bezierCurveTo(\n              xChLeft - this._config.deviceCellWidth / 2, yCurlyTop,\n              xChLeft, yCurlyTop,\n              xChLeft, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChLeft, yCurlyBot,\n              xChMid, yCurlyBot,\n              xChMid, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChMid, yCurlyTop,\n              xChRight, yCurlyTop,\n              xChRight, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChRight, yCurlyBot,\n              xChRight + this._config.deviceCellWidth / 2, yCurlyBot,\n              xChRight + this._config.deviceCellWidth / 2, yMid\n            );\n            break;\n          case UnderlineStyle.DOTTED:\n            this._tmpCtx.setLineDash([Math.round(lineWidth), Math.round(lineWidth)]);\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n          case UnderlineStyle.DASHED:\n            this._tmpCtx.setLineDash([this._config.devicePixelRatio * 4, this._config.devicePixelRatio * 3]);\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n          case UnderlineStyle.SINGLE:\n          default:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n        }\n        this._tmpCtx.stroke();\n        this._tmpCtx.restore();\n      }\n      this._tmpCtx.restore();\n\n      // Draw stroke in the background color for non custom characters in order to give an outline\n      // between the text and the underline. Only do this when font size is >= 12 as the underline\n      // looks odd when the font size is too small\n      if (!customGlyph && this._config.fontSize >= 12) {\n        // This only works when transparency is disabled because it's not clear how to clear stroked\n        // text\n        if (!this._config.allowTransparency && chars !== ' ') {\n          // Measure the text, only draw the stroke if there is a descent beyond an alphabetic text\n          // baseline\n          this._tmpCtx.save();\n          this._tmpCtx.textBaseline = 'alphabetic';\n          const metrics = this._tmpCtx.measureText(chars);\n          this._tmpCtx.restore();\n          if ('actualBoundingBoxDescent' in metrics && metrics.actualBoundingBoxDescent > 0) {\n            // This translates to 1/2 the line width in either direction\n            this._tmpCtx.save();\n            // Clip the region to only draw in valid pixels near the underline to avoid a slight\n            // outline around the whole glyph, as well as additional pixels in the glyph at the top\n            // which would increase GPU memory demands\n            const clipRegion = new Path2D();\n            clipRegion.rect(xLeft, yTop - Math.ceil(lineWidth / 2), this._config.deviceCellWidth * chWidth, yBot - yTop + Math.ceil(lineWidth / 2));\n            this._tmpCtx.clip(clipRegion);\n            this._tmpCtx.lineWidth = this._config.devicePixelRatio * 3;\n            this._tmpCtx.strokeStyle = backgroundColor.css;\n            this._tmpCtx.strokeText(chars, padding, padding + this._config.deviceCharHeight);\n            this._tmpCtx.restore();\n          }\n        }\n      }\n    }\n\n    // Overline\n    if (overline) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      this._tmpCtx.moveTo(padding, padding + yOffset);\n      this._tmpCtx.lineTo(padding + this._config.deviceCharWidth * chWidth, padding + yOffset);\n      this._tmpCtx.stroke();\n    }\n\n    // Draw the character\n    if (!customGlyph) {\n      this._tmpCtx.fillText(chars, padding, padding + this._config.deviceCharHeight);\n    }\n\n    // If this character is underscore and beyond the cell bounds, shift it up until it is visible\n    // even on the bottom row, try for a maximum of 5 pixels.\n    if (chars === '_' && !this._config.allowTransparency) {\n      let isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n      if (isBeyondCellBounds) {\n        for (let offset = 1; offset <= 5; offset++) {\n          this._tmpCtx.save();\n          this._tmpCtx.fillStyle = backgroundColor.css;\n          this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n          this._tmpCtx.restore();\n          this._tmpCtx.fillText(chars, padding, padding + this._config.deviceCharHeight - offset);\n          isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n          if (!isBeyondCellBounds) {\n            break;\n          }\n        }\n      }\n    }\n\n    // Draw strokethrough\n    if (strikethrough) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 10));\n      const yOffset = this._tmpCtx.lineWidth % 2 === 1 ? 0.5 : 0; // When the width is odd, draw at 0.5 position\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      this._tmpCtx.moveTo(padding, padding + Math.floor(this._config.deviceCharHeight / 2) - yOffset);\n      this._tmpCtx.lineTo(padding + this._config.deviceCharWidth * chWidth, padding + Math.floor(this._config.deviceCharHeight / 2) - yOffset);\n      this._tmpCtx.stroke();\n    }\n\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // Clear out the background color and determine if the glyph is empty.\n    let isEmpty: boolean;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor, foregroundColor, enableClearThresholdCheck);\n    } else {\n      isEmpty = checkCompletelyTransparent(imageData);\n    }\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox, allowedWidth, restrictedPowerlineGlyph, customGlyph, padding);\n\n    // Find the best atlas row to use\n    let activePage: AtlasPage;\n    let activeRow: ICharAtlasActiveRow;\n    while (true) {\n      // If there are no active pages (the last smallest 4 were merged), create a new one\n      if (this._activePages.length === 0) {\n        const newPage = this._createNewPage();\n        activePage = newPage;\n        activeRow = newPage.currentRow;\n        activeRow.height = rasterizedGlyph.size.y;\n        break;\n      }\n\n      // Get the best current row from all active pages\n      activePage = this._activePages[this._activePages.length - 1];\n      activeRow = activePage.currentRow;\n      for (const p of this._activePages) {\n        if (rasterizedGlyph.size.y <= p.currentRow.height) {\n          activePage = p;\n          activeRow = p.currentRow;\n        }\n      }\n\n      // TODO: This algorithm could be simplified:\n      // - Search for the page with ROW_PIXEL_THRESHOLD in mind\n      // - Keep track of current/fixed rows in a Map\n\n      // Replace the best current row with a fixed row if there is one at least as good as the\n      // current row. Search in reverse to prioritize filling in older pages.\n      for (let i = this._activePages.length - 1; i >= 0; i--) {\n        for (const row of this._activePages[i].fixedRows) {\n          if (row.height <= activeRow.height && rasterizedGlyph.size.y <= row.height) {\n            activePage = this._activePages[i];\n            activeRow = row;\n          }\n        }\n      }\n\n      // Create a new one if too much vertical space would be wasted or there is not enough room\n      // left in the page. The previous active row will become fixed in the process as it now has a\n      // fixed height\n      if (activeRow.y + rasterizedGlyph.size.y >= activePage.canvas.height || activeRow.height > rasterizedGlyph.size.y + Constants.ROW_PIXEL_THRESHOLD) {\n        // Create the new fixed height row, creating a new page if there isn't enough room on the\n        // current page\n        let wasNewPageCreated = false;\n        if (activePage.currentRow.y + activePage.currentRow.height + rasterizedGlyph.size.y >= activePage.canvas.height) {\n          // Find the first page with room to create the new row on\n          let candidatePage: AtlasPage | undefined;\n          for (const p of this._activePages) {\n            if (p.currentRow.y + p.currentRow.height + rasterizedGlyph.size.y < p.canvas.height) {\n              candidatePage = p;\n              break;\n            }\n          }\n          if (candidatePage) {\n            activePage = candidatePage;\n          } else {\n            // Create a new page if there is no room\n            const newPage = this._createNewPage();\n            activePage = newPage;\n            activeRow = newPage.currentRow;\n            activeRow.height = rasterizedGlyph.size.y;\n            wasNewPageCreated = true;\n          }\n        }\n        if (!wasNewPageCreated) {\n          // Fix the current row as the new row is being added below\n          if (activePage.currentRow.height > 0) {\n            activePage.fixedRows.push(activePage.currentRow);\n          }\n          activeRow = {\n            x: 0,\n            y: activePage.currentRow.y + activePage.currentRow.height,\n            height: rasterizedGlyph.size.y\n          };\n          activePage.fixedRows.push(activeRow);\n\n          // Create the new current row below the new fixed height row\n          activePage.currentRow = {\n            x: 0,\n            y: activeRow.y + activeRow.height,\n            height: 0\n          };\n        }\n        // TODO: Remove pages from _activePages when all rows are filled\n      }\n\n      // Exit the loop if there is enough room in the row\n      if (activeRow.x + rasterizedGlyph.size.x <= activePage.canvas.width) {\n        break;\n      }\n\n      // If there is not enough room in the current row, finish it and try again\n      if (activeRow === activePage.currentRow) {\n        activeRow.x = 0;\n        activeRow.y += activeRow.height;\n        activeRow.height = 0;\n      } else {\n        activePage.fixedRows.splice(activePage.fixedRows.indexOf(activeRow), 1);\n      }\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePage = this._pages.indexOf(activePage);\n    rasterizedGlyph.texturePosition.x = activeRow.x;\n    rasterizedGlyph.texturePosition.y = activeRow.y;\n    rasterizedGlyph.texturePositionClipSpace.x = activeRow.x / activePage.canvas.width;\n    rasterizedGlyph.texturePositionClipSpace.y = activeRow.y / activePage.canvas.height;\n\n    // Fix the clipspace position as pages may be of differing size\n    rasterizedGlyph.sizeClipSpace.x /= activePage.canvas.width;\n    rasterizedGlyph.sizeClipSpace.y /= activePage.canvas.height;\n\n    // Update atlas current row, for fixed rows the glyph height will never be larger than the row\n    // height\n    activeRow.height = Math.max(activeRow.height, rasterizedGlyph.size.y);\n    activeRow.x += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    activePage.ctx.putImageData(\n      imageData,\n      rasterizedGlyph.texturePosition.x - this._workBoundingBox.left,\n      rasterizedGlyph.texturePosition.y - this._workBoundingBox.top,\n      this._workBoundingBox.left,\n      this._workBoundingBox.top,\n      rasterizedGlyph.size.x,\n      rasterizedGlyph.size.y\n    );\n    activePage.addGlyph(rasterizedGlyph);\n    activePage.version++;\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox, allowedWidth: number, restrictedGlyph: boolean, customGlyph: boolean, padding: number): IRasterizedGlyph {\n    boundingBox.top = 0;\n    const height = restrictedGlyph ? this._config.deviceCellHeight : this._tmpCanvas.height;\n    const width = restrictedGlyph ? this._config.deviceCellWidth : allowedWidth;\n    let found = false;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < padding + width; x++) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = width;\n    found = false;\n    for (let x = padding + width - 1; x >= padding; x--) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = height;\n    found = false;\n    for (let y = height - 1; y >= 0; y--) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePage: 0,\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1),\n        y: (boundingBox.bottom - boundingBox.top + 1)\n      },\n      offset: {\n        x: -boundingBox.left + padding + ((restrictedGlyph || customGlyph) ? Math.floor((this._config.deviceCellWidth - this._config.deviceCharWidth) / 2) : 0),\n        y: -boundingBox.top + padding + ((restrictedGlyph || customGlyph) ? this._config.lineHeight === 1 ? 0 : Math.round((this._config.deviceCellHeight - this._config.deviceCharHeight) / 2) : 0)\n      }\n    };\n  }\n}\n\nclass AtlasPage {\n  public readonly canvas: HTMLCanvasElement;\n  public readonly ctx: CanvasRenderingContext2D;\n\n  private _usedPixels: number = 0;\n  public get percentageUsed(): number { return this._usedPixels / (this.canvas.width * this.canvas.height); }\n\n  private readonly _glyphs: IRasterizedGlyph[] = [];\n  public get glyphs(): ReadonlyArray<IRasterizedGlyph> { return this._glyphs; }\n  public addGlyph(glyph: IRasterizedGlyph): void {\n    this._glyphs.push(glyph);\n    this._usedPixels += glyph.size.x * glyph.size.y;\n  }\n\n  /**\n   * Used to check whether the canvas of the atlas page has changed.\n   */\n  public version = 0;\n\n  // Texture atlas current positioning data. The texture packing strategy used is to fill from\n  // left-to-right and top-to-bottom. When the glyph being written is less than half of the current\n  // row's height, the following happens:\n  //\n  // - The current row becomes the fixed height row A\n  // - A new fixed height row B the exact size of the glyph is created below the current row\n  // - A new dynamic height current row is created below B\n  //\n  // This strategy does a good job preventing space being wasted for very short glyphs such as\n  // underscores, hyphens etc. or those with underlines rendered.\n  public currentRow: ICharAtlasActiveRow = {\n    x: 0,\n    y: 0,\n    height: 0\n  };\n  public readonly fixedRows: ICharAtlasActiveRow[] = [];\n\n  constructor(\n    document: Document,\n    size: number,\n    sourcePages?: AtlasPage[]\n  ) {\n    if (sourcePages) {\n      for (const p of sourcePages) {\n        this._glyphs.push(...p.glyphs);\n        this._usedPixels += p._usedPixels;\n      }\n    }\n    this.canvas = createCanvas(document, size, size);\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this.ctx = throwIfFalsy(this.canvas.getContext('2d', { alpha: true }));\n  }\n\n  public clear(): void {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.currentRow.x = 0;\n    this.currentRow.y = 0;\n    this.currentRow.height = 0;\n    this.fixedRows.length = 0;\n    this.version++;\n  }\n}\n\n/**\n * Makes a particular rgb color and colors that are nearly the same in an ImageData completely\n * transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, bg: IColor, fg: IColor, enableThresholdCheck: boolean): boolean {\n  // Get color channels\n  const r = bg.rgba >>> 24;\n  const g = bg.rgba >>> 16 & 0xFF;\n  const b = bg.rgba >>> 8 & 0xFF;\n  const fgR = fg.rgba >>> 24;\n  const fgG = fg.rgba >>> 16 & 0xFF;\n  const fgB = fg.rgba >>> 8 & 0xFF;\n\n  // Calculate a threshold that when below a color will be treated as transpart when the sum of\n  // channel value differs. This helps improve rendering when glyphs overlap with others. This\n  // threshold is calculated relative to the difference between the background and foreground to\n  // ensure important details of the glyph are always shown, even when the contrast ratio is low.\n  // The number 12 is largely arbitrary to ensure the pixels that escape the cell in the test case\n  // were covered (fg=#8ae234, bg=#c4a000).\n  const threshold = Math.floor((Math.abs(r - fgR) + Math.abs(g - fgG) + Math.abs(b - fgB)) / 12);\n\n  // Set alpha channel of relevent pixels to 0\n  let isEmpty = true;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    // Check exact match\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      // Check the threshold based difference\n      if (enableThresholdCheck &&\n          (Math.abs(imageData.data[offset] - r) +\n          Math.abs(imageData.data[offset + 1] - g) +\n          Math.abs(imageData.data[offset + 2] - b)) < threshold) {\n        imageData.data[offset + 3] = 0;\n      } else {\n        isEmpty = false;\n      }\n    }\n  }\n\n  return isEmpty;\n}\n\nfunction checkCompletelyTransparent(imageData: ImageData): boolean {\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset + 3] > 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction createCanvas(document: Document, width: number, height: number): HTMLCanvasElement {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\nimport { IColor, IColorRGB } from 'common/Types';\n\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport const NULL_COLOR: IColor = {\n  css: '#00000000',\n  rgba: 0\n};\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    $a = (fg.rgba & 0xFF) / 255;\n    if ($a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    const css = channels.toCss($r, $g, $b);\n    const rgba = channels.toRgba($r, $g, $b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss($r, $g, $b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    $a = Math.round(opacity * 0xFF);\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss($r, $g, $b, $a),\n      rgba: channels.toRgba($r, $g, $b, $a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    $a = color.rgba & 0xFF;\n    return opacity(color, ($a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb',\n * '#rrggbbaa').\n */\nexport namespace css {\n  let $ctx: CanvasRenderingContext2D | undefined;\n  let $litmusColor: CanvasGradient | undefined;\n  if (!isNode) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (ctx) {\n      $ctx = ctx;\n      $ctx.globalCompositeOperation = 'copy';\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\n    }\n  }\n\n  /**\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\n   *\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\n   * environment.\n   */\n  export function toColor(css: string): IColor {\n    // Formats: #rgb[a] and #rrggbb[aa]\n    if (css.match(/#[\\da-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor($r, $g, $b);\n        }\n        case 5: { // #rgba\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor($r, $g, $b, $a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n\n    // Formats: rgb() or rgba()\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) {\n      $r = parseInt(rgbaMatch[1]);\n      $g = parseInt(rgbaMatch[2]);\n      $b = parseInt(rgbaMatch[3]);\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor($r, $g, $b, $a);\n    }\n\n    // Validate the context is available for canvas-based color parsing\n    if (!$ctx || !$litmusColor) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Validate the color using canvas fillStyle\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    $ctx.fillStyle = $litmusColor;\n    $ctx.fillStyle = css;\n    if (typeof $ctx.fillStyle !== 'string') {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    $ctx.fillRect(0, 0, 1, 1);\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\n\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\n    if ($a !== 0xFF) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\n    // format\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n    return {\n      rgba: channels.toRgba($r, $g, $b, $a),\n      css\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nexport const isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexport function getSafariVersion(): number {\n  if (!isSafari) {\n    return 0;\n  }\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\n  if (majorVersion === null || majorVersion.length < 2) {\n    return 0;\n  }\n  return parseInt(majorVersion[1]);\n}\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n// Note that when this is true, isLinux will also be true.\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\n\ninterface ITaskQueue {\n  /**\n   * Adds a task to the queue which will run in a future idle callback.\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\n   * should split their work into smaller pieces and return `true` to get\n   * called again until the work is done (on falsy return value).\n   */\n  enqueue(task: () => boolean | void): void;\n\n  /**\n   * Flushes the queue, running all remaining tasks synchronously.\n   */\n  flush(): void;\n\n  /**\n   * Clears any remaining tasks from the queue, these will not be run.\n   */\n  clear(): void;\n}\n\ninterface ITaskDeadline {\n  timeRemaining(): number;\n}\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\n\nabstract class TaskQueue implements ITaskQueue {\n  private _tasks: (() => boolean | void)[] = [];\n  private _idleCallback?: number;\n  private _i = 0;\n\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\n  protected abstract _cancelCallback(identifier: number): void;\n\n  public enqueue(task: () => boolean | void): void {\n    this._tasks.push(task);\n    this._start();\n  }\n\n  public flush(): void {\n    while (this._i < this._tasks.length) {\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n    }\n    this.clear();\n  }\n\n  public clear(): void {\n    if (this._idleCallback) {\n      this._cancelCallback(this._idleCallback);\n      this._idleCallback = undefined;\n    }\n    this._i = 0;\n    this._tasks.length = 0;\n  }\n\n  private _start(): void {\n    if (!this._idleCallback) {\n      this._idleCallback = this._requestCallback(this._process.bind(this));\n    }\n  }\n\n  private _process(deadline: ITaskDeadline): void {\n    this._idleCallback = undefined;\n    let taskDuration = 0;\n    let longestTask = 0;\n    let lastDeadlineRemaining = deadline.timeRemaining();\n    let deadlineRemaining = 0;\n    while (this._i < this._tasks.length) {\n      taskDuration = Date.now();\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\n      // this is not an issue here as a clock change during a short running task is very unlikely\n      // in case it still happened and leads to negative duration, simply assume 1 msec\n      taskDuration = Math.max(1, Date.now() - taskDuration);\n      longestTask = Math.max(taskDuration, longestTask);\n      // Guess the following task will take a similar time to the longest task in this batch, allow\n      // additional room to try avoid exceeding the deadline\n      deadlineRemaining = deadline.timeRemaining();\n      if (longestTask * 1.5 > deadlineRemaining) {\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\n        // task should be split into sub-tasks to ensure the UI remains responsive.\n        if (lastDeadlineRemaining - taskDuration < -20) {\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\n        }\n        this._start();\n        return;\n      }\n      lastDeadlineRemaining = deadlineRemaining;\n    }\n    this.clear();\n  }\n}\n\n/**\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\n */\nexport class PriorityTaskQueue extends TaskQueue {\n  protected _requestCallback(callback: CallbackWithDeadline): number {\n    return setTimeout(() => callback(this._createDeadline(16)));\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    clearTimeout(identifier);\n  }\n\n  private _createDeadline(duration: number): ITaskDeadline {\n    const end = Date.now() + duration;\n    return {\n      timeRemaining: () => Math.max(0, end - Date.now())\n    };\n  }\n}\n\nclass IdleTaskQueueInternal extends TaskQueue {\n  protected _requestCallback(callback: IdleRequestCallback): number {\n    return requestIdleCallback(callback);\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    cancelIdleCallback(identifier);\n  }\n}\n\n/**\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\n * introduce race conditions.\n *\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\n\n/**\n * An object that tracks a single debounced task that will run on the next idle frame. When called\n * multiple times, only the last set task will run.\n */\nexport class DebouncedIdleTask {\n  private _queue: ITaskQueue;\n\n  constructor() {\n    this._queue = new IdleTaskQueue();\n  }\n\n  public set(task: () => boolean | void): void {\n    this._queue.clear();\n    this._queue.enqueue(task);\n  }\n\n  public flush(): void {\n    this._queue.flush();\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n  public isOverline(): number      { return this.bg & BgFlags.OVERLINE; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 0;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000,\n  OVERLINE = 0x40000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate\n      // pair conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharacterJoinerService, ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { ITerminal } from 'browser/Types';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { getSafariVersion, isSafari } from 'common/Platform';\nimport { ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { ITerminalAddon, Terminal } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\n\nexport class WebglAddon extends Disposable implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n\n  private readonly _onChangeTextureAtlas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onChangeTextureAtlas = this._onChangeTextureAtlas.event;\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n  private readonly _onRemoveTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onRemoveTextureAtlasCanvas = this._onRemoveTextureAtlasCanvas.event;\n  private readonly _onContextLoss = this.register(new EventEmitter<void>());\n  public readonly onContextLoss = this._onContextLoss.event;\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {\n    if (isSafari && getSafariVersion() < 16) {\n      throw new Error('Webgl2 is only supported on Safari 16 and above');\n    }\n    super();\n  }\n\n  public activate(terminal: Terminal): void {\n    const core = (terminal as any)._core as ITerminal;\n    if (!terminal.element) {\n      this.register(core.onWillOpen(() => this.activate(terminal)));\n      return;\n    }\n\n    this._terminal = terminal;\n    const coreService: ICoreService = core.coreService;\n    const optionsService: IOptionsService = core.optionsService;\n\n    const unsafeCore = core as any;\n    const renderService: IRenderService = unsafeCore._renderService;\n    const characterJoinerService: ICharacterJoinerService = unsafeCore._characterJoinerService;\n    const charSizeService: ICharSizeService = unsafeCore._charSizeService;\n    const coreBrowserService: ICoreBrowserService = unsafeCore._coreBrowserService;\n    const decorationService: IDecorationService = unsafeCore._decorationService;\n    const themeService: IThemeService = unsafeCore._themeService;\n\n    this._renderer = this.register(new WebglRenderer(\n      terminal,\n      characterJoinerService,\n      charSizeService,\n      coreBrowserService,\n      coreService,\n      decorationService,\n      optionsService,\n      themeService,\n      this._preserveDrawingBuffer\n    ));\n    this.register(forwardEvent(this._renderer.onContextLoss, this._onContextLoss));\n    this.register(forwardEvent(this._renderer.onChangeTextureAtlas, this._onChangeTextureAtlas));\n    this.register(forwardEvent(this._renderer.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas));\n    this.register(forwardEvent(this._renderer.onRemoveTextureAtlasCanvas, this._onRemoveTextureAtlasCanvas));\n    renderService.setRenderer(this._renderer);\n\n    this.register(toDisposable(() => {\n      const renderService: IRenderService = (this._terminal as any)._core._renderService;\n      renderService.setRenderer((this._terminal as any)._core._createRenderer());\n      renderService.handleResize(terminal.cols, terminal.rows);\n    }));\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearTextureAtlas();\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","INDICES_PER_CELL","BYTES_PER_CELL","Float32Array","BYTES_PER_ELEMENT","$glyph","$i","$leftCellPadding","$clippedPixels","GlyphRenderer","Disposable","constructor","_terminal","_gl","_dimensions","super","_activeBuffer","_vertices","count","attributes","attributesBuffers","gl","this","undefined","TextureAtlas","maxAtlasPages","Math","min","throwIfFalsy","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","_program","createProgram","maxFragmentShaderTextureUnits","textureConditionals","i","createFragmentShaderSource","register","toDisposable","deleteProgram","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","unitQuadVertices","unitQuadVerticesBuffer","createBuffer","deleteBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","unitQuadElementIndices","Uint8Array","elementIndicesBuffer","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","useProgram","textureUnits","Int32Array","uniform1iv","uniformMatrix4fv","PROJECTION_MATRIX","_atlasTextures","glTexture","GLTexture","createTexture","deleteTexture","texture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","handleResize","beginFrame","_atlas","updateCell","x","y","code","bg","fg","ext","chars","lastBg","_updateCell","array","cols","NULL_CELL_CODE","length","getRasterizedGlyphCombinedChar","getRasterizedGlyph","floor","device","cell","width","char","offset","left","top","size","canvas","height","texturePage","texturePositionClipSpace","pages","sizeClipSpace","fill","clear","terminal","newCount","rows","viewport","uniform2f","render","renderModel","activeBuffer","bufferLength","lineLengths","si","sub","subarray","set","STREAM_DRAW","version","_bindAtlasPageTexture","drawElementsInstanced","TRIANGLE_STRIP","setAtlas","atlas","generateMipmap","setDimensions","dimensions","BYTES_PER_RECTANGLE","Vertices","$rgba","$isDefault","$x1","$y1","$r","$g","$b","$a","RectangleRenderer","_themeService","_verticesCursor","_updateCachedColors","colors","onChangeColors","e","_updateViewportRectangle","renderBackgrounds","_renderVertices","renderCursor","vertices","DYNAMIC_DRAW","_bgFloat","_colorToFloat32Array","background","_cursorFloat","cursor","_addRectangleFloat","updateBackgrounds","model","currentStartX","currentBg","currentFg","currentInverse","modelIndex","inverse","rectangleCount","RENDER_MODEL_INDICIES_PER_CELL","cells","RENDER_MODEL_BG_OFFSET","RENDER_MODEL_FG_OFFSET","_updateRectangle","updateCursor","style","dpr","cursorWidth","startX","endX","ansi","rgba","foreground","expandFloat32Array","_addRectangle","x1","y1","r","g","b","a","color","RENDER_MODEL_EXT_OFFSET","COMBINED_CHAR_BIT_MASK","Uint32Array","selection","createSelectionRenderModel","resize","indexCount","WebglRenderer","_characterJoinerService","_charSizeService","_coreBrowserService","_coreService","_decorationService","_optionsService","preserveDrawingBuffer","_model","RenderModel","_workCell","CellData","_onChangeTextureAtlas","EventEmitter","onChangeTextureAtlas","event","_onAddTextureAtlasCanvas","onAddTextureAtlasCanvas","_onRemoveTextureAtlasCanvas","onRemoveTextureAtlasCanvas","_onRequestRedraw","onRequestRedraw","_onContextLoss","onContextLoss","_handleColorChange","_cellColorResolver","CellColorResolver","_core","_renderLayers","LinkRenderLayer","screenElement","linkifier2","createRenderDimensions","_devicePixelRatio","_updateDimensions","_updateCursorBlink","onOptionChange","_handleOptionsChanged","_canvas","document","createElement","contextAttributes","antialias","depth","getContext","Error","addDisposableDomListener","console","log","preventDefault","_contextRestorationTimeout","setTimeout","warn","fire","clearTimeout","removeTerminalFromCache","_initializeWebGLState","_requestRedrawViewport","observeDevicePixelDimensions","window","w","h","_setCanvasDevicePixelDimensions","appendChild","_rectangleRenderer","_glyphRenderer","_isAttached","body","contains","l","dispose","parentElement","removeChild","textureAtlas","_charAtlas","_refreshCharAtlas","_clearModel","handleDevicePixelRatioChange","css","handleCharSizeChanged","handleBlur","_cursorBlinkStateManager","pause","handleFocus","resume","handleSelectionChanged","start","end","columnSelectMode","update","handleCursorMove","restartBlinkAnimation","acquireTextureAtlas","rawOptions","_charAtlasDisposable","getDisposeArrayDisposable","forwardEvent","warmUp","clearGlyphRenderer","clearTextureAtlas","clearTexture","reset","registerCharacterJoiner","handler","deregisterCharacterJoiner","joinerId","renderRows","handleGridChanged","_updateModel","isCursorVisible","options","cursorBlink","CursorBlinkStateManager","_requestRedrawCursor","row","line","joinedRanges","isJoined","lastCharX","range","j","clamp","cursorY","buffer","active","baseY","cursorX","lastCursorX","isCursorInitialized","isCursorHidden","modelUpdated","ydisp","lines","get","getJoinedCharacters","result","loadCell","shift","JoinedCellData","translateToString","getChars","getCode","resolve","getWidth","isFocused","cursorStyle","cursorInactiveStyle","cursorAccent","NULL_CELL_CHAR","ceil","lineHeight","round","letterSpacing","AttributeData","firstCell","content","combinedData","_width","isCombined","setFromCharData","value","getAsCharData","max","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","deleteShader","vertexSource","fragmentSource","program","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","newLength","newArray","BaseRenderLayer","_container","id","zIndex","_alpha","_deviceCharWidth","_deviceCharHeight","_deviceCellWidth","_deviceCellHeight","_deviceCharLeft","_deviceCharTop","classList","add","toString","_initCanvas","remove","_ctx","alpha","_clearAll","startRow","endRow","_setTransparency","oldCanvas","cloneNode","replaceChild","colorSet","dim","_fillBottomLineAtCells","fillRect","clearRect","fillStyle","_clearCells","_fillCharTrueColor","font","_getFont","textBaseline","TEXT_BASELINE","_clipCell","fillText","beginPath","rect","clip","isBold","isItalic","fontWeightBold","fontWeight","fontSize","fontFamily","container","coreBrowserService","optionsService","themeService","onShowLinkUnderline","_handleShowLinkUnderline","onHideLinkUnderline","_handleHideLinkUnderline","_state","_clearCurrentLink","middleRowCount","y2","x2","INVERTED_DEFAULT_COLOR","is256Color","node","addEventListener","disposed","removeEventListener","$colors","$fg","$bg","$hasFg","$hasBg","$isSelected","_selectionRenderModel","extended","forEachDecorationAtCell","d","backgroundColorRGB","foregroundColorRGB","isCellSelected","selectionBackgroundOpaque","selectionInactiveBackgroundOpaque","selectionForeground","charAtlasCache","deviceCellWidth","deviceCellHeight","deviceCharWidth","deviceCharHeight","devicePixelRatio","newConfig","generateConfig","entry","ownedByIndex","ownedBy","indexOf","configEquals","config","splice","push","core","newEntry","unicodeService","index","clonedColors","NULL_COLOR","selectionBackgroundTransparent","selectionInactiveBackgroundTransparent","slice","contrastCache","halfContrastCache","customGlyphs","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","colorCode","DIM_OPACITY","isFirefox","isLegacyEdge","_renderCallback","_restartInterval","isPaused","_blinkStartTimeout","_blinkInterval","clearInterval","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","BLINK_INTERVAL","time","setInterval","blockElementDefinitions","patternCharacterDefinitions","boxDrawingDefinitions","xp","yp","powerlineDefinitions","rightPadding","leftPadding","ctx","c","xOffset","yOffset","blockElementDefinition","charDefinition","box","xEighth","yEighth","drawBlockElementChar","patternDefinition","patternSet","cachedPatterns","Map","pattern","tmpCanvas","tmpCtx","imageData","ImageData","startsWith","parseInt","substring","split","map","parseFloat","data","putImageData","createPattern","drawPatternChar","boxDrawingDefinition","strokeStyle","instructions","Object","entries","actualInstructions","lineWidth","Number","instruction","f","svgToCanvasInstructionMap","args","translateArgs","stroke","closePath","drawBoxDrawingChar","powerlineDefinition","clipRegion","Path2D","cssLineWidth","drawPowerlineChar","bezierCurveTo","lineTo","moveTo","cellWidth","cellHeight","doClamp","element","parentWindow","callback","observer","ResizeObserver","find","target","disconnect","devicePixelContentBoxSize","inlineSize","blockSize","observe","isPowerlineGlyph","codepoint","isBoxOrBlockGlyph","SelectionRenderModel","hasSelection","viewportStartRow","viewportEndRow","viewportCappedStartRow","viewportCappedEndRow","startCol","endCol","selectionStart","selectionEnd","viewportY","NULL_RASTERIZED_GLYPH","texturePosition","_pages","_document","_config","_unicodeService","_didWarmUp","_cacheMap","FourKeyMap","_cacheMapCombined","_activePages","_workBoundingBox","bottom","right","_workAttributeData","_textureSize","_requestClearModel","_createNewPage","_tmpCanvas","createCanvas","TMP_CANVAS_GLYPH_PADDING","_tmpCtx","willReadFrequently","page","_doWarmUp","queue","IdleTaskQueue","enqueue","DEFAULT_COLOR","DEFAULT_EXT","rasterizedGlyph","_drawToCache","currentRow","queueMicrotask","pagesBySize","filter","sort","percentageUsed","sameSizeI","mergingPages","sortedMergingPagesIndexes","glyphs","mergedPageIndex","mergedPage","_mergePages","_deletePage","newPage","AtlasPage","mergedSize","p","drawImage","pageIndex","adjustingPage","restrictToCellHeight","_getFromCacheMap","cacheMap","key","_getColorFromAnsiIndex","idx","_getBackgroundColor","bgColorMode","bgColor","arr","toColorRGB","toColor","opaque","_getForegroundColor","fgColorMode","fgColor","bold","excludeFromContrastRatioDemands","minimumContrastColor","_getMinimumContrastColor","multiplyOpacity","_resolveBackgroundRgba","_resolveForegroundRgba","cache","_getContrastCache","adjustedColor","getColor","bgRgba","fgRgba","ensureContrastRatio","setColor","codeOrChars","String","fromCharCode","allowedWidth","allowedHeight","save","isInvisible","isInverse","isDim","italic","underline","isUnderline","strikethrough","isStrikethrough","overline","isOverline","getFgColor","getFgColorMode","getBgColor","getBgColorMode","temp","temp2","backgroundColor","globalCompositeOperation","fontStyle","powerlineGlyph","charCodeAt","restrictedPowerlineGlyph","isRestrictedPowerlineGlyph","foregroundColor","padding","customGlyph","tryDrawCustomChar","chWidth","enableClearThresholdCheck","wcwidth","getStringCellWidth","isUnderlineColorDefault","isUnderlineColorRGB","getUnderlineColor","join","xLeft","yTop","yMid","yBot","xChLeft","xChRight","xChMid","underlineStyle","yCurlyBot","yCurlyTop","setLineDash","restore","metrics","measureText","actualBoundingBoxDescent","strokeText","isBeyondCellBounds","clearColor","getImageData","isEmpty","checkCompletelyTransparent","_findGlyphBoundingBox","activePage","activeRow","fixedRows","wasNewPageCreated","candidatePage","addGlyph","boundingBox","restrictedGlyph","found","alphaOffset","_usedPixels","_glyphs","glyph","sourcePages","enableThresholdCheck","fgR","fgG","fgB","threshold","abs","channels","rgb","toPaddedHex","s","contrastRatio","l1","l2","toCss","toRgba","opacity","toChannels","blend","bgR","bgG","bgB","isOpaque","ratio","rgbaColor","factor","$ctx","$litmusColor","isNode","createLinearGradient","match","repeat","rgbaMatch","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","resultA","resultARatio","resultB","_listeners","_disposed","_event","listener","arg1","arg2","call","from","to","disposeArray","disposables","_disposables","_isDisposed","unregister","TwoKeyMap","_data","first","second","third","fourth","navigator","userAgent","platform","includes","isSafari","test","majorVersion","isMac","isIpad","isIphone","isWindows","isLinux","isChromeOS","TaskQueue","_tasks","_i","task","_start","flush","_idleCallback","_cancelCallback","_requestCallback","_process","bind","deadline","taskDuration","longestTask","lastDeadlineRemaining","timeRemaining","deadlineRemaining","PriorityTaskQueue","_createDeadline","identifier","duration","requestIdleCallback","cancelIdleCallback","_queue","ExtendedAttrs","fromColorRGB","clone","newObj","hasExtendedAttrs","isBlink","isProtected","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","updateExtended","underlineColor","getUnderlineColorMode","isUnderlineColorPalette","getUnderlineStyle","_urlId","_ext","urlId","fromCharData","obj","stringFromCodePoint","CHAR_DATA_ATTR_INDEX","combined","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","DEFAULT_ATTR","CHAR_DATA_CODE_INDEX","NULL_CELL_WIDTH","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","WHITESPACE_CELL_CODE","codePoint","_interim","decode","input","startPos","interim","byte1","byte2","byte3","byte4","discardInterim","cp","tmp","pos","missing","fourStop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","WebglAddon","_preserveDrawingBuffer","getSafariVersion","activate","onWillOpen","coreService","unsafeCore","renderService","_renderService","characterJoinerService","charSizeService","decorationService","_renderer","setRenderer","_createRenderer"],"sourceRoot":""}